
# 다양한 그래프 알고리즘

 ## 서로소 집합 알고리즘

 - 서로소 집합이란, 공통 원소가 없는 두 집합을 말한다.
 - 서로소 관계를 판단 할 때, 원소를 확인해서 판단을 진행 할 수 있다.
 - 서로소 집합 자료구조란, 서로소 판별을 위해 사용 할 수 있는 자료구조.
 - 서로소 부분 집합들로 나누어진 원소들의 데이터를 처리하기 위한 자료구조이다.
 - 서로소 집합 자료구조는 두 종류의 연산을 지원.
1. 합집합 Union : 두개의 원소가 포함 된 집합을 하나의 집합으로 합치는 연산. 합집합 연산을 수행 할 때는 두 원소가 포함되어 있는 각각의 집합이 같은 집합이 될 수 있도록 합치는 역할을 수행.
2. 찾기 Find : 특정한 원소가 속한 집합이 어떤 집합인지 알려주는 연산. 두개의 원소가 주어졌을 때 두 원소가 같은 집합에 포함되어 있는지 여부를 찾기 연산을 통해 알 수 있다.
 - 서로소 집합 자료구조는 합치기 찾기 Union Find 자료구조라고 불리기도 한다.

 - 여러개의 합치기 연산이 주어졌을 때 서로소 집합 자료구조의 동작 과정은 다음과 같다.
1. 합집합 연산을 확인하여 서로 연결된 두 노드 A, B를 확인
 1-1. A와 B의 루트 노드 A' B'을 찾는다.
 1-2. A'을 B'의 부모 노드로 설정한다.
2. 모든 합집합 연산을 처리 할 때까지 1번의 과정을 반복.

 - 보통 Union 할 때 숫자가 큰 노드가 숫자가 작은 노드를 가르키도록 설정한다.

 - 해당 작업을 통해 손쉽게 집합의 형태를 확인 할 수 있다. 루트노드로 결국 모이기 때문이다. 루트노드가 같다면 같은 집합이라고 한다.

 - 기본적인 형태의 서로소 집합자료구조는 루트노드에 즉시 접근 할 수 없다. 루트 노드를 찾기 위해 부모 테이블을 계속 확인하며 거슬러 올라가야 한다. 그렇다면 재귀적으로 자신의 루트노드를 찾아 올라가야 한다.

### 서로소 집합 자료 구조 : 기본적인 구현 방법의 문제점

 - 합집합 연산이 편향되게 이뤄지는 경우, Find 함수가 비효율적으로 동작합니다. (Find는 부모노드가 자기 자신이 아니라면 루트가 아니기에 자신의 부모에 대해 재귀적으로 호출하여 반복한다.)
 - 최악의 경우 찾기 함수가 모든 노드를 다 확인하게 되어 시간 복잡도가 O(V)가 된다.

따라서, 찾기 함수를 최적화 하기 위해 경로압축Path Compression을 이용 할 수 있다.
 - 찾기 함수를 재귀적으로 호출 한 뒤에 부모 테이블 값을 바로 갱신하는 것이다.

 - 경로 압축 기법을 적용하면 각 노드에 대하여 찾기 함수를 호출 한 이후, 해당 노드의 루트 노드가 바로 부모노드가 된다.

 - 동일한 예시에 대해 모든 합집합 함수를 처리 한 후, 각 원소에 대하여 찾기 함수를 수행하면 부모테이블을 직접 가르키도록 갱신이 된다. 그래서기본적인 방법에 비해 시간 복잡도가 개선이 된다.

### 서로소 집합을 활용한 사이클 판별

 - 서로소 집합은 무방향 그래프 내에서의 사이클을 판별 할 때 사용이 가능하다. 즉, 방향성이 없는 그래프를 무방향 그래프에서는 사이클 판별 목적으로 사용 할 수 있다. 참고로 방향 그래프에서의 사이클 판별 여부는 DFS를 사용하여 판별 가능.

 - 사이클 판별 알고리즘
1. 각 간선을 하나씩 확인하며 두 노드의 루트 노드를 확인. find함수 호출
 1-1. 루트 노드가 서로 다르다면, 즉 서로 다른 집합이라면 두 노드에 대하여 Union연산 수행하여 같은 집합이 되도록 만든다.
 1-2. 루트 노드가 서로 같다면, 같은 집합이라면 사이클이 발생 할 것.
2. 그래프에 포함되어 있는 모든 간선에 대하여 1번 과정을 반복 모든 간선에 대해 cycle이 발생하지 않았다면 해당 그래프에는 사이클이 없다고 정의 가능.

간선 정보를 확인 했을 때, 노드 두개가 이미 같은 노드를 가르키고 있다면, 사이클이 발생하였다고 할 수 있다.


### 신장 트리 알고리즘

신장 트리? : 그래프에서 모든 노드를 포함하면서 사이클이 존재하지 않는 부분 그래프. 원본 그래프의 모든 간선을 이용하는 것이 아닌 일부 간선만 사용하여 모든 노드가 포함되어 서로 연결되면서 사이클이 존재하지 않기에, 트리의 조건을 만족하여 신장 트리라고 부른다. 사이클x, 모든노드 연결o여야 함.

 신장 트리는 모든 노드가 연결되어 있지만 실제 간선은 이용하지 않아도 된다는 점에서.

 - 최소한의 비용으로 구성되는 신장 트리를 찾아야 할때. ex)N개의 도시가 존재하는 상황에서 두 도시 사이에 도로를 놓아 전체 도시가 서로 연결될 수 있게 도로를 설치하는 경우 등.

 ### 크루스칼 알고리즘

 - 대표적인 최소 신장 트리 알고리즘. 그리디 알고리즘의 일종.

 - 간선을 하나씩 확인하면서 최소 신장 트리에 포함을 시킬지 말지 결정을 하는 방식으로 동작한다.

1. 먼저 간선 데이터를 간선의 비용에 따라 오름차순으로 정렬.
2. 간선을 하나씩 확인하며 현재 간선이 사이클을 발생시키는지 확인
 2-1. 사이클이 발생하지 않는 경우 최소 신장 트리에 포함
 2-2. 사이클이 발생하는 경우 최소 신장 트리에 포함시키지 않는다.
3. 모든 간선에 대해 2번 과정 반복.
4. 포함 시킨 간선들만 모아서 최소 신장 트리 생성.

 트리에 포함되어 있는 간선의 갯수는 전체 노드 갯수 N-1개이다. 트리의 특징으로, 사이클 또한 존재하지 않는다.

 - 크루스칼 알고리즘은 간선의 갯수가 E개일 때 O(ElogE)의 시간 복잡도를 가진다.
 - 크루스칼 알고리즘에서 가장 많은 시간을 요구하는 곳은 간선의 정렬을 수행하는 부분이고, 해당 부분의 표준 라이브러리 시간복잡도가 nlogn이라 ElogE의 시간 복잡도를 가진다.

 ### 위상 정렬

위상 정렬 : 사이클이 없는 방향 그래프DAG의 모든 노드를 방향성에 거스르지 않도록 순서대로 나열하는 것. 

ex) 선수 과목을 고려한 학습 순서 설정

 - 진입 차수 : 특정 노드로 들어오는 간선의 갯수
 - 진출 차수 : 특정 노드에서 나가는 간선의 갯수

위상 정렬은 DFS를 이용해 구현 할 수 있으며, 큐를 이용해서 역시 구현이 가능하다.

 - 큐를 이용하는 위상 정렬 알고리즘의 동작과정
1. 진입차수가 0인 모든 노드를 큐에 넣는다.
2. 큐가 빌 때까지 다음 과정을 반복.
 2-1. 큐에서 원소를 꺼내 해당 노드에서 나가는 간선을 그래프에서 제거.
 2-2. 새롭게 진입차수가 0이 된 노드를 큐에 넣는다.
3. 큐가 빌 때까지 반복.
즉, 각 노드가 큐에 들어온 순서가 위상 정렬을 수행한 결과이다.

 - 위상 정렬은 DAG순환하지 않는 방향 그래프에 대해서만 수행이 가능하다.
 - 위상 정렬에서는 여러가지 답이 존재 할 수 있다.
  - 한 단계에서 큐에 새롭게 들어가는 원소가 2개 이상인 경우가 있다면 여러가지 답이 존재한다. 전체 정렬 결과에 대해 정답은 맞을 것.
 - 모든 원소를 방문하기 전에 큐가 빈다면 사이클이 존재한다고 판단 할 수 있음
  - 사이클에 포함된 원소 중에서 어떠한 원소도 큐에 들어가지 못한다. (방문처리가 되어 정렬을 수행 할 수 없는 원소가 되기에)
 - 스택을 활용한 DFS를 이용해 위상 정렬을 수행 할 수도 있다.

 - 위상정렬 알고리즘 성능 : 시간 복잡도는 O(V+E)이다. 모든 노드를 확인하며 각 노드에서 나가는 간선을 차례대로 반복하기 때문에. 한 번 q에 들어간 노드는 다시 들어가지 않으며 한번 확인한 간선을 다시 건드리거나 하지 않기에, 각각 노드와 간선의 갯수만큼 시간복잡도를 가진다.
























