
# 기타 알고리즘

## 소수

 - 소수란 1과 자기 자신 빼면 약수가 없는 수.

 - 코테에서는 소수 판별 문제가 굉장히 자주 출제됨.

 - 보통은 2부터 n까지 전부 확인한다.

 - 약수의 특징을 이용하여 시간 복잡도를 줄일 수 있다.

 - sqrt(n) 까지만 확인하여 나눠지는지 확인하면 된다.

 - 제곱근을 int로 변환 후 +1 까지 체크해서 나눠 떨어지면 소수가 아니라는 결과를 낼 수 있다.

 - 시간 복잡도를 O(N^1/2)로 줄일 수 있다.

### 다수의 소수 판별

 - 하나의 소수 판별은 쉽다. 하지만 특정 수의 범위 안에 존재하는 모든 소수를 찾아야 할 때는 어떻게 할 것인가?

 - 에라토스테네스의 체 알고리즘을 사용 할 수 있다.

#### 에라토스테네스의 체 알고리즘

 - 다수의 자연수에 대한 소수 판별에 사용
 - 범위를 지정하기 위해 N을 설정. N보다 작거나 같은 모든 소수 찾을 때까지 반복.
1. 2부터 N까지 자연수 나열
2. 남은 수 중 아직 처리하지 않은 가장 작은 수 i를 찾는다.
3. 남은 수 중에서 i의 배수를 모두 제거(i는 자기 자신이 소수이므로 제거하지 않는다.)
4. 더이상 반복 할 수 없을 때까지 반복한다.

 - 이 때도 소수를 판별 할 때처럼 제곱근+1까지만 확인해주면 된다.

 - 에라토스테네스의 체 알고리즘의 시간 복잡도는 선형 시간에 가까울 정도로 엄청 빠르다. O(Nlog(log(N)))이다.

 - 하지만 메모리가 많이 필요하다. N이하 자연수를 모두 가져야 하므로.

## 투 포인터 알고리즘

 - 투 포인터 알고리즘은 리스트에 순차적으로 접근해야 할 때 두 개의 점의 위치를 기록하면서 처리하는 알고리즘.

 - 시작점부터 끝점을 명시해 순차적으로 존재하는 데이터에서 특정 범위를 지칭 할 수 있다는 것을 이용한 알고리즘.

 - 시작점과 끝점 2개의 점으로 접근 할 데이터의 범위를 표현 할 수 있기에 특정 문제를 매우 효과적으로 해결이 가능.

 - 예시로틑 특정한 합을 가지는 부분 연속 수열 찾기이다.

1. 시작점과 끝점이 첫번째 원소의 인덱스(0)을 가르키도록 한다. 이후 2,3,4번 반복
2. 현재 부분 합이 M과 같다면 카운트 한다.
3. 현재 부분 합이 M보다 작다면 end를 1 증가시킨다.
4. 현재 부분 합이 M보다 크거나 같다면 start를 1 증가시킨다.
5. 모든 경우를 확인 할 때까지 2부터 4까지 반복.	

모든 원소가 자연수이기 때문에, 끝점이 증가하는 것은 부분합이 증가, 시작점을 줄이면 부분합이 감소한다. 그렇게 지렁이 기어가듯이 부분합을 확인하며 경우를 모두 탐색 할 수 있다.

## 구간 합 알고리즘

 - 연속적으로 나열된 N개의 수가 있을 때 특정 구간의 모든 수를 합한 값을 계산하는 문제.

 - 구간 합을 한 번만 수행된다면 선형 탐색을 이용해 구할 수 있다.

 - 하지만 구간합이 여러번 들어오면 ?

 - N개의 정수로 구성된 수열
 - M개의 쿼리
  - 각 쿼리는 Left와 Right로 구성
  - 각 쿼리에 대하여 [L, R] 구간에 포함된 데이터들의 합을 출력
 - 수행시간 제한이 O(N+M)

 - 해결법은 접두사 합. Prefix Sum : 배열의 맨 앞부터 특정 위치까지의 합을 미리 구해 놓은 것.
 - 미리 구해놓은 값을 통해 각각의 쿼리를 빠르게 처리 할 수 있다.
 - 매 M개의 쿼리 정보를 확인 할 때 구간 합은 P[R] - P[L-1]이다.
 - 계산된 테이블을 캐시처럼 이용해서 빠르게 구할 수 있다.



# 개발형 코딩 테스트

 - 정해진 목적에 따라서 동작하는 완성된 프로그램을 개발하는 것을 요구하는 코딩 테스트 유형.

 - 알고리즘 코딩 테스트는 시공간 복잡도를 분석하여 하나의 모듈을 개발하는 것이라면, 개발형 코테는 완성도 높은 하나의 프로그램을 개발하는 걸 요구한다. 따라서 다양한 모듈을 적절히 조합하는 능력을 요구한다.

 - 일부 기업은 해커톤을 통해 채용을 진행한다.
 - 하루에서 이틀 정도 정해진 기간동안 프로그램을 만들어 시연하고 발표하는 해커톤을 이용하는 경우가 많다.
 - 실제 프로그램 개발까지도 요구하는 테스트 유형이다.

 - 개발형 코테는 분야에 따라 상세 요구사항이 다를 수 있다. ex) 안드로이드/iOS, 스프링/쟝고 등 프레임워크 등
 - 분야에 상관 없이 꼭 알아야 하는 개념과 도구를 학습해야 한다. 서버, 클라이언트, JSON, REST-API

## 서버와 클라이언트

클라이언트는 서버에게 요청하는 주체. 클라이언트가 요청request를 보내면 서버가 응답한다.

웹 클라이언트는 pc 노트북 스마트폰 등 서버에게 요청을 보내면 클라이언트 역할이다. 서버는 클라이언트의 요청을 수행하는 것이다.

### 클라이언트 = 고객

 - 서버로 요청을 보내고 응답이 도착 할 때까지 대기
 - 서버로부터 응답을 받은 뒤 서버의 응답을 화면 출력
 - 클라이언트는 서버로 부터 전달 받은 내용을 해석 및 출력한다

### 서버 = 서비스 제공자

 - 클라이언트로부터 받은 요청을 처리해 응답Response를 전송
 - 요청을 받아 Db에서 요청을 처리하여 응답을 돌려준다. 다수의 컴퓨팅 장치로 구성 될 수 있다. 다양한 외부 APi 역시 가지고 있을 수 있다.

### 프로토콜

 HTTP : HyperText Transfer Protocol : 웹상에서 데이터를 주고받기 위한 프로토콜. 보통은 웹문서 HTML을 주고 받는데 사용된다. 모바일 앱 및 게임 개발 등에서 특정 형식의 데이터를 주고 받는 용도로도 사용된다.

GET POST PUT DELETE 4가지의 대표적인 메소드가 있다.

1. GET은 특정 데이터의 조회 요청
2. POST는 특정 데이터의 생성 요청
3. PUT은 특정 데이터의 수정 요철
4. DELETE는 특정 데이터의 삭제 요청

 이는 프로토콜 상의 약속이며, 실제로 저 메소드로 구현 안할 수도 있다. 겟 포스트 풋 딜리트는 일종의 약속이라 권장사항이다.

 #### 개발형 코테의 핵심 키워드 : REST API, JSON

REST 등장 배경 : HTTP는 GET POST PUT DELETE 등 다양한 메서드 지원. 하지만 실제 메서드의 기본 설명을 따르지 않아도 개발 가능. 하지만 저마다 다른 방식으로 개발하면 문제가 있어 기준이 되는 아키텍쳐가 필요하다. **기준**이 필요하다.

REST란 Representational State Transfer은 각 자원에 대하여 자원의 상태에 대한 정보를 주고 받는 개발 방식.
 REST의 구성 요소는 자원Resource, 행위Verb, 표현Representations이다. 자원은 URI를 이용하여 서버의 어떤 자원에 접근 할 것인지 명시. 행위는 HTTP 메서드를 이용해 해당 자원에 어던 행위를 할 것인지 명시. 페이로드를 이용해 상세 데이터에 대한 기입을 하며 표현 할 수 있다.

URI는 서버에 대해 어떤 정보를 요청하는지 도메인으로 명시
HTTP 메소드로 어떤 방식으로 할 것인지
Payload를 특정 포맷에 맞는 형태로 가공하여 보내 서버 입장에서 이해하기 쉽게 요청한다.

API : 프로그램이 상호작용하기 위한 인터페이스
REST API : REST 아키텍처를 따르는 APPI
REST API 호출 : REST 방식을 따르고 있는 서버에 특정한 요청을 전송하는 것.

이 때, API 데이터를 주고 받을 때, 사용되는 형태가 JSON이다. 자바스크립트 오브젝트 노테이션. 실제 자스에서 쓰는 데이터의 형식을 그대로 따른다. 이러한 형식은 파이썬의 딕트와도 매우 유사한 형태이다. JSON 데이터는 키와 값의 쌍으로 이루어진 데이터 객체를 저장한다. 이 때 값으로 내부적으로 리스트를 가질 수 있으며 여러가지 가능하다.

 파이썬에서 쓸 때는 import json 해서 쓰면 된다. 사전 자료형의 데이터를 JSON 객체로 바꿔 사용 가능. 키/값은 굉장히 딕트와 비슷. 파이썬 변수를 JSON 객체로 전환 할 때 json.dumps()를 통해 JSON 객체로 바꿀 수 있다.

 JSON 객체 자체를 파일로 저장 할 수 있다. 파일 입출력 문법을 통해 쓰기권한, utf-8 인코딩이 된 파일을 만든 뒤, 해당 파일을 쓰기 위해 json.dump로 쓸 수 있다. 인자로는 (쓰고자 하는 내용, 어떤 파일에 쓸지 명시, indent띄어쓰기 4 설정)

```
with open("user.json", "w", encoding="utf-8") as file :
    json_data = json.dump(user, file, indent = 4)
```
해당 형태로 가능하다. 제이슨 파일로 저장 가능.

REST API 연습용 서비스 있다. Moking목킹을 이용한다. 어떤 기능이 잇는 것 처럼 흉내내어 구현 한 것.























