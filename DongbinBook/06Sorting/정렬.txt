
## 정렬

 - 정렬이란 데이터를 특정한 기준에 따라 순서대로 나열하는 것을 말한다.
 - 일반적으로 문제 상황에 따라서 적절한 정렬 알고리즘이 공식처럼 사용된다.

### 선택 정렬

 - 가장 원시적인 방법.
 - 처리되지 않은 데이터 중 가장 작은 것을 골라 가장 앞의 것과 바꿔가며 sorting 하는 것.
 - 탐색 범위가 하나씩 줄어들며 가장 작은 수를 찾아야 하기 때문에 이중 반복문을 통해 선택 정렬을 구현 할 수 있다.
```
array = [7, 5, 9, 0, 3, 1, 6, 2, 4, 8]

for i in range(len(array)) :
    min_index = i
    for j in range(i + 1, len(array)):
        if array[min_index] > array[j]: # 남은 배열에서 더 작은게 있다면 min index에 담는다.
            min_index = j
    array[i], array[min_index] = array[min_index], array[i] # 스왑 연산을 쉽게 할 수 있는 파이썬 짱짱맨

print(array)

```

 - 선택 정렬의 시간 복잡도 : 선택 정렬은 N번 만큼 가장 작은 수를 찾아서 맨 앞으로 보내야 한다.
 - 구현 방식에 따라 사소한 오차는 있을 수 있지만, 전체 연산 횟수는 N + (N-1) + (N-2) + ... +2 = (N^2 + N -2) / 2로 표현되어 빅오 표기법에 따라 O(N^2)이라고 작성.

### 삽입 정렬

 - 처리되지 않은 데이터를 하나씩 골라 적절한 위치에 삽입. 데이터를 하나씩 확인하면서 이 데이터는 어느 위치에 넣는 것이 맞는것인지 매번 계산해서 넣는 것.
 - 구현 난이도가 선택 정렬에 비해 어렵지만 더 효율적으로 동작.

 - 앞쪽의 원소가 이미 정렬되어 있다고 가정하고 뒤쪽의 원소들을 어떤 위치로 들어갈지 판단하는 것.
 - 매번 정렬된 왼쪽의 데이터를 훑으며 적절한 위치에서 멈추게 하는 것.

```
array = [7, 5, 9, 0, 3, 1, 6, 2, 4, 8]

for i in range(1, len(array)):
    for j in range(i, 0, -1): # i부터 1까지 1씩 감소하며 반복
        if array[j] < array[j - 1]: # 왼쪽에 있는 것에 비해 자신의 값이 작다면
            array[j], array[j - 1] = array[j - 1], array[i] # 스왑한다
        else : # 왼쪽에 있는것보다 크거나 같아면 뭐 하지 말고 멈춰!
            break

print(array)

```

 - 삽입 정렬의 시간 복잡도 : O(N^2)이며, 선택 정렬과 마찬가지로 반복문이 두 번 중첩되어 사용된다.
 - 삽입 정렬은 현재 리스틩 데이터가 거의 정렬되어 있는 상태라면 매우 빠르게 동작합니다.
  - 최선의 경우 O(N)의 시간 복잡도를 가집니다.
  - 이미 정렬되어 있는 상태에서 다시 삽입 정렬을 수행하면 어떻게 되냐면

### 퀵 정렬

 - 굉장히 빠른 정렬
 - 일반적으로 우리가 표준적으로 사용 할 수 있는 정렬 알고리즘.
 - 기준 데이터를 설정하고, 그 기준보다 큰 데이터와 작은 데이터의 위치를 바꾸는 방법.
 - 특히 병합 정렬과 더불어 대부분의 프로그래밍 언어의 정렬 라이브러리의 근간이 되는 알고리즘이다. C, 자바, 파이썬의 표준 정렬 라이브러리도 모두 퀵 정렬 혹은 병합정렬의 아이디어를 채택한 하이브리드를 쓰고 있을 정도.
 - 가장 기본적인 퀵 정렬은 첫번째 데이터를 기준데이터 Pivot 값을 설정하고 시작한다.

 - 왼쪽에서는 기준 값보다 큰 값을 정하고 오른쪽에서는 기준값보다 작은 값을 고른 뒤, 그 둘의 위치를 바꿔준다.
 - 데이터의 위치가 엇갈린 경우, 작은 데이터의 위치를 피벗값과 위치를 바꿔준다.
 - 그렇게 하면 왼쪽의 데이터는 모두 피벗값보다 작은 값이 되고, 우측은 피벗 값보다 큰 값만 가지게 된다. 이 작업을 분할이라고 한다. 
 - 정렬을 위한 데이터를 왼쪽(작은 값) 피벗 오른쪽(큰 값) 으로 분할하기에 파티션이라 부르며, 왼쪽 오른쪽 각각 퀵 정렬을 진행한다.
 - 이러한 과정을 재귀적으로 수행하면 전체 데이터가 정렬이 된다.
 - 이상적인 경우 분할이 절반씩 일어난다면 전체 연산 횟수로 O(NlogN)을 기대 할 수 있다.




















