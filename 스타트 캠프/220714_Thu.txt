유라 :  

 

자치회 ; 반 별로 반장1 CA1 반/C는 오전까지 알려라

역할 : 온라인 메놑링 간담회 참여 가능

창구 역할 / 학습분위기 형성 / 싸피데이 / 정기회의 진행 / 활동일지 / 출결 특이사항

 

장점 어필하는걸 보면 별로다 : 자치회를 하며 싸피의 소식통이 된다. 마일리지 보너스 받음 / 자치회지원금 받음 / 싸피데이 학습 이벤트 주도적 참여 / 리더쉽 특강 수업 들을 수 있다 / 이력서에 경험을 적을 수 있는 무기가 될 수 있을거다. (아마 갈등 해결 등의 부분에서 쓸 수 있을 듯 하다.)

 

자치회 센빠이의 말 : 리더쉽x 의사소통, 책임감, 솔선수범 중요하고 자리가 사람을 만든다. 인싸가 된다.

 

활동 : 사무국 소통 / 학습 이벤트 지원 / 싸피데이 / 활동일지 / 삼성임직원 멘토링 / 정기회의 / 면학 분위기 조선

 

결론 : 자치회 해달라~~~~

 

 

--보안 안전 커리큘럼--

 

그냥 안전하게 살아라

 

------------------------------

 

수업 내용 : 피어러닝? 잘 뭉쳐야 하므로 자기소개 해라

 

---------------------

 

스타트캠프 기간 동안 깃을 알아야 한다.

 

챗봇도 프로그래밍 경험을 위해 말하ㅣㄱㄴ 했지만 깃을 먼저 하고 파이썬을 하겟다.

 

입문을 좀 줄이고 깃을 먼저 배워보겠다.

 

3.9.13

3.9가 메인 13이 서브. 서브는 큰 이상은 없다.

 

깃과 깃헙의 차이점

 

배울것

깃 사용 이유

CLI 기초 마크다운

Git 기본기

 

깃이 뭐냐? : 분산 버전 관리 프로그램

깃 == 분산 버전 관리 프로그램==컴퓨터 소프트웨어의 특정 상태를 관리하는 것

 

최종코드 + 코드 변경 사항*n

 

코드의 히스토리 관리. 개발되어온 과정 파악 가능. 이전 버전과의 변경 사항 비교 및 분석 가능

 

분산 <-> 중앙집중

 

중앙집중 예시 : 분산

분산 예시 : 블록체인

 

복구가 가능한 장점이 있다. 서버 같은 경우 클라우드에 들어감. 히스토리를 인터넷으로 관리하게 하는 것.

 

깃헙 : 깃 기반의 저장소 서비스를 제공하는 서버. 깃을 이용한 서비스. 프로그램은 깃이다.

 

깃 기반 저장소 서비스 해주는 것 : 깃랩, 깃헙, 빗버킷

 

싸피는 깃랩 쓴다. 빗버킷은 기업에서 많이 쓴다.

 

깃허브를 가장 많이 들었는데 깃랩을 쓰는 이유?

 

깃헙(주인이 MS)과 깃랩(서버 구축 가능) 차이

 

깃랩 : 너네 저장되는 서버 구축 할 수 있도록 제공ㄱ 해준다. 저장하는 서버 자체를 구축 할 수 있다. 깃랩을 설치해서 내 컴이 깃이 된 것처럼 사용이 가능하다. 저장되는 서버를 내부적으로 구축이 가능하다.

 

삼성이 구축해둔 서버 어디로 저장 될 것이다. 싸피 깃.

 

버전 관리는 깃이 해줄거다.

 

 

깃헙의 장점 : (대부분 깃허브 쓰기 때문에...) 공개적이기에, 전 세계의 모든 사람들에게 나를 표현 할 수 있는 수단이 된다. 사용을 하면 좋다. 일종의 추가 포트폴리오가 된다. 깃헙에 시간 역시 나오므로 깃헙 관리 좀 해라.

 

깃랩도 깃헙도 쓸거다.

 

 

 깃헙 잔디밭 관리를 해야한다. 초록색으로 빼곡해야한다. 하루 한 칸. 아무런 commit을 하지 않았다 : 빵꾸남.

 잔디밭 관리 되면 성실함을 볼 수 있다. 1.커뮤니케이션 능력 2.성실함(증명을 할 수 없으므로 깃헙 등으로 봐야 할 수 밖에 없다.)

 나중에 너네 깃헙 잔디밭 띄울거다. 전반적으로 봤을 때 봐야 한다.

 1일 1commit 1d1c

 

 깃헙 아이디 중요하다. 깃헙은 특히 username 잘 정해라~

 

 깃헙 - 소셜 코딩. 함께 코딩한다.

 

 팀이 중요해졌다. 플랫폼이 커져서. 코드가 합쳐져서 돌아가야 한다. 대부분 깃을 사용해서 협업을 해본 사람 깃 깃헙 사용 해 본 사람이 필수 스킬 셋이다.

 

 깃헙 자체는 기술적인 면을 제외하면 인스타나 다를 바가 없다. 텍스트 sns나 다를 바가 없다. 내 코드를 이용한 sns라고 보면 된다.

 

 협업 툴 점유율 깃헙 82.8% 깃랩 37% 걍 개발자면 써라~

 

1. 2학기 갈 때 깃 다시 공부 해야한다. 싸피에서 다루는 깃은 굉장히 적다. 마지막 최종 프로젝트 2인 1조로 한다. 2명이 하기 때문에 깃을 화려하게 쓰지 않음. 2학기 가면 깃을 사용 하는 것이 기본 소양이 되기 때문에 다시 깃 공부해야 한다. 구글링으로 공부해라. 깃랩은 중요하다.

 

 슬랙은 업무용 메세지 툴이라 보면 된다. 공용으로 사용 가능한 메세지 툴

 Jira : 이슈 관리 툴. 개발은 20~30. 유지보수가 더 크다. 버그 업데이트 등. 그럴 때 이슈를 잘 관리하는 협업 툴이다. 47% 점유율.

 

결론 : 깃은 필수다.

 

------------CLI 기초 마크다운---------

 

command line interface. GUI의 반댓말. 그래픽 유저 인터페이스

명령어로 하는 것.

 

CLI는 컴퓨터의 리소스가 절약이 크게 된다. gui는 개인이 많이 쓴다. GUI로 못하는 걸 CLI가 할 수 있는 것이 있다. GUI로는 화면에 다 표현 못 할 수도 있다. CLI를 개발 할 때 많이 쓴다.

 그래픽을 통해 사용자와 컴퓨터가 상호 작용하는 방식 / 명령어를 통해 사용자와 컴퓨터가 상호 작용하는 방식 

 

cli 기본적인 명령어 : 

touch 파일을 생성하는 명령어 / 

Mkdir 새폴더를 생성하는 명령어 메이크디렉토리 / 

ls 현재 작업 중인 디렉토리의 폴더, 파일 목록을 보여주는 명령어 / 

cd 체인지 디렉토리 현재 작업중인 디렉토리를 변경하는 명령어 / 

start(윈도우),open(맥) 폴더, 파일을 GUI에 여는 명령어 / 

rm 리무브 파일을 삭제하는 명령어. -r옵션을 주면폴더 삭제 가능 재귀적이라는 의미의 r. rm -r 폴더명tab

 

~표 : 지금 내가 현재 작업 중인 위치.

.. == 상위 폴더

. == 나 자신

 

윈도우 shift s 후 캡쳐하면 클립보드 복붙해서 잘 써라.

 

물결로 지정이 되어 있다면 굉장히 많이 쓰는 위치이다. ~은 압축한거.

c:\user\multicampus == 홈디렉토리

 

어떤 유저의 홈 디렉토리를 물결로 나타낸 것이다.

 

tab 누르면 자동완성 해준다. 조금만 치고 탭 누르면 됨.

 

 

파워쉘과 cmd의 차이 : cmd는 원래 있던 것 . 파워셸은 리눅스 유닉스 호환 되는 것. 깃배쉬는 따로 받아서 쓰는 것이고 이거 쓸거다.

 

맥은 맥 os가 터미널과 유사. 유닉스에서 파생된 os.

맥 os에서는 위의 명령어를 그대로 쓸 수 있다. 윈도우는 명령어가 달랐다. 

 

절대 경로 : 루트 디렉토리부터 목적 지점까지 거치는 모든 경로를 전부 작성 한 것. 윈도우 바탕 화면의 절대 경로 = C:/Users/ssafy/Desktop

 

상대 경로 : 현재 작업하고 있는 디렉토리를 기준으로 계산된 상대적 위치를 작성한 것. 현재 작업하고 있는 디렉토리가 C:/Users일 때 윈도우 바탕 화면으로의 상대 경로는 ssafyDesktop (./ : 현재 폴더 ../ : 부모 폴더)

 

절대 경로는 드라이브 부터, 상대 경로는 자기 자신으로부터.

 

/는 하나 하위 의미.

 

절대경로 쓰면 유저명 폴더 때문에 에러가 난다.

 

 

 

-============

 

마크다운 : 텍스트 기반의 가벼운 마크업 언어 / 문서의 구조와 내용을 같이 쉽고 빠르게 적고자 탄생. (마크업 : 태그를 이용하여 문서의 구조를 나타내는 것.)

 

마크 다운과 마크업은 유사하다. 마크업 언어와 유사하다고 말하려고 마크다운이라고 말하는 것이다.

 

#ㅇㅇㅇㅇㅇㅇ

-ㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇ

-ㅇㅇ**ㅁㅁ**ㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇ

 

 이런 식으로 중요한 곳을 즉시 적는 것?

 

컨버팅을 누가 해주나? : 텍스트 에디터, 웹 환경 등. 노션 등등에서도 지원이 된다.

 

깃헙 문서 : 마크 다운 언어가 무조건 쓰인다.

 

README.md 파일을 통해 오픈 소스의 공식 문서 작성. (ㅇ건 무조건 마크다운으로 써야 한다! 라고 정해진 것)

개인 프로젝트의 소개 문서 작성.

매일 학습한 내용 정리

마크다운을 이용한 블로그 운영.

 

주피터, 노션, 타이포라 메모장 프로그램 등. 노션이 타이포라 압승 표 삽입 시 ui 제공 vs코드도 지원하지만 전용 프로그램을 사용하면 더 편하게 사용 가능.

 

 

# 헤딩 Heading

 

# 갯수에 따라 제목의 수준을 구별. h1~h6. 프로그램에 따라 지원 수준이 달라짐.

내용을 이쁘게 쓰려는게 아니기 때문에 글씨를 크게 하기 위해 사용하면 안된다!

 

 

1.2.3. 리스트 list

 

순서가 있는 리스트 / 순서가 없는 리스트.

목록을 표시하기 위해 사용.

 

코드블럭 code block.

```code block```       `inline code block`

 

백틱 1개는 문장 안에 코드가 들어 갈 때.

백틱 3개는 코드가 따로 있을 때. ``` 이후 엔터 치면 블록이 생성된다. 언어를 알려주면 된다. ```python ... 적고 ``` 마무리

 

링크 link

[string](url) : str은 보여지는 부분 url은 연결 할 부분. 다른 페이지로 이동하는 링크를 삽입. 필요하다면 파일의 경로를 넣어 다운로드 가능한 링크로 만들 수 있다.

 

이미지 image

![string](img_url)

이미지의 경로를 넣는다. 이미지 url에는. 파일이 들어가는데 이미지 저장경로를 assets로 하여 자동 저장하게 하면 md파일과 assets 폴더만 가져가면 언제나 완성상태이다.

 

**볼드**   *이탈릭*    ~~취소선~~

__볼드__    _이탈릭_    ~~취소선~~

취소선은 프로그램에 따라 지원하지 않을 수도 있다.

 

--- or *** or ___   : 수평선

 

참고자료 : https://www.markdownguide.org/cheat-sheet/

 

 

=================

 

깃 기본기

 

README.md :

- 프로젝트에 대한 설명 문서

- 이거 먼저 띄워주니까 이쁘게 써라.

 

Repositoty 레포지토리 : 특정 디렉토리를 버전 관리하는 저장소. 깃이 관리를 시작하는 단위가 폴더 단위.

- git init 명령어로 로컬 저장소를 생성. 로컬 저장소를 만들면 내 컴퓨터가 깃으로부터 버전 관리를 받을 준비가 된 상태가 됨.

- .git 디렉토리에 버전 관리에 필요한 모든 것이 들어있음. .git은 숨김 파일이니까 건들지 마라.

 

깃으로 관리가 되냐 안되냐는 깃배쉬의 (master) branch가 떠있는 것으로 판단이 가능하다.

 

touch readme.md md파일 생성. 버전 관리하며 깃을 사용해본다. '특정 버전으로 남긴다'를 깃 기준으로 Commit한다고 함. commit은 3가지 영역을 바탕으로 동작한다.

 

commit을 조작하는 3가지 영역은 working directory(내가 작업하고 있는 실제 디렉토리) / staging area(commit으로 남기고 싶은, 특정 버전으로 관리하고 싶은 파일이 있는 곳. commit이 repository로 넘어가기 전에 임시저장 되는 곳) / repository(저장소. commit들이 저장되는 곳 .git 디렉토리) 이다.