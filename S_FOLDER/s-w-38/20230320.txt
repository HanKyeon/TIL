
# 20230320

- 어제 및 주말 간 배운 것
1. 기업을 조사하는 기준은 어렵다.
2. 리액트 쿼리의 동작 원리는 알겠고 보일러 플레이트가 얇은 것도 알겠으나 그냥 직접 짜는 것과의 차이를 잘 모르겠다.

---

HTTP 상태 코드

100번대 정보 요청을 받았으며 프로세스 진행한다.
200번대 성공
300번대 리다이렉션 : 요청 완료를 위해 추가 작업 조치가 필요.
400번대 클라 오류
500번대 서버

HTTP 상태 코드 물어보면 번호대 별로 먼저 언급하면 있어보인다.
1시 팀장 미팅 예정.

---

# React-Query

- React Query 사용 배경

1. React Query는 redux의 불편한 asynchronous 처리를 개선하기 위해 등장했음.
2. 비동기 데이터를 React cOmponent의 State에 보관하게 될 경우 다수의 Component LifeCycle에 따라 비동기 데이터가 관리되기에 캐싱 등 최적화 수행이 어렵다. 또한, 다수의 컴포넌트에서 동일 API를 호출하거나 특정 API 응답이 다른 API에 영향을 미치는 경우 등 복잡하지만 빈번하게 요구되는 사용자 시나리오에 대응하기 어려움. 이를 위해 Redux가 등장했지만....
3. 보일러 플레이트가 굉장히 두텁다. Redux 기본 원칙(https://redux.js.org/understanding/thinking-in-redux/three-principles)이 존재하기 때문에.
4. 거기에 더해, Redux는 API 통신 및 비동기 상태 관리를 위한 라이브러리가 아님. 그래서 비동기 데이터를 관리하려면 관련된 코드를 전부 관리해야 한다.
5. 특히 사용자 경험 부분에서, 앱이 Foreground로 올라온 시점에 데이터의 동기화가 다시 수행되어야 개선 될 가능성이 높다. Redux의 경우 useEffect를 통해 관리를 해주어야 해서 코드가 길었음.

- React Query 소개

1. 리액트 앱에서 서버 상태를 불러오고, 캐싱하며, 지속적으로 동기화하고 업데이트 하는 작업을 도와주는 라이브러리.
2. Hook을 사용하여 React Component 내부에서 자연스레 서버의 데이터를 사용 할 수 있는 방법을 제안한다.

3. ReactQuery의 useQuery Hook은 요청마다 구분되ㅑ는 유니크 키를 필요로 한다. 리액트 쿼리는 유니크 쿼리로 서버 상태를 로컬에 캐싱하고 관리한다.
```
// 일반적인 사용법
const { isLoading, error, data } = useQuery('유니크 키), function() {axios({}).then((res) => res.data)}

// userInfo, userId를 키로 사용하여 데이터 캐싱.
// 캐싱 할 때 res.data를 하지 않는 이유는 뭐지? error.message 때문인가?
const { isLoading, error, data } = useQuery(['userInfo', userId], () => axios({}))

// mutation 요청.
const { mutate } = useMutation(mutationFn, options)
// mutationFn은 HTTP 메서드 POST, PUT, DELETE 요청과 같이 서버에 sideEffect를 발생시켜 서버의 상태를 변경 시킬 때 사용한다.
// useMutation Hook의 첫번째 파라미터는 이 Mutation을 수행하기 위한 Promise를 Return하는 함수이며, useMutation의 return 값 중 mutate or mutateAsync 함수를 호출하여 서버에 SideEffect를 발생 시킬 수 있습니다.
const { mutate, isLoading } = useMutation((value) => axios(value), options)
onChange에 cutate(checked) 를 넣어주는 식으로 실행.
```

useMutaion의 options로 onSuccess와 onError에 함수를 넣어서 데이터 처리가 가능하다.
select 속성을 통해 get 요청의 값을 나눠줄 수 있는 것 같은데 내일 확인하자.












