
# 스택

후입선출 LiFO 마지막에 들어간게 먼저 나온다.

연산
 - 삽입 : 저장소에 자료를 저장한다. 보통 push라고 부른다.
 - 삭제 : 저장소에서 자료를 꺼낸다. 꺼낸 자료는 삽입한 자료의 역순으로 꺼낸다. 보통 pop이라고 부른다.
 - 스택이 공백인지 아닌지 확인하는 연산 isEmpty
 - 스택의 top에 있는 item원소를 반환하는 연산. peek. 확인하는 것.

스택의 푸쉬 : top을 하나 증가 시키고 넣어준다.

배열의 append() 메소드가 비슷한다. append() 메소드의 단점은 느리다.
보통은 스택을 만들 때 size를 정해서 한다. 스택오버플로우

리스트의 append pop은 느리다.
시간이 오래 걸릴 때 크기가 정해진 스택과 스택 포인터를 만들어서 사용하자.
문제의 배열 크기는 100만개 안쪽이다. C언어 때문에.
append는 시간초과 위험이 있지만 생성해두고 부르면 시간이 빠르다.

슈도코드에 return stack[top--] 라는 것은 top이 가르키는 것을 리턴 하고 그 후에 빼줘 라는 뜻

1차원 배열을 사용하여 구현 할 경우 구현이 용이하다는 장점이 있지만, 스택의 크기를 변경하기가 어렵다는 단점이 있다.

이를 해결하기 위한 방법으로 저장소를 동적으로 할당하여 스택을 구현하는 방법이 있다. 동적 연결 리스트를 이용하여 구현하는 방법을 의미한다. 구현이 복잡하다는 단점이 있지만 메모리를 효율적으로 사용한다는 장점을 가진다. 스택의 동적 구현은 생략한다.

저장소를 동적으로 할당하여 늘릴 수는 있지만, 참는다.

주로 괄호 확인하는 부분에서 스택을 많이 쓴다.
여는 괄호를 만나면 스택에 push하고, 닫는 괄호가 나오면 pop을 해서 비교를 한다.
끝났는데 stack에 괄호가 남아있다면 오류이고, 중간에 pop을 못하면 오류이다.

괄호 검사에 유용하다.

괄호 조사 알고리즘 개요

여는 괄호를 만나면 스택에 삽입, 닫는 괄호를 만나면 스택에서 pop한다.

 - Function call

 함수 호출과 복귀에 따른 수행 순서 관리하는 것이 스택이다.
 가장 마지막에 호출된 함수가 가장 먼저 실행을 완료하고 복귀하는 후입 선출 구조이다.
 함수 호출이 발생하면 호추란 함수 수행에 필요한 지역변수, 매개변수 및 수행 후 복귀할 주소 등의 정보를 스택 프레임에 저장하여 시스템 스택에 삽입.
 함수의 실행이 끝나면 시스템 스택의 top원소(스택프레임)을 삭제pop하면서 프레임에 저장되어 있던 복귀주소를 확인하고 복귀
 함수 호출과 복귀에 따라 이 과정을 반복하여 전체 프로그램 수행이 종료되면 시스템 스택은 공백 스택이 된다.

재귀함수의 경우, Call Tree를 확인해보면 중복 호출이 굉장히 많다.

 이 때, 메모이제이션을 통해 연산을 줄여줄 수 있다.
컴퓨터 프로그램을 실행 할 때 이전에 계산한 값을 메모리에 저장해서 매번 다시 계산하지 않도록 하여 전체적인 실행 속도를 빠르게 하느 ㄴ기술이다. DP의 핵심이 되는 기술이다. DP의 중간단계 정도 된다. 메모이제이션이 되면 dp로 하기 쉽다 정도.

---
웹엑스
 재귀랑 백트래킹은 완전 별개다.
 DFS 문제가 하나 있다. 스택을 통해 구현해보라 하는 문제가 있을 것이다.

스택으로 담고 담으면 여러 괄호가 얽혔을 때 문제를 잡을 수 있다.
ex (<)> 이런 경우 역시 문제라고 한다면 잡아낼 수 있다.

---

함수 사용 줄여라 ?
재귀는 장점이 있다.
함수 호출 없이 채우는 것이 더 좋다.
반복구조로 dp로 하는게 성능적으로 효율적이다. 같은 테이블 기준으로.

DFS/BFS 깊이 우선 탐색, 너비 우선 탐색

스택형을 이용했다고 DFS가 아니다. DFS는 그냥 한쪽따라 끝까지 갔다가 왔다갔따 하는거다.






















