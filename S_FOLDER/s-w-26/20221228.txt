
# 20221228

## 마일리지 제도, 우수 교육생 프로그램
- 해외연수 안되고 삼전이랑 연계한다.
- 우수 프로젝트는 SOSCON에 쓰인다. 클라우드 네이티브, 머신러닝을 통한 리뷰 분석 시스템.
- 5기도 오픈소스 프로젝트. SSDC에서 발표. SASM을 활용한 모션 포즈노드 및 Flow 개발. vscode extension도 개발.
- 6기는 알림 모아서 분류하고 정리하는 개발. 시각 장애인을 위한 사물 인식 음성 서비스.
- 7기는 SASM을 활용한 Dashboard node 개발. ONE 사용성 증대를 위한 도커화.
- 8기는 특화 플젝 대체하여 수행하며, 특화 대체된다. 교육생 중 우수 교육생. 성적, 태도 등 전반적으로 고려하여 결정.
- 삼전 제품에 연계된 프로젝트 진행. 삼전 현직 개발자가 멘토로 참여하여 플젝 지도. 참여 교육생 전원 및 플젝 우수팀 시상 실시. 선발 기준은 성적, 모의SW역량테스트, 태도, 어학, 외부 경진대회 수상이력 등 종합 심사.

## 트랙 별 소개

### 웹 기술
webRTC 화상회의 서비스
화상회의 서비스 프로젝트란?
- 비대면 서비스의 필요성이 대두됨으로 인해 각종 행사와 그룹 커뮤니케이션이 온라인 화상으로 이뤄지는 경우가 많아지고 있다. 그룹으로 화상을 공유하는 기술은 다양한 쓰임새를 갖는다.
- 정의 : WebRTC 화상회의는 그룹 커뮤니케이션을 위한 그룹 화상과 그룹 채팅 등의 기능이 있는 서비스를 말한다.
- 프로젝트 목표
1. 스켈레톤 코드 바탕으로 SPA의 기본 틀을 구현
2. Vue3 프레임 워크의 이해도 향상
3. 로그인, 회원가입 등 기본 기능 구현.
4. 컨퍼런스 생성, 목록, 조회, 수정, 삭제 등의 CRUD 구현.
5. WebRTC / WebSocket 기술을 활용한 그룹 화상 회의와 채팅 기능 구현.
SEO를 위해 SSR이 좋은듯. Next.js 를 익히긴 해야겠다~

- 서비스 기본 구조의 이해
1. 회원가입, 로그인 등 기초 기능을 개발하며 이해도를 향상시킬 수 있다.
2. 비디오 컨퍼런스 서비스의 기본 기능인 방 생성, 조회, 상세 보기, 회의 이력 조회 기능을 개발해보며 웹 서비스의 기본 구조를 학습 할 수 있습니다.

- WebRTC 기반의 그룹 화상 회의 구현
1. 별도로 제공되는 미디어 서버를 연동하여 WebRTC 기반으로 그룹 화상 회의 기능과 그룹 채팅 기능을 개발해보고 이를 확장하여 화상 기반의 비대면 서비스를 구현 할 수 있습니다.
2. WebRTC 및 WebSocket을 통해 영상과 메시지 커뮤니케이션 기능을 구조적으로 설계하여 환성 후 활용도가 높습니다.

어떤 리소스를 쓰느냐에 따라서 포폴의 성격이 바뀐다. 오픈 빌드 같은 것으로 웹RTC 최소화 하려 하는데 그러면 webRTC는 아니다. 리소스를 어디에 둘 것이냐에 따라 고민을 해보고 고민을 해야 한다.

- 프로젝트 상세 내용
- 자율기획 할거면 마일스톤 설계해야 한다. 언제, 누가, 어떤 우선 순위로 개발 할 지. 지라에 올려놓고 의식의 흐름대로 개발하면 안된다.
- 배포는 end point가 아니다. 버전 컨트롤이란 것이 잇다. 배포 폴리시를 정하는게 좋다.
- 우리 팀은 매주 목요일 오후 3시에 배포한다. 라는 것처럼 배포 스케쥴링을 해야한다.
- 배포 안하고 하면 feature가 작동을 안한다. local에서 다 하진 않을 것 아니냐!
- 배포 스케쥴을 설계하고 하려면 CI/CD를 미리 해둬야 한다. 보통 1주차에 하라 한다. 초반에 설계 해둬야 좋다.
- 팀전이다. 기억해라. 자유도가 높다. 명세서 따라갈거면 명세서대로 하면 된다.
- 깃랩, AWS에 올려야 한다. AWS EC2 한 달 제공해주는데, 추가 구매 해야한다. 보통 S3나 추가 EC2 AWS Service 등을 한다. 기본적으로 한 대만 나간다.
- FE : Vue3, Stylus, Element UI Plus
- BE : 자바 스프링, 파이썬 장고, MySQL, Docker, Swagger 스웨거 정도는 권장. 도커는 제대로 쓸거면 써야한다. 배포 때문이라면 자율. 왜 쓰는건지 생각해야 한다. 배포 때문에 쓰는 건 아니다.
- 명세서에서도 커넥션이란 것에 대한 핸들링이 없다. 영상 채팅과 채팅.
- Docker라는 것이 다양한 팀의 협업을 도와주려고 만들어진 거다. 고려를 해보면 좋다.
- WebRTC와 WebSocket. 프로토콜, 커넥션, 세션에 대해 이용 할 수 있는 트랙이다.
- WebRTC를 무조건 사용해야 하는 것이 아니라, 화상 채팅 기능이 들어가야 한다. Open Flatform을 쓰면 포폴쪽이 그럴 수 있는거지, 화상 채팅 기능이 들어가야 한다.

### 웹 디자인
웹 큐레이팅 SNS
- 배경
- 많은 웹 페이지가 존재하여 원하는 정보를 검색하려면 많은 시간을 할애해야 한다.
- 결국 SNS이다. 큐레이팅이란 것이 결국 어떤 데이터를 가져오고 어떻게 보여줄 것인가 라는 것이 핵심이 된다.
- 나의 관심사 키워드를 바탕으로 웹 페이지를 빠르게 검색하여 유저들과 공유 할 수 있는 SNS 기반의 뉴스 큐레이팅 서비스이다.

#### 프로젝트 목표
- UI UX 디자인의 이해.
- 피그마 프로그램을 활용한 UI 디자인
- 기본 HTML/ CSS/ JavaScript에 대한 이해. SASS 라는 내용이 있다. SCSS
- 웹 프로젝트의 구성과 필요 기능 명세서 작성에 대한 이해.
- 외부 프레임워크와 Open API의 활용. 웹 시스템. Open API와의 I/F를 가져가는게 백의 핵심이다.
- SPA에 대한 이해. vue, react, angular 등.
- 서비스 개발에 대한 이해.

#### 프로젝트 특징
- UX / UI가 강조될 수 밖에 없다.
- Design이라는 뜻이 넓어졌다.
- UX, UI 디장니 이해.
- UI 디자인을 위한 피그마 기본 기능 및 프로젝트 적용안 학습
- 와이어 프레임 스케치부터 시작하여 디지털 와이어프레임 작성 사례.
- 모바일 앱, 웹, IoT, 웨어러블, 멀티 디바이스, UX, UI 디자인 개념 학습.
- 다양한 피그마 디자인 파일 공유로 디자인 패턴 및 레퍼런스 이해.

#### 서비스 특징
- 키워드와 검색 대상을 지정하여 빠르게 검색하고 개인적으로 저장 할 수 있음. RSS(피드 형태의 데이터) or GCE(구글 서치 엔진)
- 저장된 내용을 SNS 피드를 통해 공유하고, 특정 유저를 팔로우하여 구독 서비스 제공.
- 봉닝닝 공유한 피드에 대한 통계 제공.
- SNS 피드. 그리고 통계를 제공해야 한다. 활용이 가능하게끔.

- 물리적인 서버가 하나만 제공이 되서 Docker를 선택해서 서버를 여러 가상 서버를 올려서 플젝을 한다
- 프론트 기술 쪽에서는 ES6와 SASS를 공부 할 것이다.
- 오픈을 하는게 중요하다. 배포가 중요하다. 과욕을 부리지 말자.
- 어떤 SNS를 만드는지에 따라서 달라질 것이다.
- 기획, 개발, 테스트 이후 오픈. 스케쥴링이 되어야 한다.
- 첫 주는 기획. 컨설턴트와 많은 팀 미팅 할 것이다.
- 부트캠프 기간부터 시작하는 것이 좋을 것이다.
- 웹 디자인에서는 SNS 성격의 기능이 들어가야 한다.
- 퍼블리셔들이 SASS를 학습한다. 프로그램처럼 function화 된 거라 경험해보면 좋을 것이다.
- Jest. J unit도 있다.
- 반응형 같은 경우 필수이다.


### 웹 IoT
실시간 설문조사 플랫폼
- 프론트 부분이 웹으로 되어 있다. UI 구현을 웹 기반으로 한다.
- 패스하도록 하겠다.

### 웹 모바일
온/오프라인 학습 플랫폼
- 네이티브 모바일 앱 개발에 대한 기본적인 이해와 안드로이드 앱 개발 능력 습득.
- 모바일 앱의 라이프 사이클에 대한 이해 및 웹 서버 개발 능력 습득.
- 웹 서버와 연동한 동적 모바일 앱 개발 경험 습득.
- 자바나 코틀린 기반 이용 가능. 웬만해서 코틀린 써라.
- 리액트 네이티브나 플러터도 안스 쓴다. mvvm

- 기능들을 커뮤니케이션 하면서 절충해나가는 것이다. 사용자 관점에서 생각하기.
- 우리만의 킬링 컨텐츠를 하나 넣어야 한다.

- 앱 배포 관련 문제가 많을 수 있다.
- 흔들기 기능. 핸드폰을 흔들면 주변 스터디 모임을 보여줍니다 등.
- API 써서 할 것들 많다.

----------

- 모든 종류의 task가 비동기로 되는 것이 아니다. 특정 종류의 task만 가능하다.
file r/w
timer
network i/o
- 이런 종류의 task들만 비동기로 가능하다. 공통점은 CPU가 많은 일을 하지 않는, cpu idle 상태가 길다.
- 실행 중에 cpu가 놀고 있는 상태라서!

- 특정 시간 이후 글자를 리턴하는 비동기 함수.
- 딜레이 주어서 하는것이 체이닝 처리. async await 혹은 promise로 체이닝 하는 등 가능하다.
- 일관성이 중요하다.
- 어레이를 통해서 array.reduce 함수로 promise가 가능하다.

- 비동기 all 처리. 비 순차 결과.
- 체이닝 처리보다 all처리가 빠르다. async await 차이이다.








































