
# 20230207

어제 배운 것

1. useAnimation 사용법. onTransitionEnd 및 onAnimationEnd 속성이 있다는 것. 그것을 이용해 애니메이션 종료 state와 표시하기 싫다의 state를 교차 검증해서 확인이 가능하다는 것.
2. 첫 애니메이션은 그냥 transition 해주면 된다.
3. 따라서 앞으로 등장/종료 애니메이션을 넣고 싶은 곳에는 바로 상단? 혹은 표시를 선택적으로 해주는 {state && JSX Element} 이런 문법일 경우, 저런 식의 표현식보다는 state를 직접 넣어주고, 내부 컴포넌트에서 useAnimation을 해주는 것이 좋아보인다.

4. 깃은 다 좋은데 폴더의 대소문자 변경 여부를 확인하기 싫어한다. 아예 다른 이름으로 바꿨다가 되돌리는 것이 나을 것. 되다 안되다 하더라.
5. 컨플릭트 났을 때 변경사항 잘 비교해서 머지하자. 풀 머지 푸쉬!

env 관련 글 https://junhyunny.github.io/react/react-env-variable-setting/
RTK 관련 글 https://goforit.tistory.com/159

-----

### SW 테스트 케이스 설계

테스트 케이스 & 체크 리스트 존재.
컨디션의 차이이다.
테케는 테스트 컨디션을 체크하기 위함이다.
컨디션 = if 분기점이 제대로 분기가 되는지 체크하는 것이 테스트 케이스이다.

테케 만들기 위한 근거
명세 기반 베이시스 : 문장으로 이뤄진 내용. 기능 설명서, 사용자 스토리
구조 기반 베이시스 : 구조적 데이터로 이뤄진 내용. 단위 코드, 제어 흐름도.

테케 품질의 경우, 컨디션을 빼먹지 않았나에 달려있다.

인수 테스트 / 시스템 테스트 / 통합 테스트 / 테스트 케이스 등이 존재.
인수 테스트는 고객 등, 시스템 테스트는 혼합 + 성능, 통합은 통합이고 단위는 feature 단위로 하는 듯.

명세 기반 : 결정 테이블.
컨디션을 가지고 상황 별 테이블 만들기.
결정 테이블 : 조건과 결과로 이루어진 논리 분석을 위한 표.

테케 구조 기반 : form을 통해 모든 case를 테스트 해줘야 한다. 모든 걸 테스트 하려면 2**n개가 필요하다. 너무 많다.























