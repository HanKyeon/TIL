
# Javascript

- 브라우저에서의 짜스.
- 짜스는 웹 페이지에서 다양한 기능을 구현하는 스크립트 언어이다.
- 정적인 정보만 보여주던 웹페이지를 데이터가 주기적으로 갱신되거나, 사용자와 상호작용을 하거나, 애니메이션 등이 동작하게 하는 것을 가능하게 한다.
- 3시간 한다고 애니메이션 가능한거 아니지만 어떤 식으로 동적 페이지를 만드는지 알 수 있을 것이다.

## DOM

1. Browser APIs
- 클라이언트 부분에서 짜스가 추가적으로 할 수 있는 일들이 많다. API 기능들.
- 대표적으로 제공하는 API가 3가지 정도가 있다.
- 웹 브라우저에 내장된 API로 웹 브라우저가 현재 컴퓨터 환경에 관한 데이터를 제공하거나, 오디오를 재생하는 등 여러가지 유용하고 복잡한 일을 수행 할 수 있게 한다.
1. DOM
2. Geolocation API -> 지리 정보 API. 구글 지도 등의 지도 API
3. WebGL 등등 -> 그래픽 부분.

- DOM은 Document Object Model. 문서 객체 모델.
- 문서의 구조화된 표현을 제공하며, 프로그래밍 언어가 DOM 구조에 접근 할 수 있는 방법을 제공한다.
 - 문서 구조, 스타일, 내용 등을 쉽게 변경 할 수 있게 도와준다.
 - HTML 콘텐츠를 추가, 제거, 변경하고, 동적으로 페이지에 스타일을 추가하는 등 HTML/CSS를 조작 할 수 있음.
- HTML 문서를 구조화하여 각 요소를 객체로 취급한다. 프로그래밍 언어로 접근 할 수 있도록 조작해준다.
- 단순한 속성 접근, 메서드 활용 뿐만 아니라 프로그래밍 언어적 특성을 활용한 조작이 가능하다.

DOM API라고 하는 것을 통해서 문서를 동적으로 수정하고, 사용자 인터페이스를 실시간으로 조정을 한다. 브라우저에서 문서를 접근해서 조작하는 방법.

- DOM은 문서를 논리 트리로 표현.
- DOM 메서드를 사용하면 프로그래밍적으로 트리에 접근 할 수 있고, 이를 통해 문서의 구조, 스타일, 컨텐츠를 변경 할 수 있음.

- 웹 페이지는 일종의 문서이다.
- 이 문서는 웹 브라우저를 통해 그 내용이 해석되어 웹 브라우저 화면에 나타나거나 HTML 코드 자체로 나타나기도 한다.
- DOM은 동일한 문서를 표현하고, 저장하고, 조작하는 방법을 제공한다.
- DOM은 웹 페이지의 객체 지향 표현이며, 짜스 같은 스크립트 언어를 이용해 DOM을 수정 할 수 있다.

### DOM에 접근하기

- DOM을 사용하기 위해 특별히 해야 할 일은 없음.
- 모든 웹 브라우저는 스크립트 언어가 손쉽게 웹 페이지의 요소에 접근 할 수 있도록 만들기 위해 DOM 구조를 항상 사용.
- 우리는 DOM 주요 객체들을 활용하여 문서를 조작하거나 특정 요소들을 얻을 수 있음.

### DOM의 주요 객체

1. window

2. document

3. navigator, location, history, screen 등은 셀프로 알아보자.

#### window

- DOM을 표현하는 창.
- DOM의 최상위 객체.
- 탭 기능이 있는 브라우저에서는 각각의 탭을 각각의 window 객체로 나타낸다.

- 크롬 브라우저 콘솔 창에 window를 쳐보면 최상위 객체이기에, 굉장히 많은 함수와 객체들이 두둥등장한다.
- 창 전체를 window라고 표현한다. window에서 할 수 잇는 일들은 다양하다. 탭 만들기, print 화면이 뜬다든지 등등. 이런 할 수 있는 것들이 존재한다면 그에 대한 메서드들이 존재하기 마련이다.
- 클릭을 통해 소통. 하지만 DOM으로 소통하기 위해서 새 탭을 만들 때는 `window.open()` 명령어를 통해 할 수 있다. 코드를 통해 하는 것이 아닌 GUI를 이용해 만들어져있을 뿐이다. `window.print()`, `window.alert()` 등등. 이런 식으로 객체로 조작 할 수 있도록 DOM API를 제공하는 것이 window이다.
- 최상위 클래스이기 때문에 다른 객체를 사용 할 때 생략이 가능하다.
- 브라우저 조작이 주가 되기에, 문서 조작에 더 특화된 API를 쓴다.

#### document object

- 브라우저가 불러온 웹 페이지
- 페이지 컨텐츠의 진입점 역할을 하며, 바디 등과 같은 수많은 다른 요소들을 포함하고 있음.
- document를 열어보면 HTML 문서가 열리게 된다. 통채로 document라고 하는 객체이다. 문서 전체를 의미한다.
- window의 하위 속성이다. window.document 라고 호출하며, window는 주로 생략 가능하다. -> open() 하면 새 탭이 열리는 등이 존재.
- document.title은 탭의 이름을 바꿀 수 있다. 문서 객체에 있는 title 태그 속성에 접근해서 바꾼 것이다.

**참고 : 파싱 Parsing**
- 해석하는 것.
- 브라우저가 문자열을 해석하여 DOM Tree로 만드는 과정.


### 개요
- Document가 제공하는 기능을 사용해 웹 페이지 문서 조작하기

- DOM 조작 순서. 반드시 이 순서 지켜라.
1. 선택 Select
2. 조작 Manupulation. 생성, 추가, 삭제 등등.

### 선택 관련 메서드
1. `document.querySelector(selector)` : 객체 하나를 선택 첫번째.
- selector는 선택자.
- 제공한 CSS selector를 만족하는 **첫번째** element 객체를 반환. 없다면 null을 반환한다.

2. `document.querySelectorAll(selector)` : 제공한 선택자와 일치하는 모든 element를 선택.
- 제공한 선택자와 일치하는 여러 element를 선택
- 매칭 할 하나 이상의 셀렉터를 포함하는 유요한 CSS selector를 인자(문자열로 받음)
- 제공한 CSS selector를 만족하는 NodeList를 반환한다.
- NodeList는 배열은 아니지만 배열과 같이 사용 할 수 있는 객체이다.

- selector: id selector는 `#`, class는 `.`, 태그는 그냥 등등.

**참고 NodeList**
- index로만 각 항목에 접근 가능.
- 배열의 forEach 메서드 및 다양한 배열 메서드 사용 가능.
- querySelectorAll()에 의해 반환되는 NodeList는 DOM의 변경사항을 실시간으로 반영하지 않음. -> NodeList는 문서의 각각 특정 결과물이다. 반복되는 와중에 내용이 바뀌었을 경우, 실시간으로 해당 반복에 반영이 되지 않는다는 것이다.
- NodeList를 이미 순회하거나, 길이 값을 이미 쓰고 있거나 그럴 때 이미 순회 및 길이 과정을 진행 중인데 실시간으로 바뀌는 것이 적용되면 역효과가 날 수 있다. 처음에 가져온 NodeList를 기반으로 데이터를 만들다 실시간 반영되면 기반이 깨져버린다.
- 실시간으로 반영되는 Type 역시 존재한다. NodeList MDN 파일 검색하면 나오니 찾아봐라.

- 이 때, querySelectorAll() 로 반환된 NodeList만이 정적 collection이다.
- live collection은 실시간 적용이 되고, 정적 collection은 실시간 적용이 되지 않는다.
- 노드 리스트의 항목을 순회하거나 리스트의 길이를 캐시해야 할 때 노드 리스트 써야 한다.
- 실시간을 원하면 실시간 적용이 가능한 childNode 같은 실시간 사용을 한다. 용도에 맞게 써라.
- 정적인 collection을 더 많이 쓸 수 밖에 없다. 이미 작업하고 있는 것들이 있기 때문에.

선택은 단 두개만 기억해라. querySelector, querySelectorAll 두가지만!

### 조작 관련 메서드(생성)
1. 태그 생성
- `document.createElement(tagName)` : 작성한 tagName의 HTML 요소를 생성하여 반환.

### 조작 관련 메서드(입력)
1. `Node.innerText` : 태그와 태그 사이
- Node 객체와 그 자손의 텍스트 컨텐츠를 표현. 헤딩 요소 내부의 raw text들.
- 사람이 읽을 수 있는 요소만 남김.
- 줄바꿈을 인식하고 숨겨진 내용을 무시하는 등 최종적인 스타일링이 적용된 모습을 반환.

### 조작 관련 메서드(추가)
1. `Node.appendChild()`
- 한 노드를 특정 부모 노드의 자식 NodeList 중 마지막 자식으로 삽입.
- DOM 트리 구조이기에 부모 자식 관계를 만들어주어야 한다.
- 한 번에 오직 하나의 Node만 추가 할 수 있음.
- 추가된 node 객체를 반환.
- 만약 주어진 Node가 이미 문서에 존재하는 다른 Node를 참조한다면 현재 위치에서 새로운 위치로 이동한다.
- 마지막에 추가가 되기에 appendChild라고 이해하면 될 듯.

### 조작 관련 메서드(삭제)
1. `Node.removeChild()`
- 특별 한 것 없이 삭제하는 것이다.


- 속성도 추가 삭제 가능.
`Element.getAttribute(attributeName)` : 해당 요소의 지정된 값을 반환. 인자는 값을 얻고자 하는 속성의 이름.

`Element.setAttribute(name, value)` : 지정된 요소의 값을 설정. 속성이 이미 존재하면 값을 갱신, 존재하지 않으면 지정된 이름과 값으로 새속성을 추가. name='value' 이런 식으로 들어가게 된다.

element.classList.toggle('blue') : 없으면 추가, 있으면 제거. 마지막으로 선언된 것이 적용.
element.classList.add('blue') : 클래스에 추가
element.classList.remove('blue') : 클래스에 제거

추가 내용들은 MDN classList 검색하면 된다.  add 추가, remove 삭제, toggle 등이 있다. toggle에 있는 클래스가 존재한다면 제거하고, 존재하지 않으면 추가한다.


## DOM 조작 정리

1. 선택
querySelector, querySelectorAll

2. 조작한다.
innerText
setAttribute()
getAttribute()
createElement()
appendChild()
removeChild()

## Event
- 마우스 오버, 클릭, 키다운 등의 사건. 이벤트.

- Event란 프로그램이 하고 있는 시스템에서 일어나는 사건action 혹은 발생occurrence로, 각 이벤트에 대해 조작 할 수 있도록 특정 시점을 시스템이 알려주는 것.
 - 예를 들어 사용자가 웹페이지 버튼을 클릭한다면 클릭에 대해 이벤트가 발생하고, 우리는 이벤트를 통해 클릭이라는 사건에 대한 결과를 받거나, 조작 할 수 있음.
- 클릭 말고도 웹에서는 다양한 Event 존재.
 - 키보드 키 입력, 브라우저 닫기, 데이터 제출, 텍스트 복사 등등.

### Event object

- 네트워크 활동이나 사용자와의 상호작용 같은 사건의 발생을 아리기 위한 객체.

- Event 발생
 - 마우스를 클릭하거나 키보드를 누르는 등 사용자 행동으로 발생 할 수도 있고, 특정 메서드를 호출하여 프로그래밍 적으로도 이벤트 생성 가능.

- DOM 요소는 Event를 수신
- 받은 Event를 처리 할 수 있음.
 - Event 처리는 주로 addEventListener()라는 Event 처리기 Event handler를 다양한 html 요소에 부착해서 처리한다. DOM.addEventListener()
- 수신, 처리, 부착.
- 대상에 특정 Event가 발생하면 할 일을 등록하자. 할 일의 부분은 콜백함수가 들어간다.
`EventTarget.addEventListener(type, listener)`
-> EventTarget이 대상, type이 특정 이벤트, listener가 할 일.

#### Event handler - addEventListener()
- EventTarget.addEventListener(type, listener[, options])
 - 지정한 이베느가 대상에게 전달 될 때마다 호출 할 함수를 설정.
 - 이벤트를 지원하는 모든 객체(element, document, window 등)을 대상으로 지정 가능.

1. type
- 반응 할 이벤트 유형을 나타내는 대소문자 구분 문자열.
- 대표 : input, click, submit 나머지는 문서를 통해 확인 가능. 굉장히 많다.
https://developer.mozilla.org/en-US/docs/Web/Events

2. listener
- 지정된 타입의 이벤트를 수신 할 객체.
- 자바 스크립트함수 객체여야 함. 콜백함수.
- 콜백 함수는 발생한 이벤트의 데이터를 가진 이벤트 기반 객체를 유일한 매개 변수로 받는다.

### addEventListener 정리

- ~하면 ~한다.
 - 클릭하면 경고창을 띄운다.
 - 특정 event가 발생하면, 할 일(콜백 함수)를 등록한다.

### Event 취소
- event.preventDefault()
 - 현재 Event의 기본 동작을 중단
 - HTML 요소의 기본 동작을 작동하지 않게 막음.
 - HTML 요소의 기본 동작 예시
  - a태그 : 클릭 시 특정 주소로 이동
  - form 태그 : form 데이터 전송.

**랜덤한 숫자 6개 만들기.**
짜스는 내장함수 등 추가 기능들이 부족한 경향이 있다.
그런 것들에 대해 도움 받기 위해 라이브러리가 존재. 그 중 하나가 loadash. 생김새는 `_` 로우 대쉬. `_.sampleSize(_.range(1, 46), 6)` _로대쉬의 메서드를 쓰는 것.

**참고 : lodash**
- 모듈성, 성능 및 추가 기능을 제공하는 짜스 유틸리티 라이브러리.
- array, object 등 자료 구조를 다룰 때 사용하는 유용하고 간편한 유틸리티 함수들을 제공.
- 함수 예시 : reverse, sortBy, range, random
- https://loadash.com/

**문자열 메서드 중 `.trim()` -> 양쪽에 공백을 제거하는 것. 양쪽에 공백을 제거 했을 때 데이터가 있다면.**

### this
- 어떠한 object를 가리키는 키워드
 - 자바에서의 this와 python에서의 self는 인스턴스 자기 자신을 가리킨다.
- 짜스의 함수는 호출 될 때 this를 암묵적으로 전달 받음.
- 짜스에서의 this는 일반적인 프로그래밍 언어에서의 this와 약간 다르게 동작.
- 짜스는 해당 **함수 호출 방식**에 따라 this에 바인딩 되는 객체가 달라짐.
- 즉, 함수를 선언 할 때 this에 객체가 결정되는 것이 아니고, 함수를 호출 할 때 함수가 어떻게 호출 되었는지에 따라 동적으로 결정된다.

1. 전역 문맥에서의 this
2. 함수 문맥에서의 this
 - 단순 호출
 - Method (객체의 메서드로서.)
 - Nested

#### 전역 문맥에서의 this
- 브라우저의 전역 객체인 window를 가리킨다.
 - 전역 객체는 모든 객체의 유일한 최상위 객체를 의미한다. console.log(this) // window 나옴.

#### 함수 문맥에서의 this
- 함수의 this 키워드는 다른 언어와 조금 다르게 동작.
 - this의 값은 함수를 호출한 방법에 의해 결정됨.
 - 함수 내부에서 this의 값은 함수를 호출한 방법에 의해 좌우됨.

1. 단순 호출
 - 전역 객체를 가리킨다.
 - 전역은 브라우저에서는 window, Nodw.js에서는 global을 의미함.

2. Method (Function in Object, 객체의 메서드로서)
 - 메서드로 선언하고 호출한다면, 객체의 메서드이므로 해당 객체가 바인딩
 - 객체 안의 메서드에서 쓰인 this는 자기 자신을 가리킨다. 메서드로써 호출 될 때는 자신을 호출한 객체에 바인딩.
 
 - 콜백 함수는 함수 내의 함수가 아닌, 함수로 불려왔기에 this를 가리키지 않고 window를 가리키게 된다. 이것을 해결하기 위해 화살표 함수가 나왔다.
 - 따라서 메서드 안에서의 this 바인딩을 원하면 화살표 함수로 써야한다. 화살표 함수는 들어간 스코프의 상위 스코프를 가리키게 된다.

3. Nested (Function 키워드)
 - forEach의 콜백 함수에서의 this가 메서드의 객체를 가리키지 못하고 전역 객체의 window를 가리킨다.
 - 단순 호출 방식으로 사용되었기 때문.
 - 이를 해결하기 위해 등장한 함수 표현식이 바로 화살표 함수.
 - 이전에 일반 function 키워드와 달리 메서드의 객체를 잘 가리킨다.
 - 화살표 함수에서 this는 자신을 감싼 정적 범위.
 - 자동으로 한단계 상위의 scope의 context를 바인딩.

### 화살표 함수
- 화살표 함수는 호출의 위치와 상관없이 상위 스코프를 가리킨다. 상위 스코프 === Lexical scope this

- Lexical scope
 - 함수를 어디서 호출하는지가 아니ㅏㄹ **어디에 선언**하였는지에 따라 결정.
 - static scope 라고도 하며 대부분의 프로그래밍 언어에서 따르는 바식.

- 따라서 함수 내의 함수 상황에서 화살표 함수를 쓰는 것을 권장.

**주의사항**
- 하지만, addEventListener에서의 콜백 함수는 특별하게 function 키워드의 경우 addEventListener를 호출한 대상을 (event.target) 뜻함. this가 event.target을 가리킨다.
- 반면 화살표 함수의 경우 상위 스코프를 지칭하기 때문에 window 객체가 바인딩.
- 결론 : addEventListener의 콜백 함수는 function 키워드 사용하기.

- this가 호출되는 순간에 결정되는 것은 장단점을 가지고 있다.
- 장점 : 메서드, 함수를 하나만 만들어서 여러 객체에서 재사용 할 수 있다.
- 단점 : 유연함이 실수로 이어질 수 있다는 점. 사실상 그 외 다.
- 좋다 나쁘다 하기 전에 실수 줄이면서 잘 쓸 생각을 해라

# 마무리
- DOM
 - DOM 조작
- Event
 - addEventListener
- this
 - function vs arrow function






























