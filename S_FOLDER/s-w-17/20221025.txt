
https://developer.mozilla.org/ko/docs/Web/Events
이벤트 종류.


appendChild 좋은데
prepend, append, after, before 4가지를 보통 요소 배치 할 때 많이 쓴다.
- prepend : 자식 요소의 앞 쪽에 추가해준다.
- append : 자식 요소의 뒤 쪽에 추가.
- after : 형제 노드로 붙인다.
- before : 형제 노드로 붙인다.

짜스는 너희가 공식 문서 MDN을 달고 살아야 한다. 

새로 만든 노드를 붙잉거나 하는게 아니면 그냥 이동시킨다.
append는 뒤에 붙이는 동작인데 이미 있는 요소라면 그 요소를 이동시키는듯? 짜스답게

보통 스크롤 이벤트는 윈도우랑 상호작용을 많이 한다.


# 짜스의 객체지향

- 헤드라인만 잡을 것이다. 공부 해볼거면 구글링해라~
- 짜스가 추구하는 객체지향은 결이 약간 다르다.
- 짜스는 초기 함수형 언어여서 prototype을 이용해 객체 지향을 만들었다.
- prototype으로부터 this가 나오고 난리난다.

- 함수형 언어인데 객체지향을 흉내내는 것이다.
- 객체 지향 언어가 아니다.

- 프로토타입 / 클래스 이야기.
- 간단히 말하면 

- 메소드 안에서 속성을 접근할 수 있어야 한다. 그래서 나온 것이 this이다. 자바가 많이 쓴다. 파이썬의 self.
- 상속. 일반적으로 포함이나 짜스는 가르키는 것이다. 렉시컬 스코프의 객체를 가리킨다? B가 A를 가리키게 하는 과정을 프로토 타입이라고 부른다.
- A라는 객체를 B가 포함하면 상속받는것이나 자스는 B의 프로토타입이 A를 가리키게 된다. 프로토타입으로 지정해 놓은 애가 있으면 그 친구를 상속받는 것이다.
- 짜스 다중 상속은 내가 찾아봐야지... 그때 기억하기론 프로토타입이 여러개 그렸던거 같은데하하
- `객체.__proto__ = 객체` : 상속

- new 키워드는 function 키워드로 가능하게 해주려고 함.

- ES6 부터 class 키워드를 주기 시작했다.
- class 클래스명 { constructor (params) {this.name = name; this.age = age;}}
- 객체.prototype.함수명 = function () {함수본체} 사용 가능.
- 이 때 class와 function과 같다. class 키워드는 사실상 prototype 그대로 쓰고 있다. 실제 클래스 개념이 생긴 것이 아니다.
- 짜스는 객체 지향 언어이긴 한데 내부적으로는 함수로 사용하고 있고 프로토타입 개념을 사용하고 있다. ES6부터 class 키워드가 추가되었지만 내부적으로 여전히 프로토타입이다.

- `콜백함수.bind(this)` 해주면 객체의 this에 this를 묶어준다.
- 혹은 Arrow Function을 쓰면 된다.
- 콜백인지 아닌지 잘 봐라.

- 깃헙 페이지스로 정적 웹페이지 만들어서 블로그 해도 된다.

body는 document.body로 호출이 가능
















