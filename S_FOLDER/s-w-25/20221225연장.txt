
# 20221225

## 리액트에서의 HTTP 요청 및 에러, 로딩 등.

- 리액트는 DB와 직접적으로 소통하면 안된다. 인증 코드 노출이다.
- 브라우저에서 실행되는 모든 것은 접근하고 읽힐 수 있다. 개발자 도구로 볼 수 있으므로.
- 리액트는 백엔드 API를 요청해서 정보를 받아온다.

- API는 REST 혹은 GraphQL를 주로 의미한다. 서버가 데이터를 응답하는 표준을 말한다.

- Fetch API가 존재한다. Fetch API로 가져와볼듯.

- axios 사용법은 같음. import axios from "axios"
- axios({method: "GET", url, header: {}, data: {},) 등등
https://axios-http.com/docs/req_config
- request config를 보면 어떤 요청을 보낼 수 있는지 확인 가능. 어떤 형태의 key 값을 가져야 하는지.

500대 에러는 서버에러.

---

### 커스텀 훅

- 여태까지는 use로 시작하는 리액트 기본 훅들을 사용했다. 
- 리액트 훅들은 리액트 컴포넌트 함수, 혹은 커스텀 훅에만 사용이 가능하다.
- 커스텀 훅은 정규 함수이긴 하다. 하지만 안에 state를 설정 할 수 있는 로직을 가진 재사용 가능한 함수이다. 상태를 설정하느 함수를 아웃소싱 가능하다.
- 정규 함수와 다르게 useState나 useReducer 등, useEffect까지 접근이 가ㅡㄴㅇ하다. 다른 컴포에서 사용 할 수 있는 로직과 함수이다.
- 재사용 가능한 로직인 것이다. 리액트 훅과 다른 훅 사용이 가능하다. 커스텀 훅에서는.

- 커스텀 훅의 규칙이 잇다.
- 함수 이름은 무조건 use로 시작해야 한다. use로 시작되는 상수를 이용하거나, 함수 이름이 use로 시작해야 한다. 반드시!
- use로 시작하는 것이 커스텀 훅이라는 것을 리액트에게 알리고, 커스텀 훅을 훅으로 사용하겠다고 말하는 것이고, 그렇게 되면 리액트가 훅임을 보장해준다.
- 커스텀 함수를 다른 함수에 사용하는 것이 목적이다.

- 재사용 하려는 로직을 적어주면 된다.
- custom hook을 사용한다고 satate나 effect를 공유하는 것은 아니다.
- 커스텀 훅이 재사용되면 재실행되고, 모든 컴포넌트 인스턴스가 각자의 state를 받게 된다.
- 즉, 로직만 공유하지 변수 등을 공유하지 않는다.

- 커스텀 hook의 state를 할당하고 싶다면 하면 된다.
- 리액트가 커스텀 훅 역시 내부 처리를 해준다. 상태를 만들고, 관리를 하며 배열 디스트럭쳐링을 반환한다.
- 커스텀 훅에서, 반환하고자 하는 값을 반환해주면 된다.

- 커스텀 훅에서는 똑같이 인자를 정해줄 수 있다.

































