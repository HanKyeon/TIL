'''
진기는 0초부터 붕어빵을 만들기 시작하며, M초의 시간을 들이면 K개의 붕어빵을 만들 수 있다.
서빙은 진기가 하는 것이 아니기 때문에, 붕어빵이 완성되면 어떤 시간 지연도 없이 다음 붕어빵 만들기를 시작할 수 있다.
0초 이후에 손님들이 언제 도착하는지 주어지면, 모든 손님들에게 기다리는 시간없이 붕어빵을 제공할 수 있는지 판별하는 프로그램을 작성하라.

[입력]

첫 번째 줄에 테스트 케이스의 수 T가 주어진다.
각 테스트 케이스의 첫 번째 줄에는 세 자연수 N, M, K(1 ≤ N, M, K ≤ 100)가 공백으로 구분되어 주어진다.
두 번째 줄에는 N개의 정수가 공백으로 구분되어 주어지며,
각 정수는 각 사람이 언제 도착하는지를 초 단위로 나타낸다. 각 수는 0이상 11,111이하이다.


[출력]

각 테스트 케이스마다 ‘#x’(x는 테스트케이스 번호를 의미하며 1부터 시작한다)를 출력하고,
모든 손님에 대해 기다리는 시간이 없이 붕어빵을 제공할 수 있으면 “Possible”을, 아니라면 “Impossible”을 출력한다.
'''

for testcase in range(1, int(input())+1):
    n, m, k = map(int, input().split()) # n명 올거고 m초마다 k개 제작
    nl = list(map(int, input().split())) # n명의 사람이 몇초에 오는지
    nl.sort() # 정렬
    dp = [0]*11112 # dp
    for i in range(11112-m): # dp 만들기
        dp[i+m] = dp[i]+k
    ans = 'Possible' # 일단 가능
    for i in range(n): # 돌면서
        if dp[nl[i]] - i - 1 < 0: # 사람 숫자만큼 뺐을 때 음수면
            ans = 'Impossible' # 불가능
            break
    print(f"#{testcase} {ans}") # 출력

