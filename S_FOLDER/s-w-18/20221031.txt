
# 20221031
뷰3은 ctrl k 눌러서 하면 되고 90%이상 문법이 비슷하기에 vue3 독스 검색도 킹쁘지 않다.
반응성이 FE framework의 큰 특징이고 장점이다.

## Vue Intro
- 짜스를 이용한 Front-end 개발.
- 백엔드는 백엔드에 특화된 장고 사용.
- Front-end 개발은 Vue.js === 짜스 FE Framework

- FE framework : 사용자에게 보여주는 화면 만들기.
- Web App (SPA Single Page Application)를 만들 때 사용하는 도구.
- Web App : 웹 브라우저에서 실행되는 어플리케이션 소프트웨어.
- Web App 확인 : 개발자 도구 > 디바이스 모드를 통해 확인. 웹 페이지가 그대로 보이는 것이 아닌, 디바이스에 설치된 App처럼 보이는 것. 웹 페이지가 디바이스에 맞는 적절한 UX/UI로 표현되는 형태.

### SPA Single Page Application
- Web App과 함께 자주 등장 할 용어이다.
- 이전까지는 사용자의 요청에 적절한 페이지 별 템플릿을 반환.
- SPA는 서버에 최초 1장의 HTML만 전달받아 모든 요청에 대응하는 방식을 의미.
- CSR Client side Rendering 방식으로 요청을 처리해서 SPA를 구현.

**참고 : SSR Server Side Rendering**
- 기존 학습한 요청 처리 방식.
- 서버가 사용자의 요청에 적합한 HTML을 렌더링하여 제공하는 방식.
- 전달 받은 새 문서를 보여주기 위해 브라우저는 새로고침을 진행.
- 템플릿을 렌더링 할 때 html, css, js, data를 모두 받아 Rendering을 했다.

### CSR Client Side Rendering
- 최초 한 장의 HTML을 받아오는 것은 동일하나, server로부터 최초로 받아오는 문서는 빈 html 문서이다.
- 각 요청에 대한 대응을 짜스를 사용하여 필요한 부분만 다시 렌더링한다.
1. 새로운 페이지를 서버에 AJAX로 요청.
2. 서버는 화면을 그리기 위해 필요한 데이터ㅡㄹ JSON 방식으로 전달.
3. JSON 데이터를 짜스로 처리, DOM 트리에 반영.
- 클라이언트에서 AJAX Request AJAX 요청을 받아서 JSON Response를 DB에서 응답하여 rendering한다.

### 왜 CSR 방식?
1. 모든 HTML 페이지를 서버로부터 받는 것이 아니기 때문.
- 클라이언트-서버 간 통신의 트래픽이 감소한다.
- 트래픽이 감소한다. 즉, 응답 속도가 빨라진다.
2. 매번 새 문서를 받아 새로고침하는 것이 아니라 필요한 부분만 고쳐 나가므로 각 요청이 끊김없이 진행.
- SNS에서 추천을 누를 때마다 첫 페이지로 돌아간다. UX 손실.
- 요청이 자연스럽게 진행이 된다. 즉, UX 향상.
3. BE와 FE의 작업 영역을 명확히 분리 할 수 있음.
- 각자 맡은 역할을 명확히 분리 == 협업이 용이해진다.

- CSR은 첫 구동 시 필요한 데이터가 많으면 많을수록 최초 작동 시작까지 오랜 시간이 소요된다.
- SEO Search Engine Optimization 검색 엔진 최적화가 어렵다.
 - 서버에서 제공하는 것은 텅 빈 HTML 파일이므로.
 - 내용을 채우는 것은 AJAX 요청으로 얻은 JSON 데이터로 클라이언트, 즉 브라우저가 진행하기 때문.
- 대체적으로 HTMl에 작성된 내용을 기반으로 하는 검색 엔진에 빈 HTML을 공유하는 SPA 서비스가 노출되기는 어려움. 

**참고 SEO Search Engine Optimization**
- 구글, 빙과 같은 검색 엔진 등에 내 서비스나 제품 등이 효율적으로 검색 엔진에 노출되도록 개선하는 과정을 일컫는 작업.
- 검색 : 각 사이트가 운용하는 검색 엔진에 의해 이루어지는 작업.
- 검색 엔진 : 웹 상에 존재하는 가능한 모든 정보들을 긁어 모으는 방식으로 동작.
 - 정보 대장은 주로 HTML에 작성된 내용.
 - 짜스가 실행된 이후의 결과를 확인하는 과정이 없음.
- 최근에도 SPA, 즉 CSR로 구성된 서비스의 비중이 증가되고 있다.
 - SPA 서비스도 검색 대상으로 넓히기 위해 짜스를 지원하는 방식으로 발전.
- 단, 단순 HTML을 분석하는 것보다 몇 배의 리소스가 필요한 작업이기에 여전히 CSR의 검색 엔진 최적화 문제가 모두 해결된 것은 아니다.

### CSR vs SSR
- CSR과 SSR은 흑백이 아니다.
 - 내 서비스에 적합한 렌더링 방식을 적절하게 활용 할 수 있어야 한다.
- SPA 서비스에서도 SSR을 지원하는 Framework도 발전하고 있음.
 - Vue.js의 Nuxt.js
 - React.js의 Next.js
 - Angular Universal 등

뷰는 쉬워서 배운다. 구조가 직관적이며 FE framework를 빠르고 쉽게 학습이 가능하다.
FE framework 없이 짜스를 작성하기 위해서는 data가 바뀔 때마다 기존에 가지고 있는 text들, 해당 data를 가진 모든 엘리먼트들에 신경을 써줘야 한다.

### Vue CDN
- Vue로 작업을 시작하기 위하여 CDN을 가져와야 한다.
- django == python web framework : pip install 한다.
- Vue === JS Front-end Framework : CDN 방식 제공, 혹은 npm 방식 제공.

1. `<script src="https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js"></script>` 헤드에 추가. 아래쪾에 있는 CDN은 배포용이다. 위쪽이 개발용.
2. 기본 적인 예시로 Vue instance 생성. Vue instance는 1개의 Object이며, 정해진 속성명을 가진 객체이다.
3. el, data 설정 : data에 관리 할 속성 정의
4. 선언적 렌더링 {{}} : Vue data를 화면에 렌더링.
5. input tag의 속성(class, type, style 등등 들어가는 태그 안)에 v-model 작성.
 - input에 값 입력 -> Vue data 반영.
 - Vue data -> DOM 반영.

뷰2가 아직 뷰3보다 안정적이다. 레거시 코드가 뷰2가 많다.

## Vue instance

### MVVM Pattern
- 소프트웨어 아키텍쳐 패턴의 일종.
- 마크업 언어로 구현하는 그래픽 사용자 인터페이스 (view)의 개발을 Back-end(model)로부터 분리시켜 view가 어느 특정한 모델 플랫폼에 종속되지 않도록 함.
1. View : 우리가 눈에 보는 부분. DOM
2. Model : 실제 데이터. JSON
3. View Model (Vue):
 - View를 위한 Model.
 - View와 연결binding되어 Action을 주고 받는다.
 - Model이 변격ㅇ되면 View Model도 변경되고, 바인딩 된 View도 변경된다.
 - View에서 사용자가 데이터를 변경하면 View Model의 데이터가 변경되고 바인딩 된 다른 View도 변경 된다.

- view가 변환되든 model이 변화되든 그 중간에서 소통 해주는 친구. 변경된 것을 뷰에 적용 시키는 것.
- 뷰와 모델이 직접적으로 연결되어 있지 않다는 것!
- -DOM Listeners다 view의 변화를, Directives가 Model의 변화를 감지하여 반영하는듯.

- 즉, View와 Model을 완전히 분리 시켜서 독립성은 증가시키고, 의존성은 줄어들게 하는 것이다. DOM은 데이터를 모르게, Data도 DOM을 모르게.

### Vue instance 실습
- Vue instance는 하나의 객체이다. 많은 속성과 메서드를 이미 가지고 있고, 이런 기능들을 사용하는 방식이다.

**참고 : 생성자 함수**
- JS에서 객체를 하나 생성한다면 그냥 객체 하나를 선언해서 생성.
- 동일한 형태의 객체를 또 만든다면 새로 같은 형태의 객체를 선언하거나 prototype 선언.
- 생성자 함수는 특별한 함수를 의미하는 것이 아닌, new 연산자로 동일하게 만드는 함수이다.
- 함수 이름은 반드시 대문자로 시작해야한다.
- 생성자 함수를 사용 할 때는 반드시 new 연산자를 사용해야 한다.

#### el (element)
- Vue instance와 DOM을 mount(연결)하는 옵션.
 - View와 Model을 연결하는 역할.
 - HTML id 혹은 class와 마운트 가능.
- Vue instance와 연결되지 않은 DOM 외부는 Vue의 영향을 받지 않는다.
 - 즉, Vue 속성 및 메서드 사용이 불가하다.

Vue에서 Arrow Function을 쓸 때 this를 쓰면 window를 가리키게 된다.

el은 주로 첫번째 obj. Vue로 관리하겠단 의미인듯하다.

#### data
- Vue instance의 데이터 객체 혹은 인스턴스 속성.
- data 객체는 반드시 기본 객체 형태를 띄워야 한다.
- 객체 내부의 아이템들은 value로 모든 타입의 객체를 가질 수 있음.
- 정의된 속성은 interpolation {{}}을 통해 view에 렌더링이 가능하다.
- 이 때 Vue의 정해진 data에 정해진 이름을 구분하기 위해 $를 붙여 사용. ex) this.$data.message 이런 식으로. 하지만 숏핸드로 this.message 이런 것도 가능ㅎ다ㅏ.

#### methods
- Vue instance의 method들을 정의하는 곳.
- methods 속성에 객체를 정의한다.
- function을 넣어 method를 정의하며, this를 통해 객체 self, this에 연결이 가능하다.

**주의 methods with Arrow Function**
- 메서드를 정의 할 때, Arrow Function을 사용하면 안됨.
- Arrow Function의 this는 함수가 선언될 때 상위 스코프, 렉시컬 스코프를 가리킨다.
- 즉, this가 상위 객체인 window를 가리킨다.
- 호출은 문제 없이 가능하나, this로 Vue의 data를 변경하지 못한다.
- 콜백 함수에서는 사용 가능.

- Arrow function은 선언된 객체의 상위 스코프? 아니면 Arrow function의 위치의 상위 스코프? 잘 모르겠군. 2개 위라고 들은거 같은데.
-> 무조건 상위 스코프의 this이다. 상위 스코프.

## Basic of Syntax

### Template Syntax
- Vue2 guide > template syntax 참고.
- 렌더링 된 DOM을 기본 Vue instance의 data에 선언적으로 바인딩 할 수 있는 HTML 기반 template syntax를 사용.
 - 렌더링 된 DOM : 브라우저에 의해 보기좋게 그려질 HTML 코드
 - HTML 기반 template syntax : HTML 코드에 직접 작성 할 수 있는 문법 제공.
 - 선언적으로 바인딩 : Vue instance와 DOM을 연결.

1. Template Interpolation
- 가장 기본적인 바인딩 방법.
- 중괄호 2개로 표기.
- DTL과 동일한 형태로 작성.
- Template Interpolation 방법은 HTMl을 일반 텍스트로 표현.
- 인터폴레이션 {{}} 안에 쌩 짜스 표현식이 들어갈 수 있다. 근데 쓰지 말라고 함
2. Raw HTML
- v-html directive를 사용하여 data와 바인딩.
- v-html은 태그 내 속성에 지정하여서 바인딩한다. v-html="이렇게". 근데 이렇게 쓰지 말래요
- directive : HTML 기반 template syntax
- HTML의 기본 속성이 아닌 Vue가 제공하는 특수속성의 값으로 data를 작성.

**참고 JS 표현식**
- 표현식 형태로 작성 가능.
```js
const app = new Vue({
    el:'#app',
    data:{
        msg:'val',
    }
})
```
## Directives
- v- 접두가사 있는 특수 속성. 값을 할당 할 수 있음. 짜스의 표현식을 작성이 가능하다.
- 역할은 표현식의 값이 변경될 때 반응적으로 DOM에 어떤 일을 할 지 적용하는 것. v-key="value" 인데 value가 짜스 변수, 표현식이 작성이 되고, 해당 값이 변경됨에 따라 html에 어떻게 적용할지 결정하는 것이다.
`v-on:submit.prevent="onSubmit"`
대표적인 예시.
v- 이후에는 이름, submit은 인자, Argument, .prevent는 Modifiers, "" 내에는 value가 들어간다.

### v-text
<p v-text="message"></p>
이런 식으로 작성. Vue 객체의 data에 있는 message 변수를 가져오는 것. {{message}} 와 도잉ㄹ한 역할. 정확히 동일한 역할은 아니지만 어쨌걷 동일한 역할.

### v-html
- RAW HTML을 표현 할 수 있는 방법.
- 단, 사용자가 입력하거나 제공하는 컨텐츠에는 절대 사용 금지. XSS 공격 위험. 참고해야 한다.

### v-show
- 표현식에 작성된 값에 따라 element를 보여줄 것인지 결정. boolean 값이 변경 될 때마다 반응.
- 대상 element의 display 속성을 기본 속성과 none으로 toggle.
- 요소 자체는 항상 DOM에 렌더링 된다. 하지만 보이느냐 마느냐의 차이이다. 항상 렌더링 자체는 되어있다.

### v-if
- v-show와 사용 방법은 동일.
- isActive의 값이 변경 될 때 사용.
- 단, 값이 false인 경우 DOM에서 사라짐.
- v-id v-else-if v-else 형태로 사용.

- boolean 값에 의해서 사용하냐 안하느냐 결성. false일 시 애초에 렌더링하지 않는다. 존재하지 않는 친구가 된다.

### v-show vs v-if
- v-show
 1. 초기 로딩이 비싸지만 토글이 싸다.
 2. 표현식 결과와 관계 없이 렌더링 되므로 초기 렌더링 비용은 v-if보다 높을 수 있음.
 3. display 속성 변경으로 표현 여부를 판단하므로 렌더링 후 toggle 비용은 적음.
- v-if
 1. 표현식 결과가 false인 경우 렌더링조차 되지 않으므로 초기 렌더링 비용은 v-show보다 낮을 수 있음.
 2. 단, 표현식 값이 자주 변경되는 경우잦은 재 렌더링으로 비용이 증가.
- 근데 아마 앞으로 v-if를 자주 쓸 것이다. v-else-if 혹은 v-else를 써야하기 때문에 show보다는 if라는 조건문의 역할을 잘 하는 v-디렉티브를 더 자주 슬 것이다.

## v-for 반복문.

- 다행히도 파이썬과 비슷하다.
- v-for="(변, 수) in 이터레이터"로 선언.
- 기본적으로 요소를 하나만 받으며, 2가지를 넣으면 변 부분이 값, 수 부분이 index이다.
- 문자열 역시 사용 가능하며, 배열 역시 가능.
- 각 요소가 객체라면 dot notation으로 접근 가능.
- 객체 순회 시 value가 할당되어 출력된다.
- 2번째 변수 할당 시 key 출력 가능.

** 참고 : 특수 속성 key **
- v-for 사용 시 **반드시** key 속성을 각 요소에 작성.

- 반복을 도는데, 반복되는 순서에 따라서 순회를 해야 한다. 반복이 되는 이터레이터의 요소를 식별 할 수 있는 값이 key이다. 내부적 로직을 위해. 쓰지 않아도 겉보기에 문제는 없으나, 순회를 할 때 반복의 불변을 유지하기 위해 적어준다.
- 다른 v-for와 겹치지 않는 유일한 값을 적어야 한다. 각 요소가 고유한 값을 가지고 있다면 생략해도 된다.
- 겹치게 적을 시 duplicate keys로 key 값이 겹쳤다고 경고를 해준다. 당장은 문제가 없지만, 업데이트 에러를 발생 시킬 수 있다고 알려줌.
- 해당 부분에는 "`key값을 정해줄 수 있다. ${index} 이런 식으로.`" 이런 식으로 key 값을 바꿔줄 수 있다.
- 사용하지 않아도 key 속성을 : 이후 넣어주어야 한다.

- 주로 v-for directive 작성 시 사용.
- vue 화면 구성 시 이전과 달라진 점을 확인하는 용도로 활용. 따라서, key가 중복되어서는 안됨.
- 각 요소가 고유한 값을 가지고 있지 않다면 생략 가능.

## v-on

- event listener 역할을 해준다.
`button v-on:click="number++"`
이런 식으로 태그 안에 작성된다.
- v-on이 태그에 붙어서 이벤트 리스너 역할을 하고 있다.
- 메서드 사용 가능하며, 인자가 없으면 ()소괄호 없어도 되고 (인자)넣고 인자 전달도 된다.
- v-on을 @로 숏컷이 가능하다.

- `:`을 통해 전달 받은 인자를 확인.
- 값으로 짜스 표현식 작성.
- addEventListener의 첫 번째 인자와 동일한 값들로 구성.
- 대기하고 있던 이벤트가 발생하면 할당된 표현식 실행.
- method를 통한 data 조작도 가능.
- method에 인자를 넘기는 방법은 일반 함수를 호출 할 때와 동일한 방식.
- `:`를 토앻 전달된 인자에 따라 특별한 modifiers(수식어)가 있을 수 있음. ex) v-on:keyup.enter 등
- `@` shortcut 제공. ex) @keyup.click === v-on:keyup.click

vue2 가이드 > api > v-on 파트 참고.

## v-bind

- HTML 기본 속성에 Vue data를 연결. ex) v-bind:href="변수" v-bind:class="변수"
- class의 경우 다양한 형태로 연결 가능.
 1. 조건부 바인딩
  - {'class Name' : '조건 표현식'}
  - 삼항 연산자도 가능.
 2. 다중 바인딩
  - ['JS 표현식', 'JS 표현식']
`v-bind:` 의 축약어 -> `:` 아까 v-for에서 :key가 이거다.
`v-on:`의 축약어 -> `@:`

### v-model

- 데이터와 양방향 바인딩을 하는 역할.
- Vue instance와 DOM의 양방향 바인딩.
- Vue data 변경 시 v-model로 연결된 사용자 입력에도 element에도 적용.

- v-on: or @: 이벤트 없이 바로 연결해주는 것이 v-model 이다. v-on 없이 바로 데이터와 연결된다.
- v-model이 선언된 곳과 data를 양방향 바인딩 한다. 메서드 없이 연결 시켜준다는듯. 메서드 없이 양방향 바인딩으로 묶어서.
- v-model을 한글과 연결하면 단어 하나가 완성될 때까지 양방향 연결이 되지는 않는듯. 하나의 글자가 만들어지기 위해 조합이 되어야 하는 경우, 입력방식 편집기. 조합형 문자의 경우에 입력 처리 방식에 따라 순서가 다르다.
- 조합형 언어의 경우, function을 따로 만들어서 @: v-on을 이용해서 해주면 된다.

## Vue advanced

### computed
- Vue instance가 가진 options 중 하나.
- computed 객체에 정의한 함수를 페이지가 최초로 렌더링 될 대 호출하여 계산. 계산 결과가 변하기 전까지 함수를 재호출 하는 것이 아닌 계산된 값을 반환한다.
- cmputed의 경우, 처음 1회 실행하고 메모리에 저장을 해둔다. 이후 변화가 없다면 호출이 되지 않아서 호출을 아끼게 된다. 미리 계산된 결과값을 내어준다. 재 계산을 하는 경우, 종속된 대상이 변할 때 그 때 재계산한다.
- method는 사용 될 때마다 호출이 된다.
- computed는 계산된 값을 가져오고, method는 호출이다.
- axios 비동기 요청 같은 경우는 method 형태로 되면 되고, computed는 계산된 값을 쭉보여줄 때. 공식 문서 역시 묶어서 보여준다.

methods : 호출 될 때마다 함수 실행. 같은 결과여도 매번 새롭게 계산.
computed : 함수의 종속 대상(피연산자?)의 변화에 따라 계산 여부가 결정됨. 종속 대상이 변하지 않으면 항상 저장(캐싱)된 값을 반환.

- 즉, 종속 대상의 변화가 적은, 재계산이 최대한 적은 것들을 computed로 바꿔주면 좋을 것이다.

### watch
- 감시자.
1. watch 객체 정의
2. 감시할 대상 data를 지정.
3. data가 변할 시 실행 할 함수를 정의
- watch 함수의 첫번째 인자는 변동 전 data, 두번째 인자에는 변동 후 data
-> 반대인듯? 첫번째 인자가 변화된 data, 두번째 인자가 변화되기 전 data

- watch 객체의 key값은 data의 변수와 이름이 일치해야 째려볼 수 있다.
- 주로 디버깅에 사용. 과거 값과 새 값을 알 수 있으므로.
- watch에서 값이 바꼈을 때, this의 함수를 쓰고 싶은 경우 키값을 `'handler'`로 사용해야하며, 함수 명 역시 `'nameChange'`이런 식으로 해야한다.

- 데이터가 만약 객체 혹은 배열의 경우, watch가 바로 들여다 볼 수 없기에 depp=true 옵션을 주어야 제대로 된 감시가 가능하다.
```js
myObj: {
    handler: function (val) {
    console.log(val)
    },
    deep: true
},
```
- 실행 함수를 Vue method로 대체 가능.
1. 감시 대상 data의 이름으로 객체 생성.
2. 실행하고자 하는 method를 handler에 문자열 형태로 할당.
- 배열, 객체의 내부 요소 변경을 감지하기 위해서는 deep 속성 추가 필요.


### filters

- 텍스트 형식화를 적용 할 수 있는 필터.
- interpolation 혹은 v-bind를 이용 할 때 사용 가능.
- 필터는 짜스 표현식 마지막에 `|`파이프라인과 함께 추가되어야 함.
- 체이닝 가능.
`<p>{{ numbers | getOddNums }}</p>` 이런 식으로 사용.
`{{ numbers | getOddNums | getUnderTenNums }}` 체이닝 가능.

-> computed, methods, watch, filters 다 Vue의 프로퍼티이다. 또한 전부 객체 형태를 띈다. (딕셔너리, JSON 형태라 보면 편할듯.)



vue instance : new Vue({객체가 들어간다.})
Vue 객체로 element를 지정해서 el에 붙여 관리하게 되는 것이다.
이후 data를 써서 vue instance에서 가져올 수 있고, 보관법, interpolation을 통해 쓰게 된다.
methods 들은 쓰다보면 익숙해진다.
Directives 쪽이 많다고 느껴질 것이다.


el은 가장 위쪽 객체를 가져온다. 첫번째. 같은 속성 혹은 id를 가지고 있다면.
v-model
v-on: @
v-bind: :
v-for
v-if
v-text














