
# 트리
 - 비선형 구조
 - 원소들 간에 1:n 관계를 가진 자료구조
 - 원소들 간에 계층 관계를 가지는 계층형 자료 구조.
 - 상위 원소에서 하위 원소로 내려가면서 확장되는 트리 모양의 구조.

 - 한개 이상의 노드로 이루어진 유한 집합이며, 다음 조건을 만족한다.
 1. 노드 중 최상위 노드를 루트라 한다.
 2. 나머지 노드들은 n개의 분리집합 T1 Tn으로 분리될 수 있다. 이들은 T1 ..Tn은 각각 하나의 트리가 되며(재귀적 정의) 루트의 부 트리라 한다. subtree. 끝 노드는 단말 노드 혹은 leaf잎 노드라 부르기도 한다.

- 트리에서는 정점수+1 = 노드 수 를 만족한다.

- 노드node : 트리의 원소. vertax? 라고도 부른다.
- 간선edge : 노드를 연결하는 선. 부모 노드와 자식 노드를 연결
- 루트 노드root node : 트리의 시작 노드.
- 형제 노드sibling node : 같은 부모 노드의 자식 노드들
- 조상 노드 : 간선을 따라 루트 노드까지 이르는 경로에 있는 모든 노드들.
- 서브 트리sub tree : 부모 노드와 연결된 간선을 끊었을 때 생성되는 트리
- 자손 노드 : 서브 트리에 있는 하위 레벨의 노드들
 시험 이렇게까지 자세하게 안낸다.
- 차수degree
 - 노드의 차수 : 노드에 연결된 자식 노드의 수. 자식! 노드의 수!
 - 트리의 차수 : 트리에 있는 노드의 차수 중 가장 큰 값
 - 단말 노드(리프 노드) : 차수가 0인 노드. 자식 노드가 없는 노드.

- 높이
 - 노드의 높이 : 루트에서 노드에 이르는 간선의 수. 노드의 레벨.
 - 트리의 높이 : 트리에 있는 노드의 높이 중 가장 큰 값. 최대 레벨.
 - 루트 노드의 레벨을 0이라고 하는 교재도 있고, 레벨1이라고 하는 교재도 있다.

- 대놓고 트리라 명시하거나, 그려 봤을 때 트리 구조가 되어있을 때, 그런 문제들을 트리 관련 문제 풀이로 풀 수 있다.

## 이진 트리

- 모든 노드들이 2개의 서브트리를 갖는 특별한 형태의 트리
- 각 노드가 자식 노드를 최대한 2개까지만 가질 수 있는 트리. 최대 2개가 핵심. 왼쪽 자식, 오른쪽 자식.
- 이진 트리에서는 같은 레벨끼리 연결되는 경우는 없다. 연결 될 경우 그래프가 된다.
- 레벨 i에서의 노드 최대 갯수는 2^i개. 루트노드가 0렙이 아니라 1렙이면 2**(i-1)개
- 높이가 h인 이진 트리가 가질 수 있는 노드의 최소 갯수는 h+1개가 되며, 최대 갯수는 2**(h+1)-1 개가 된다.

- 이진 트리의 종류에 따라 접근하는 방법과 저장하는 방법이 달라진다.

### 포화 이진 트리. Full Binary Tree

- 모든 레벨에 노드가 포화 상태로 차 있는 이진 트리.
- 높이가 h일 때 최대 노드 갯수인 2**(h+1)-1 의 노드를 가진 이진 트리.
 - 높이가 3일 때 15개인 노드
- 루트를 1번으로 하여 2**(h+1)-1까지 정해진 위치에 대한 노드 번호를 가짐. 1:2 모양을 가진 이진 트리.

### 완전 이진 트리. Complete Binary Tree
- 높이가 h이고, 노드 수가 n개일 때, 포화 이진 트리의 노드 번호 1번부터 n번까지 빈 자리가 없는 이진 트리.
- 기본적인 모양이 포화 이진 트리인데, 노드수 n까지는 빠진 노드가 없어야 한다.

### 편향 이진 트리. Skewed Binary Tree

- 높이 h에 대한 최소 갯수의 노드를 가지면서 한 쪽 방향의 자식 노드만을 가진 이진 트리.
- 효율이 떨어지는 구조이다.

## 이진 트리의 순회.

- 순회란, 트리의 각 노드를 중복되지 않게 전부 방문하는 것을 말하는데, 트리는 비선형 구조이기 때문에 선형 구조에서와 같이 선후 연결 관계를 알 수 없다. 따라서 특별한 방법이 필요하다.

- 순회traversal : 트리의 노드들을 체계적으로 방문하는 것.
- 3가지 기본 순회 방법
 1. 전위 순회. VLR. preorder traversal. DLR
  - 부모 노드 방문 후, 좌우 순서로 방문.
  - 루트 노드 처리, 좌 방문 우방문 재귀
  - 순회를 시작한 곳으로 돌아오면 끝난다. 순회를 하면 서브트리 정점의 갯수가 구해지고, 거기서 루트 갯수 빼면 자손의 갯수가 된다.

 2. 중위 순회. LVR. inorder traversal.
  - 왼쪽 자식 노드, 부모 노드, 오른쪽 자식 노드 순으로 방문한다.
  - 좌방문, 없을 시 루트 방문, 우방문 재귀

 3. 후위 순회. LRV. postorder traversal.
  - 자식 노드를 좌 우 순서로 방문한 후, 부모 노드로 방문한다.
  - 좌방문 우방문 루트 방문 재귀

## 이진 트리의 표현. 저장 방법. (완전 이진트리, 포화 이진트리 얘기)
- 이진 트리에 각 노드 번호를 부여. 루트 1 자식 2,3 자식자식 4,5,6,7 ...
- 레벨 n에 있는 노드에 대하여 왼쪽부터 2**n부터 2**(n+1)-1까지 번호를 차례로 부여.
- 실제 노드 같은 경우, 테이블일 수 있고, 데이터베이스 일 수 있고, 파일 시스템일 수도 있지만 저장되어 있는 것에 신경쓰지 않고 연결 관계에 대해서만 얘기 할 것이다.

- 배열로 트리를 저장하는 것은 포화 이진 트리와 완전 이진 트리에 한해 가능.
 - 노드 번호의 성질 : 노드 번호가 i인 노드의 부모 노드 : i//2 floor divide
 - 노드 번호가 i인 노드의 왼쪽 자식 노드 번호 : 2*i, 오른쪽 자식 노드 번호 2*i -1
 - 레벨 n의 노드 시작 번호는 2**n. 루트노드 레벨 0 기준
 - 사이즈를 기준으로 초과 여부에 따라 자식이 있는가 없는가 판단 가능.

 - 노드 번호를 배열의 인덱스로 사용.
 - 높이가 h인 완전 이진 트리를 위한 배열의 크기는 2**(h+1)-1

 이런 방법을 이용해 포화나 완전 이진트리가 아닌 경우, 낭비가 심할 수 있다. 대부분 포화나 완전 이진 트리로 나오게 된다.

 ### 참고 : 이진 트리의 저장 이런 규칙을 따르지 않는다면? 포화 이진트리가 아닌 경우?

 - 루트가 1번이라는 규칙을 갖는 것은 포화 이진 트리와 완전 이진 트리에서만이다. 규칙이 없다면 루트가 주어지지 않고 부모 자식 관계만 늘어두는 경우가 있다.

 - 부모 번호를 인덱스로 자식 번호를 저장.
  - 1차원 배열 2개로 저장 혹은 2차원 배열로 저장.
  - 조건이 걸리면 따로 걸어주면 되지만 보통 없다 치면 첫 배열에 차있다면 두번째 배열에 담는다는 형태로 담아주면 된다.
  - 순회를 할 때 보통 부모를 기준으로 자식 번호가 필요하다. 이럴 때는 부모를 인덱스로 자식 번호를 저장한 자료가 필요하기에 주로 순회에 쓰인다.

 - 자식 번호를 인덱스로 부모 번호를 저장.
  - 조상이나 루트를 찾을 때 유효하다.

### 배열을 이용한 이진트리 표현의 단점
 - 편향 이진트리의 경우 사용하지 않는 배열 원소에 대한 메모리 공간 낭비 발생.
 - 트리의 중간에 새로운 노드를 삽입하거나 기존의 노드를 삭제 할 경우 배열의 크기 변경이 어려워 비효율적이다.
 - 즉, 삽입 삭제가 빈번히 일어나면 고민해봐야 한다. 문제에서는 아직 메모리도 삽입삭제도 괜찮다.

전위 중위 후위 순회를 실제 문제에 나오면 주로 섞어서 쓰도록 나오게 된다. 처리하는 내용은 달라질 수 있지만.
ex 비어있는 순회를 순회하면서 전위순회로 값을 채우고, 후위 순회로 저장된 값을 활용하는 경우 등. 전위 순회 출력된 거 알려주고 트리를 만들어라 등

### 트리의 표현 - 연결 리스트

 - 배열을 이용한 이진 트리의 표현의 단점을 보완하기 위해 연결리스트를 이용하여 트리를 표현 할 수 있다.
 - 연결 자료구조를 이용한 이진트리의 표현
 - 이진 트리의 모든 노드는 최대 2개의 자식 노드를 가지므로 일정한 구조의 단순 연결 리스트 노드를 사용하여 구현.

 - 클래스를 만들어서 구현한다. 구현 난이도가 쫌 있다. 파이썬 자료구조 책을 보면 구현하는 방법이 나와있다.

자식 노드 인덱스가 2*n 2*n+1이다.

서브트리 노드의 갯수, 서브트리 루트의 자손 구하기 등등 많다!
서브트리 노드 수 : print() 쪽에 cnt+1로 해도 되며, return을 넣어서 L+R+1 을 리턴하는 형태로 해도 된다.

## 수식 트리
- 수식을 표현하는 이진 트리.
- 수식 이진 트리라고 부르기도 함. Expression Binary Tree
- 연산자는 루트 노드이거나 가지 노드.
- 피연산자는 모두 잎 노드이다.

## 이진 탐색 트리
- 탐색 작업을 효율적으로 하기 위한 자료구조.
- 모든 원소는 서로 다른 유일한 키를 갖는다.
- key(왼쪽 서브트리) < key(루트노드) < key(오른쪽 서브 트리)
- 왼쪽 서브 트리와 오른쪽 서브트리도 이진 탐색 트리이다.
- 중위 순회하면 오름차순으로 정렬된 값을 얻을 수 있다.

- 루트 값이 중앙값이 아니면 이진탐색의 시간이 n에 가까워질 수 있다.

##### 삽입 연산
1. 먼저 탐색 연산을 수행.
 - 삽입 할 원소와 같은 원소가 트리에 있으면 삽입 할 수 없으므로, 같은 원소가 트리에 있는지 탐색하여 확인한다.
 - 탐색에서 탐색 실패가 결정되는 위치가 삽입 위치가 된다.
2. 탐색 실패한 위치에 원소를 삽입한다.

##### 이진 탐색 트리 성능
- 탐색, 삽입, 삭제 시간은 트리의 높이만큼 시간이 걸린다. O(h)
- 평균의 경우, 이진 트리가 균형적으로 생성되어 있는 경우 .OlogN 시간이 걸리고
- 최악의 경우, 한 쪽으로 치우친 경사 이진 트리의 경우, On 순차 탐색과 시간 복잡도가 같다.
- 검색 알고리즘의 비교
 - 배열 : On
 - 정렬된 배열 : On
 - 정렬된 배열에서의 이진탐색 : OlogN. 배열 크기가 고정되어 있기에 삽입, 삭제 시 추가 연산 필요.
 - 이진 탐색 트리에서의 평균 : Ologn
  - 최악의 경우 On.
  - 완전 이진 트리 또는 균형 트리로 바꿀 수 있다면 최악의 경우를 없앨 수 있다. 새로운 원소를 삽입 할 때 삽입 시간이 줄어들고, 평균과 최악의 시간이 같아. Ologn
 - 해쉬 검색 : O(1). 추가 저장 공간이 필요. 딕트와 세트 같음.

##### 삭제 연산
 - 자식이 없다면 그냥 지운다.
 - 자식이 하나라면 레퍼런스 값만 이어주고 지워주면 된다.
 - 자식이 둘이라면 좌측 서브트리로 가서 가장 우측의 값, 최댓값을 찾는다. 좌측 서브 트리의 최댓값을 지우려는 루트에 넣어주고 좌측 서브 트리의 최댓값을 삭제한다. 우측의 최솟값을 넣어주고 서브트리에서 최솟값을 지워줘도 될듯?

# 힙 heap
- 완전 이진 트리에 있는 노드 중에서 키 값이 가장 큰 노드나 키 값이 가장 작은 노드를 찾기 위해서 만든 자료구조.
- 최대 힙:
 - 키값이 가장 큰 노드를 찾기 위한 완전 이진 트리.
 - 부모노드의 키값 > 자식 노드의 키값
 - 루트노드 : 키 값이 가장 큰 노드.
- 최소 힙:
 - 키 값이 가장 작은 노드를 찾기 위한 완전 이진 트리.
 - 부모노드의 키값 < 자식 노드의 키값.
 - 루트 노드 : 키 값이 가장 작은 노드.

힙이 되기 위해서는 완전 이진 트리여야 하고, 키가 겹치면 좋지 않다는 듯? 크기 조건 역시 맞아야 한다.

## 힙 연산 - 삽입
1. 완전 이진 트리 형태 유지.
2. 키값 확인.
- 마지막 정점 번호를 확인
값을 이진 트리에 넣고, 부모 노드보다 작다면 끝. 부모 노드보다 크다면 부모 노드와 교환.

## 힙 연산 - 삭제
1. 힙에서는 루트 노드의 원소만을 삭제 할 수 있다. 루트에서만 삭제 할 것이다. 꺼내는 것.
2. 루트 노드의 원소를 삭제하여 반환한다.
3. 힙의 종류에 따라 최댓값 또는 최솟값을 구할 수 있다.

1. 루트의 원소 삭제 및 저장.
2. 마지막 노드 삭제 및 루트에 옮겨두기.
3. 루트 노드 값에 따라 자리 계속 바꾸기. 부모>자식이어야 함. 최대일 경우.
4. 자리 확정

# 힙
- 완전 이진 트리로 구현된 자료구조로서, 키 값이 가장 큰 노드나 가장 작은 노드를 찾기에 용이한 자료구조.
- 최소 힙은 가장 작은 키 값을 가진 노드가 항ㅅ아 루트에 위치한다.
- 힙의 키를 우선순위로 활용하여 우선순위 큐를 구현 할 수 있다.











웹엑스
스큐드 트리나 여러 트리를 클래스를 이용해서 쓰고 싶다, 인터뷰 등에 대비하기 위해 링크드 리스트를 짜서 쓰는건 문제가 되지 않는다.

레드블랙트리 밸런스드트리 등 스큐드 트리 등
검색 같은 경우 링크드 리스트로 된 경우 비효율적이다. 단순 탐색의 경우, 완전 이진 트리가 나을 것이다. 삽입 삭제는 링크드 리스트를 이용하는 것이 좋을 것이다.
























