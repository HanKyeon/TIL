
클라-서버 구조: request와 response를 주고 받는 구조.

- MVC 소프트웨어 디자인 패턴
Model : 데이터와 관련된 로직을 관리
view : 레이아웃과 화면을 처리
controller : 명령을 model과 view 부분으로 연결.

- MTV :
Model : model. 데이터 관련
Templates : view. 화면 관련
Views : controller. Model&template 중간 처리 및 응답 반환

request -> url -> view -> model, template -> http response

django-admin startprojrect 프로젝트명 . - 프로젝트 명에 하이픈 및 사용중인 키워드 금지. 닷을 붙이지 않으면 새 디렉토리 만들어서 함.
python manage.py startapp 앱이름
앱 생성 이후 INSTALLED_APPS에 추가해주기. 로컬 서드파티 기본 순서로 넣자. 반드시 앱 생성이 먼저.
python manage.py runserver

django는 url view template 순서로 흐른다.

view는 http request를 수신하고 http response를 반환하는 함수를 작성한다. 응답 서식은 template에 맡긴다.
render(request, template_name, context)
템플릿은 샌드위치 구조로 하여 'articles/templates.html' 이런 식으로 한다.

django template language : 장고 템플릿에서 사용하는 빌트인 템플릿 시스템. 실제 많이쓰진 않지만 시험에 나올 것이다. 파이썬 코드로 실행되는 것이 아니다. 프로그래밍 구조를 사용 할 수 있지만, 프로그래밍적 로직을 표현하는 것이 아니다.

variable : 변수는 {{}}로 표현. 닷.을 이용해 변수에 접근 가능. 변수는 render하면서 날린 context에 들어있는 키 값으로 부를 수 있다.
filter : {{변수|필터}} 이런 형태로 사용 가능. 변수를 모두 소문자 출력이라던가 등등.
tags : 태그. {{% 태그 %}}로 표현. if/endif 등 24개의 빌트인 템플릿 태그가 있다.
comments : 주석이다. {% comment %}{% endcomment %} 혹은 {# {{변수}} #} 이런식으로 사용.

템플릿 상속.
- 재사용성.
- base.html을 상속받는 것.
- extends와 block을 사용한다.
- extends는 최상단에 작성되어야 하고, 유일하다.
- block은 overriden 할 수 있는 블록을 base.html에서 재정의 해주는 것이다.
또한, base.html을 사용하기 위해서는 제일 바깥쪽에 templates 폴더를 만들고 그 안에 base.html을 만들어야 한다.
또한, settings에서 DIRS에 BASE_IR / 'templates', 를 넣어줘야 한다.

form.

action : 입력 데이터가 전송 될 url을 지정하는 것. url태그를 이용하여 articles:index 이렇게 보내준다. 미지정시 자기 자신.
method : GET POST 등 어떻게 보낼지 정의. GET 방식은 쿼리 형식으로 데이터를 전달한다.

input 요소 : type에 따라 동작 방식이 달라진다. 데이터를 입력받기 위한 것. 핵심 속성으로는 name id 등이 있따.

이 때, name 속성의 경우, form를 통해 데이터를 submit 했을 때, 해당 값은 서버로 전송되고, name 속성에 설정된 값을 통해 접근이 가능하다. request.변수로.

HTTP : 리소스들을 가져올 수 있도록 해주는 프로토콜. 규칙. 웹 상 데이터 교환의 기초. 주어진 리소스가 수행 할 원하는 작업을 나타내는 request methods를 정의. GET POST PUT DELETE 등등.

GET 메소드는 데이터를 가져 올 때만 사용해야 한다. 데이터를 ㅅ ㅓ버에 전송 할 때 쿼리 스트링 인자를 통해 전송된다.

쿼리 스트링의 경우, ?key=val&key=val 이런 식으로 전송이 된다. 키밸류쌍.

보통 get 같은 경우, throw와 catch 쌍을 가진다.

어무해의 url.
어무해에서는 트레일링 슬래시를 붙여준다. 그래서 모든 주소가 /로 끝남.

variable routing :
 url 주소를 변수로 사용하는 것.
 url의 일부를 변수로 지정해서 view 함수의 인자로 넘길 수 있다. 즉, 변수 값에 따라 하나의 path에 여러 페잊 ㅣ연결 가능. APPNAAME 적기
 include를 통해 url 쉽게 관리.
 url 태그 이용.

어무해의 설꼐 철학 : 표현과 로직을 분리, 중복을 배제.

이름공간. articles:index 이런거다. 샌드위치 구조. 뷰에서도 articles/index.html로 연결해줘야 한다.

Model.

웹 앱의 데이터를 구조화하고 조작하기 위한 추상적인 계층, 모델을 제공한다.
체계화된 데이터의 모임.

스키마. 뼈대. 스트럭쳐. 데이터 베이스에서 자료의 구조, 표현 방법, 관계 등을 정의한 구조.
테이블. 필드와 레코드를 사용해 조직된 데이터 요소들의 집합. 관계라고도 부른다. 필드가 column 세로, 레코드가 튜플, 행row이다. 실제 데이터가 저장되는 것은 행, 레코드이다. 필드는 뼈다구다.
primary key pk : 아이디이다. 유니크한 값.

모델 클래스 하나가 테이블 하나이다.
models.Model을 상속 받아서 만든다. models.CharField 등 여러가지 필드로 테이블 스키마를 정의한다. id는 자동 생성. 클래스 상속 기반 형태의 어무해 프레임 워크 개발이다.

Migrations
python manage.py makemigrations
python manage.py migrate
: 모델을 작성 혹은 변경한 것에 기반한 새로운 마이그레이션을 만들 때 사용한다. 테이블을 만들기 위한 설계도.
위는 만드는 것이고, 아래는 적용하는 것.

마이그레이션을 해석하는 것이 ORM이다. Object Relational Mapping의 약자. 객체 관계 매핑. 어무해는 어무해 내장 ORM을 쓴다. 어무해랑 SQL간 번역기이다. 호환되지 않는 데이터를 변환하는 프로그래밍 기법이다. 생산성 면에서 이득이 크기에 사용한다. 세부적 조정이 어려운 등 단점이 있지만, 쾌적함이 더 중요.

필드 중 DateTimeField는 auto_now_add와 auto_add 두개의 차이를 알아야 한다. 전자는 생성 일자, 후자는 수정 일자.

외부 라이브러리 설치는 pip install ipython  / pip install django-extensions / pip freeze > requirements.txt 이런 시긍로.

어무해의 데이터 형태는 쿼리셋으로 받아온다. 그래서 쿼리셋 api를 통해 다룰 수 잇어야 한다.

만들어준 모델 클래스로  article = Article() 이런식으로 지정해서 변수를 바꾸고 save 메서드를 써도 된다.

모델의 서포터는 objects.이다. 여기서 all()을 통해 전체 조회,  get 을 통해 단일 데이터 조회, filter를 통해 조건을 만족하는 쿼리셋을 반환 받는 등이 가능하다.
삭제는 그냥 변수에 delete 호출하면 된다.

redirect. 바로 페이지로 넘겨준다.
from django.shortcuts import render, redirect

POST의 경우, csrf 토큰을 발급해야 가능하다. 없을 시 403 에러. 권한 없음.

DB에 영향을 미치는 것은 POST로 해야한다. csrf 토큰과 함께.

수정은 create와 마찬가지로 두개의 뷰가 필요한데, 추후에 get과 post 방식을 통해 하나로 줄일 수 잇따.

어드민 계정 생성
python manage.py createsuperuser
어드민에 모델 클래스 등록하는 법. 모델의 레코드를 보기 위해서 admin.py에 등록을 해야한다.
아래처럼 추가하면 된다.
from .models import Article
admin.site.register(Article)

Form

forms.py에 ArticleForm class를 선언해야 한다.
from django import forms 하고
forms.Form을 상속 받는 폼 클래스.
모델파이 등에 저ㅏㅈㅇ해도 되지만 관리 쉽ㄱ ㅔ하기 위해 폼.파이에 저장해라.
모델에서 models.TextField() 등 하던걸 여기서도 하면 된다. forms.CharField 등등. 변수에 할당해준다.
그러면 views.파이에서 from .forms import ArticleForm을 넣고 new를 ArticleForm으로 바꿔준다.
폼 렌더링 옵션으로 as_p, as_ul as_tavle 등이 있다.
폼 필드를 통해 유효성 검사를 할 수 있다.
위젯은 출력 부분을 담당하며, 반드시 폼필드에 할당됨.

모델과 중복되는 부분이 많다.

이미 모델 클래스로 선언했는데, 이를 Form에 매핑하기 ㅜ이해 폼클래스를 재정의해야 했다.
모델폼을 사용하면 이런 폼을 더 쉽게 작성이 가능하다.

ModelForm Class : 모델을 통해 폼 클래스를 만드는 것.

forms에서 같이 상속을 받으나, forms.ModelForm 을 상속 받아서 만들어준다.
내부 class로 Meta를 선언하여 model = Article 로 설정해주어야 한ㄷ.ㅏ

Meta는 포델 폼의 정보를 작성하는 곳이다. 모델 폼을 사용 할 경우 참조 할 모델이 있어야 하는데, 메타 클래스의 모델 속성이 이를 구성한다. 참조하는 모델에 정의된 필드 정보를 래그에 적용한ㄷ.ㅏ

fields를 '던더all'로 설정하면 모델의 모든 필드를 포함 할 수 있다. 필즈로 원하는 것만 설정
또한 exclude 속성을 이용하여 모델에 포함하지 않을 필드를 지정 할 수 있다.

is_valid를 통해 유효성 검사. 유효성 검사에 따라 return을 다르게 해주어 원하는 이동을 구현한다.

form에는 errors 속성이 있다. 유효성 검증을 실패 했을 때, 사용자에게 그 사유를 알려줄 수 있다.
모델폼의 인자 중 instance는 수정 대상이 되는 객체이다.

Form과 ModelForm 차이

1. Form
 - 사용자의 입력을 필요로하며, 직접 입력 데이터가 DB 저장에 사용되지 않거나, 일부 데이터만 활용 될 때(ex 로그인. 인증 과정에서만 사용 후 별도로 DB에 저장하지 않는다.)

2. ModelForm
 - 사용자의 입력을 필요로하며, 입력 받은 데이터를 그대로 DB 필드에 맞춰서 저장 할 때.
 - 데이터의 유효성 검사가 끝나면 데이터를 각각 어떤 레코드에 매핑해야 할 지 미리 알고 있기 때문에 save 호출이 즉시 가능하다.

HTTP request 처리에 따른 뷰 함수의 구조를 바꿔줄 수 있다.

요청에 따라 new와 edit, create와 update가 달라지기에 하나의 view 함수로 처리가 가능하다.
request.method가 POST면 예외처리 해준다. 또한, form = ArticleForm(request.POST) # 포스트로 온 데이터를 받아서 만드는데, 그 form.is_valid 폼이 유효한지 확인 한 뒤, 저장하고, article.pk 를 통해 detail로 이동해준다. 등등.

edit 같은 경우, 그 정보를 입력받은 정보로 업데이트를 해주어야 하므로, POST로 받은 data와 instance를 받아서 이어준다.

삭제 같은 경우도 마찬가지로 POST 요청만 삭제가 되도록 해준다.

데코레이터를 이용해 함수를 단단하게 만들 수 잇다.

from django.views.decorators.http import require_http_methods, require_POST, require_safe
POST는 포스트만, safe는 GET만. GET이 따로 있지만 그래도 safe 써라. http_methods([POST gET])을 ㅗ여러개 가능.

어무해 래그 class : django 프로젝트의 주ㅛㅇ 유효성 검사 도구이다. 공격 및 데이터 손상에 대한 중요한 방어 수단이며, 유효성 검사에 대해 개발자에게 강력한 편의를 제공한다.
또한, HTTP requests 의 method에 따라 views의 구조가 변화하게 된다.

장고 인증과 권한 같은 경우, 장고가 도와준다.

기본적으로 settings.py에 있다. django.contrib.auth
어센티케이션 : 신원 확인.
어소라이제이션 : 권한 부여.

가장 먼저ㅡ accounts 앱을 만든 후에 User를 CustomUserModel로 대체해야 한다.
어무해가 기본적인 인증 시스템 및 여러가지 필드가 포함된 유저 모델을 제공해준다.
대부분의 개발 환경에서 User Model 을 Custom User model로 대체한다.

AUTH_USER_MODEL 설정 값을 오버라이드 해야한다.
AUTH_USER_MODEL = 'auth.User' 기본 설정인데
AUTH_USER_MODEL = 'accounts.User' 커스텀 설정으로 해준다

커스텀 유저 모델로 대체하는 방법은 accounts의 models.py에 유저 클래스를 만든다.
그 뒤 django.contrib.auth.models import AbstractUser를 상속 받아서 만든다.
즉 class User(AbstractUser): pass 이런 식이다.
또한 admin.py에 커스텀 유저 모델을 등록해야 한다.

from django.contrib import admin
from django.contrib.auth.admin import UserAdmin
from .models import User
admin.site.register(User, UserAdmin)

DB 삭제 방법 : 넘버링 된 마이그레이션 삭제, db.sqlite3 삭제, 다시 마이그레이션 진행. 이닛이나 그런거 안지운다.

HTTP : 하이퍼 텍스트 트랜스퍼 프로토콜
규약이다. WWW에서 이뤄지는 모든 데이터 교환의 기초이다. 클라서버 프로토콜이라고 한다.

-비 연결 지향. 서버는 요청에 대한 응답을 보낸 후 연결을 끊는다.
-무상태. 통신이 끝나는 순간부터 상태 정보가 유지되지 않는다. 클라와 서버가 주고 받는 메시지들은 서로 완전히 독립적이다.

로그인 상태를 유지하는 것은 쿠키와 세션 덕이다.
HTTP쿠키는 상태가 있는 세션을 만들도록 해준다. 쿠키를 서버에 재요청하며 함께 보내, 서버에서 판단하여 권한처리 등을 하여 리스폰스를 보내준다.

쿠키 사용 목적
1. 세션 관리 : 로그인, 아이디 자동완성, 공지 할 ㅜ안보기, 팝업 체크, ㅈ아바구니 등
2. 개인화 : 사용자 선호, 테마 등의 설정
3. 트래킹 : 사용자 행동 기록 및 분석

세션은 사이트와 특정 브라우저 사이의 상태를 유지시키는 것.
쿠키가 조금 더 큰 개념이다.

쿠키 수명 : 세션 쿠키는 현재 세션이 종료되면 삭제된다. 브라우저 종료 등. 근데 persistent cookies는 지정된 기간동안 보관이 된다.

AuthenticationForm 어센티케이션 폼.
로그인을 위한 빌트인 폼. 로그인 하고자 하는 사용자의 정보를 입력받는 폼이다. 유저네임과 패스워드를 받아 데이터 유효성을 검증한다. request를 첫번째 인자로 받는다.
login() 함수. login(request, user, backend=None) 기본 상태. httprequest객체와 user 객체가 필요하다. 다 맞앗을 때 실행해준다.
from django.contrib.auth import login as auth_login 이런식으로 만들어준다.
이 때 인자로 받는 user는 직접 참조하지 않고, get_user() 함수를 통해 로그인 한 사용자 객체를 반환.
개발자 도구를 이용해 쿠키 관련 정보 얻을 수 있다.
템플릿에서 유저 데이터를 바로 갖다 쓸 수 있느 ㄴ이유는 컨텍스트 프로세서 설정값 덕이다. 기본적으로 부를 수 있는 것들. request, auth 등.

로그아웃
세션을 지우는 과정이다.
logout(request)
리퀘스트 객체를 인자로 받고, 반환 값이 없다. 두가지 일을 한다.
1. 현재 요청에 대한 세션 데이터를 디비에서 삭제.
2. 클라이언트 쿠키에서도 세션아이디 삭제

UserCreationForm 을 이용해 회원가입을 만들 수 있다.
username, password1, password2 필드를 가진다.
UserCreationForm이 우리가 대체한 커스텀 유저 모델이 아닌 기존 유저모델로 작성된 클래스라서 처음 부르면 에러가 뜬다. 따라서 폼.파이에서 메타에 설정된 갑을 바꿔준다.
어센티케이션폼, 셋패스워드폼, 패스워드체인지폼, 어드민패스워드체인지폼 네가지는 커스텀 안해도 된다.
UserCreationForm과 UserChangeForm 두가지만 class Meta: model = User가 등록된 form이기 때문에, 반드시 커스텀 확장해야한다.

from django.contrib.auth.forms import UserChangeForm UserCreationForm
class CustomUserCreationForm(UserCreationForm):
    class Meta(UserCreationForm.Meta):
        model = get_user_model()
class CustomUserChangeForm(UserChangeForm):
    class Meta(UserChangeForm.Meta):
        model = get_user_model()

get_user_model() 함수는 현재 사용중인 User 모델 객체를 반환하는 함수이다. 간접 참좌.

회원 탈퇴는 DB에서 유저를 지우는 것. 탈퇴 후 로그아웃이다. 순서 중요. 로그아웃하면 요청 객체 정보가 사라져서 지울 수 없다. 가진 정보를 먼저 지웠으므로 지우려는 정보를 알 수 없다.

- update_session_auth_hash(request, user)
암호 변경 이후 세션 유지하기 : 현재 요청과 새 세션 데이터가 파생 될 업데이트 된 사용자 객체를 가져오고, 세션 데이터를 적절하게 업데이트 해주면 된다. 암호가 변경되어도 로그아웃 되지 않도록 세션을 업데이트 해준다.
return redirect 하기 직전에 업세어해 해주면 된다. 업데이트 세션 어스 해쉬. 마찬가지로 contrib.auth에서 임포트.

is_authenticated 속성과 login_required decorater 두가지 방법으로 로그인 사용자에 대한 접근을 제한 할 수 잇다.

is_authenticated는 권한과 관계 없이, 오직 사용자의 상태가 활성이냐 유효한 세션이냐도 신경 안쓴다. 그냥 인증 여부만 알 수 있는 방법이다. 모든 유저 인스턴스에 대해 항상 트루이다. 어나니머스는 항상 fAlse.

템플릿에서 {% if request.user.is_authenticated %} 이런식으로 제한을 걸어서 보이는 것을 제한 할 수 있다.
views.py에서는 if request.user.is_authenticated: 이런식으로 걸 수 있다. 함수아님주의

login_required 데코레이터. 사용자가 로그인되어 있으면 정상적으로 view에 잇는 함수 실행하고, 로그인되어있지 않다면, settings.py의 LOGIN_URL 문자열 주소로 redirect해준다.

이 때 로그인 성공 했을 때, redirect해줄 경로를 next 쿼리에 저장시켜준다.
이 next를 따로 처리해주어야 그 주소로 이동하게 되고, 안해주면 view에서 설정한 리다이렉트로 이동한다.
단축 평가를 이용해서 return redirect(request.GET.get('next') or 'articles:index') 이런식으로 할 수 있다.

next 쿼리 스트링 인자 주의사항 : 로그인 템플릿에서 폼 액션이 작성되어 있다면 동작하지 않는다. action은 url로 이동 시켜주므로.

이 때, 두 데코레이터로 인해 발생하는 구조적 문제가 있다.

삭제 처리를 할 때, @login_required로 인해 로그인 페이지로 리다이렉트하게 되고, 리다이렉트한 로그인 페이지에서 로그인을 진행한다. 근ㄷㅔ 이 때 delete view 함수의 require_POST로 인해서 next로 이동이 되지 않아 에러가 발생한다.

두가지 문제가 발생한 것이다.
1. redirect 괒어에서 POST 요청 데이터의 손실
2. redirect로 인한 요청은 GET 요청 메서드로만 요청이 된다.
그래서 POST를 받는 delete 같은 경우 에러가 발생한다.
해결 방안으로는, 로그인을 요구하느 ㄴ데코레이터인 @login_required 역할을 view 함수 내에서 사용해야 하ㅣㄴ다.
if request.user.is_authenticated:
    article = Article.objects.get(pk=pk)
    article.delete()
return redirect('articles:index')
이런 식으로.




















월요일 전 범위. 피피티 두개 잘 보면 된다.

form / modelform
데코레이터 그래도 한 번 봐라.
어센티케이션 교재 잘 봐라.

- 스타트 프로젝트, ORM 기반 CRUD. 로직을 짜면서 URL에는 뭐가 들어가고 앱네임, 패스가 있고 패스 네임 등 뭐시기가 들어가는지

- form와 modelform의 차이와 언제 쓰는건지

- httprequest에 따라서 어떤 방법이 있는지 get post일때 어떻게 받는지 등
- 뷰 데코레이터. 데코레이터를 언제 쓰는지. 데코레이터를 쓰면 어떤 제한이 걸리는지? 어떤 로직이 변화하는지.

- form field 등은 외울 필요 없다고 생각한다. 외울 필요 없고 짤 수 있을 필요가 없다. 해석만 하면 된다.

나머지는 턱별히 어려운거는 없을듯

- 인덱스. 쿠키와 세션이 무엇인지, 왜 나왔는지.

- 유저는 빌트인 모델과 커스텀 유저모델을 쓸 때 뭐가 다른지. 달라지는 이유.

- admin 어떻게 쓰는 이유 / 어드민 어떻게 쓰는지. 어드민에 등록하지 않으면 안되므로 등록하는 방법도 알아야 한다.

- 빌트인 폼 이용하는게 꽤 길게 나오는데, 로그인 로그아웃 열심히 봐라. 어떻게 사용하는지 체크.컨텍스트프로세서 몰라도 되긴 하다. 굵직한 로직 사이로만 보면 된다

-- 25문제 언급함. --

- 나머지는 기본.  MTV가 뭔지. 모델이 뭔가 템플릿이 뭔가 뷰가 뭔가. 참고는 잘 안나온다.
- is_어센티케이티드 이걸 쓰면 어떤 차이가 있는건지 등은 알아야 한다. 매스 파라미터? 알면 좋은 듯 하다. 2번째 - ppt 열심히 봐라. 빌트인 폼 같은 경우 로그인 로그아웃 집중적으로 봐라.

25문제 이상 언급함.

단답3 서술2
대소문자 구분 / _언더바 확인 / 데코레이터는 @붙는거 확인