 매개변수 *args, **kwargs 매개변수가 몇개더라? 등

 : *args는 추가적인 인자. **kwargs는 가변 키워드 인자로, 키워드와 함께 넣어줘야 한다.

 *args는 애스터리스크, 언패킹 연산자를 붙여준다. 정해지지 않은 여러개의 인자를 처리하기 위해 사용된다. 여러개의 positional arguments를 처리하기 위해 사용된다. tuple로 묶여서 return 하면 시퀀스로 반환된다.

 **kwargs는 가변 키워드 인자로, 애스터리스크 두개로 사용한다. 몇개의 키워드 인자를 받을지 모르는 함수를 정의 할 때 유용하다. 가변 키워드 인자는 딕셔너리 형태로 묶여서 처리되며, 파라미터에 애스터리스크 2개를 붙여서 표현. keyword가 아니라 keyword인자이다 보니, key와 value를 쓸 때 key는 문자열로 쓰지 않는다. 추가적인 인자들은 if kwargs ; 같이 트루시 값을 이용하여 선택 처리 할 수도 있다.


 딕셔너리 값에 대한 접근 방법 두가지.

 : dict[key], dict.get(key)

 트루시 폴시

 : 값이 있다면 truthy, 값이 없다면 falsy. None 0 False [] "" 등. False는 아니지만 False로 취급되는 것들, True는 아니지만 True로 취급되는 것들.

 


각 자료형의 특징. 반복가능/변경가능

 : list(시퀀스, mutable, iterable), tuple(시퀀스, iterable, immutable), range(시퀀스, iterable, immutable), st(비시퀀스, mutable), dictionary(비시퀀스, mutable)
 str은 변경 불가능한 값이다.



객체와 인스턴스 생성자와 속성,메서드

 : class는 자료형을 만드는 것이라고 보면 편하다. 일종의 형태를 만들어 놓고 해당 형태를 복사하여 가져온다는 점에서 유사하다. 객체는 class로 만들어진 오브젝트이고, class를 통해 만들어져 메모리에 올라간 객체를 class의 인스턴스라고 한다.
class에 있는 attribute와 method(함수)들은 이제 인스턴스와 클래스 등에서 접근이 가능하며 .닷을 이용해 사용이 가능하다.



할당 얕복 깊복 실제 리스트가 복사되는지 뭐가 복사되는지

 : 할당은 메모리 주소를 가르키게 되는 것이다. 얕은 복사의 경우, iterable하면서 mutable한 값을 복사 할 때 side effect가 생긴다. 예를 들어 iterable에 iterable이 들어가 있는 자료를 복사하는 경우, 새로운 주소에 같은 값을 담아내지만, 담아낸 같은 값은 값을 새로 담는 것이 아닌 주소를 새로 담는 것이므로, 내부 iterable에 대해서는 완전한 복사가 이뤄지지 않는다.


여러가지 연산 모듈러

 : 논리연산자 우선순위는 not and or 순서
