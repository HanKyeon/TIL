
# 20230105

meta dev blog WebRTC 사용 블로그 : https://engineering.fb.com/2020/12/21/video-engineering/rsys/

리모트 몬스터 블로그 글 : https://calmglow.medium.com/clubhouse-ch-%EC%9D%98-%EC%8A%A4%ED%8A%B8%EB%A6%AC%EB%B0%8D-%EA%B8%B0%EC%88%A0-%EB%B6%84%EC%84%9D-bb37089d3817

## 프로젝트 기획 시 유의점

아이디어 회의. 회사에서야 주는대로 하는데 여기는 아니다. WebRTC가 메인이 아닌 서브로 들어가도 되나?

- 일반적인 아이디어 도출 vs 싸피의 아이디어 도출
- 일반적으로 프로젝트 최고 상급자 등의 IDEA나 결재가 난 의견을 가지고 프로젝트를 수행. 혹은, 프로젝트 수주를 통해 고객의 요청에 의한 프로젝트 개발 건을 가지고 프롲게트 수행. 명확한 목표가 정해진 상태로 프로젝트를 시작한다.
- 즉, 일반적인 경우 세부적인 것을 제외하고는 다 정해져 있다.

- 창의적인 아이디어 도출
- 기존엔 경험해 보진 못했고, 있음녀 좋을 것 같은데, 우리가 만들 수 있을 수준의 창의적인 것. 하지만 생각한 대부분의 플젝은 시중에 나와있는 경우가 많다. 동등한 위치에서 회의를 진행하다보니 결정권자가 없다. 즉, 회의 시간이 길어질 수 있다. 결정권자가 있는 것이 좋다.

- 팁 : 명세서를 기반으로 하여 프로젝트 큰 틀을 구체화. 인사이트를 많이 얻어라.
- 회의 시 항상 회의 시간을 정해두고 할 것, 또한 일정 기한도 연장하지 말 것. 기한을 정하는 것은 중요하다.
- 너무 새로운 것에 집착하지 말고, 기존 프로젝트를 개선하는 방향도 고려해 볼 것.
- 팀장님의 권한 업업. 시간 통제, 의사 결정 방향 등의 정리/결정 단계.

- 아이디어 들고 가면 컨설턴트 님들이 빠꾸 칠 수 있다.
- 구현 가능성과 기술력이 중요하다. 웹 RTC의 경우 CPaas를 생각하다.
- 주어진 시간은 6주이다. 기억하자.

- 프로제긑 규모 같은 경우, 잘 모를 수 있다. 그렇기에 명세서를 보고 여러분들의 기술 스택을 고민해야 한다.
- 프로젝트의 핵심 기능을 명확하게 도출 할 것. 개발 시 핵심 부분이 우선시 되어야 한다.
- 시간은 부족할 것이다. 100%. 핵심 외 부가 기능 중에서 필요 없는 것을 버리는 과감함이 요구된다.

- 웹 기술의 경우, WebRTC의 경우 화면이 가장 늦게 들어가는데, 그러면 안된다.
- 우선 순위를 나눠야 한다. 핵심 기능과 기본 기능 개발. 이후 추가 기능, 이후 심화 기능을 해야한다.
- 즉, 핵심 기능, 기본 기능, 추가 기능 이런 식으로 우선 순위를 나눠야 한다.

- 어느 정도 규모의 프로젝트가 완성되는지 싸피 출신 개발자는 알고 있따. 이미 소문 나있으니까 더 열심히 해야한다.
- 자료의 판단 근거. 판단과 행동의 근거가 필요하다.
- 가장 중요한 부분에 대한 아이디어 기획에 대한 구체화를 잘 해야 한다. 사이트가 활성화 된 이후의 부분에 대한 고민이 필요.
- 유저들의 부정적인 면, 인사이트 등이 부족하다. 행복회로 굴린다는 뜻.
- **최초 유저를 끌어들이는 방법** 또는 다양한 유저가 관심 있어 할 기능에 대한 고민이 필요.
- 여러 이해 관계사들의 시야에서 바라보아야 한다. 해당 서비스의 관리자, 개발자, 소비자, 유저 등을 다 생각해야 한다.

- 유저가 사용하는 이유 : 돈 / 패러다임. 이런 부분은 상의하면서 다듬어나가면 된다.

- 포괄적인 기능을 가지고 있는 것들은 개발하기 어렵다.
- 카테고라이징도 시간이 부족하다. 명확한 주제가 있는 프로젝트를 하는 것이 개발 범위와 일정을 맞출 수 있다.
- 그래도 이해가 안되면 6주 내로 Notion보다 좋은 블로그를 만들 수 있는지 고민한다. 요즘 블로그는 노션이다.
- 집중된 주제로 가는 것이 좋을듯.
- 브레인 스토밍 중요도 없음.
- 핵심 기능을 잘 생각해야 한다. 핵심을 가져 왔을 때, 세분화가 좋다.

- 프로젝트 핵심은 무엇인가 ?
- IT 교육은? SSAFY

- 장점은 무엇인가? 

- 두 낫 파이트.

- 아이디어가 최고가 아닐 수 있다. 열심히 해라.

-------------------------------

웹디자인 튜플리. 재밌는거 공유하고 싶음. 유튜브+플레이리스트 TUPLI.

채팅도 구현. 피벗회전도 구현 ㄷㄷ;
취향 분석도 함 ㄷㄷ 뱃지도 줌
- 사용자 경험 중심의 실제 서비스 제작 경험.
- SNS적 요소 + 취향 분석 기반 게시물. 코싸인 유사도 등의 알고리즘 사용, 기술적 특징으로 삼을 수 있었다.
- 플레이룸 : 실시간으로 플리 등록 이후 어디서나 영상 동시 시청 및 채팅 및 이모티콘 소통 가능한 기능.

- 기획 단계를 우습게 보지 말자. => 스토리보드, 와이어 프레임, 시퀀스 다이어그램 등
- 기능, 기술적으로 부족 할 때 힘들다. => 우선순위 기반 테이블 잓어 및 기능 명세서 작성
- 우선 순위 잘 정하자. 기능 명세서를 우선순위 중심으로 나열. => 데일리 스크럼, 회의록, 라이브러리 버전 체크, deprecated 체크.
- 너무 믿지 말자. 사람도 기술도. => 

- 기능적 차별점은 sns와 영상공유를 통합.
- 지속적으로 서비스가 어떻게 진행되었는지 기술서를 작성.
- 명세서 기반.

- 깃헙에 튜플리 검색 시 기술서와 설계도 구경 가능.
- 명세서가 모바일 웹 기반이어서 모바일 웹으로 만들었다.

------------------------

웹 기술. 집에서 운동 중

- 집에서도 친구들과 운동 할 수 있는 것
- 사용자 어떤 운동을 하는지 분석
- 운동 횟수를 카운트.
- 솔플이 아닌, 다른 참여자들이 운동하는 것을 확인 할 수 있다.

- 차별점을 2가지 법칙으로 만들었나? 21일의 법칙, 66일의 법칙. 익숙해지는데 3주, 두달은 습관
- 그룹원들과 운동 할 수 있는 운동 그룹, 그룹원들이 운동 루틴 기능 제공.
- 운동 한 만큼 두가지 법칙을 통해 뱃지 등 제시.

- 구체적인 설계.

- 7주 짧다 짜식들아
- 막주에 테스트랑 발표 해야 하니 실지리 5주다.
- 갈등 최소화.
- 운동 행위 인식 : 티쳐블 머신 사용. 티쳐블 머신으로 운동 행위 기록, 웹RTC에 저장, 카운트 할 수 있도록 기록. 대전에서는 당시에 기구의 IoT를 이용해 하는지 한듯?
- 공통 프로젝트 대전에서 한 것
- 모션을 따서 수화를 교육하는 서비스가 있었다.

티쳐블 머신에 모션 / 오디오 / 영상 인식 존재.

핵심 기능
1. 로그인
2. WebRTC를 이용한 화상 채팅. 채팅과 화상.
3. 그룹 비디오 컨퍼런스.



# JIRA 및 JQL 활용

## index
1. Why JIRA?
2. How JIRA & JQL ?

## Why JIRA?

### 1. Issue Tracking (Project Management)
- Issue란 : 투 두 리스트를 여러명의 팀원들이 모여 하나의 Todo를 관리하면 Issue라고 한다. 티켓? 이라고 부를 수도 있다. 이슈를 많이 쓴다.
- Tracking이란 : 이슈의 상태를 추적 할 수 있다. 해당 이슈의 상태가 어떻고, 이 이슈가 어떤 값들을 가지고 있고, 언제 관리를 할 수 있는지 등 알 수 있음. SW 개발을 하며 팀원들이 어떤 일을 할 지 공유하고 트래킹의 필요성이 존재.
- 많은 Issue Tracking Tools가 있지만, 우린 Jira 쓴다. 점유율 최고~ 서비스 괜춘~ 현업에서 자주 씀.

- **Project Management 측면의 강점.**
- 팀 활동을 하다보면 협업 등에서 팀장과 PM이 나뉘게 된다. 어떻게 잘 이끌고 잘 관리할지 보게 된다. PJT 현재 상황 등을 보며 소통도 해야하고 플래닝도 해야하고 난리 나기 때문에 한 눈에 볼 수 있도록 도와준다. 대시보드 혹은 차트 등을 통해 프로젝트를 관리하기 쉽게 visualizing을 해준다.

### 2. Agile

- 애자일 개발 선언. 개인과 상호작용, 작동하는 소프트웨어, 고객과의 협력, 변화에 대응 4가지를 메인으로 잡고 개발을 하자고 선언한 것. 그렇다고 공정과 도구, 포괄적인 문서, 계약 협상, 계획이 중요치 않다는것은 아님.
- Agile하게 개발을 한다는 표현이 맞다
- Scrum, Kanban
- 스크럼 : 백로그에 Issue들을 생성해서 쌓아두고, sprint를 생성하여 2주~3주 정도의 sprint. 해당 주기동안 팀이 무엇을 할 것인지 설정을 시켜두는 것이다. 백 로그를 적어두고 뭐를 할거다 하면 sprint에 할당하고 팀은 issue를 해결하는데 노력하고 배포하도록 한다. sprint를 생성하고 반복한다. 개인에게 WIP work in progress의 제한을 둬서 개인이 한 번에 많이 할 수 없게끔 해서 상태 관리를 하게끔 한다.
- 칸반 : 스프린트 개념은 없고, Todo / in progress / done 이런 식으로 관리한다.
- 물론 스크럼도 sprint에도 투 두 리스트가 있다.
- 스크럼은 개발이 계속 되는 경우, Kanban은 좀 긴 주기로 개발을 할 때 사용하게 된다.
- 두가지 보드를 편하게 사용이 가능하다.

- 스크럼 검색해보면 상태관리, 스토리 포인트, 스크럼 미팅 등 나온다.
- 스크럼 같은 경우, 보통은 매일 아침에 모여서 캐쥬얼하게 아이스 브레이킹 하고 오늘 할 일, 어제까지 끝낸 일, 지금 하고 있는 일 등에 대해 공유.
- 지라에서는 상태 보드를 제공하기에 사용이 편할 것이다.
- 번 다운 차트. => 이슈들이 sprint 동안 얼마나 빠르게 해결됐는지 보여주는 차트. 백 로그 라는게 벽난로에서 아직 안태운 장작이라는 중의적 의미로 burn down 차트가 나왔다. 남은 back log를 얼마나 빠르게ㅐ 해결했나 보여주는 차트이다.
- 싸피에서는 스크럼을 많이 쓰고, 기본적으로 만들어주는 보드도 스크럼 보드이다.


### 3. DevOps

- 애자일이랑 비슷. 변화하는 소프트웨어에 집중.
- Development와 operations의 합성어.
- 사일로 현상이 나타나게 된다. Silo. 내 곳간만 지키겠다는 느낌. 조직 간 이기주의
- 계획 코드 빌드 테스트 릴리즈 배포 오퍼레이트 모니터링 등 DevOps 검색하면 나온다.

- 조건 대표 3가지.
1. 반복적인 작업들을 Tool을 이용해서 자동화. ex) 빌드, 테스트, 릴리즈, 배포 같은 경우 test 자동화 배포 자동화 빌드 자동화 등 가능.
2. 팀원 모두가 알고 있는 하나의 공유된 지표가 필요. real time communication. 자동화가 중요한 것이 아니라 실시간 소통이 중요하다. 그래야 개발이 빠르다.
3. 장애나 이슈가 있을 때 혼자만 알지 말고 팀원들과 공유 필요.

- 아래 두가지는 JIRA로 해결 가능.
- DevOps가 나온 이후 도와주는 Tool이 굉장히 많다. 아틀라시안에서 어떤 툴로 가능하다 라고 홍보하는데, JIRA가 거의 매 단계마다 있다.
- 지라 서비스 데스트, 지라 코어 등 있다. issue 같은 경우, 개발자 뿐만 아니라 여러 이슈가 있지만 SW 개발을 위해 사용 할 것이다.


### 4. SRE 사이트 신뢰성 엔지니어링 Site Reliability Engineering.
- 구글 NEXT에서 SRE 라는 얼마 안나온 개념을 뱉어냈다.
- 장애가 나지 않기 위한 지표, 자원 플래닝 등.
- 장애를 없애기 위해 노력한다. 정도.....
- 자주 배포하고 자주 변화하고.. SW가 워낙 많다보니 살아남으려면 선점하고 빨리 해야 한다. 그래서 배포를 빠르게 하고 있다.


- 이슈 만드는 법 이슈를 만든다.
- JIRA는 지라의 서버 버전이 있었다. 서버에 설치되어서 서비스 되도록.
- 지라읰 클라우드 버전 SaaS 버전.

- 이슈를 생성 할 때 

- 이슈 생성 컨벤션도 있으면 좋다.

- 이슈 제목, Task의 type, sub task의 타입.
- Epic 같은 경우, 큰 틀이다.
- 에픽을 하나 만들고 에픽과 관련된 이슈를 만드는 용도이다.
- 에픽 아래 Task 밑에 sub Task 형태
- 이슈를 잘 나누면 Task가 없을 수 있다. Task를 여러명이서 나눠야 할 경우가 있는 경우이다.

- 여기서 지원하는 issue의 상태는 Todo, in progress, done 3가지가 기본.
- 처음에는 개요 Summary가 나오고 뭐시기저시기 된다.

- 컴포넌트도 있다.
- 컴포넌트 메뉴에서 생성이 가능.
- 팀에서 정하기 나름.
- 예시로 UX 인프라 등으로 역할을 나누는 것 같다.
- component의 이름, 설명, 리더, 담당자 등 설정 가능.
- Epic과 비슷하게 기능을 카테고리로 묶는 개념이라 보면 될 것이다.
- Epic 같은 것의 설명 가능, 생성한 사람도 설정 가능
- Fix 같은 경우 release 버전, 실제 버전 등을 명시 가능, 담당자 설정 가능
- Priority라고 우선도를 할 수 있다
- Label로 라벨링 가능. 컴포넌트처럼 필터링이 가능하게 만드는듯. 자율 형태로 만들 수 있다. 대소문자 구분하기에 라벨 잘못 적으면 다르게 분류 될 수 있다.
- 에픽 링크, Sprint 등 어디에 할당 할 지 issue를 만들 때 지정이 가능하다.

에픽은 Task Stoty Bug 등이 있을 것이다.
- Story는 유저 스토리라 이해하면 된다. 사용자가 어떤 행위를 했을 때 어떤 식으로 동작한다. 라는 것.
- Task는 처리를 해야하는거?
- 스토리도 task와 비슷하고, 버그는 약간 다르ㅏㄷ.
- 버그는 fix v와 appected v가 있다. 이 버그가 영향 받는 버전을 말한다.
- ex) 1버전에서 발생 시 1.0 적고 1.1에 fix 예정이면 1.1에 fix 적어준다.

- releases에서 버전 관리 가능.
- Releases에서 버전을 등록하고 무슨 일을 할 것인지 기록 가능.

### JQL
- 이슈를 어떻게 가공하고, 재사용 할 것인가? 의 전제 조건이 이슈 검색을 잘 할 수 있어야 한다.
- SQL과 비슷한 문법. 지라 쿼리 랭귀지.
- 지라 필드들을 구조적으로 검색하기 위해 사용. 지라만의 예약어들 제공.
- Basic Query와 Advanced Query. 베이직은 gui 어드밴스드는 cli 같은 느낌인듯?
- 클라우등세ㅓ JQL 쓰면 advanced query라고 보면 된다.
- Operators는 = != > >= 사용 가능, in, not in 사용 가능, ~(Contains), !~ (not contains) 포함 여부, is empty, is not empty, is not null, is null 등 가능. 엠티나 null은 거의 비슷.
- AND OR NOT EMPTY NULL  ORDER BY 다 가능.

- 예시로 유저 가입 Epic, 서버 세팅 Epic 등으로 나눌 수 있다.
- `summary ~ 서버` 서버가 포함된 것 검색. 이런 식으로 사용 가능.

- 스니펫 제공. 구글링 하면 웬만한건 다 나온다.
- JQL의 편리한 점 : Relative Dates. Today, 1d -1d -1w 2w 등등
- `created`와 연계 가능. `updated`도 가능.
- endOfDay(), startOfDay(), endOfWeek() (토요일) startOfWeek() (일요일), endOfMonth(), startOfMonth(), endOfYear(), startOfYear(), currentUser() 와도 연계 가능.
- currentUser()의 경우 많이 쓰인다. 지금 로그인 한 사용자가 담당자다 이런 느낌. `updated > startOfDay()` 이런 식으로 사용.
- 월요일은 `startOfWeek(1d)` 이런 식으로 단위를 넣어서 사용.
- 지라는 알못이라 Resolution 필드가 resolved로 되어야 한다.

- 대시보드 커스텀 가능.
- 할당 된 이슈들 확인, 검색 등 가능.

- Agile Board. 많이 쓴다. JQL의 필터들을 이용한 것이다.

------------------

스프링 MySQL 도커 젠킨스 엔진엑스, 레디스, 오픈Vidu, 솔리디티, IPFS, 트러플, 그러챠? 등등 많이 써봤고 배포쪽 잘 한다.

- 코치의 역할 : 셰르파. 자기주도 학습. 프로젝트 기획, 완성 등.
- 질문 방법 : 맥락을 함께, 에러코드 및 캡쳐 함께 전달, 그래서 무엇을 검색/시도 해봤는지.
- 어떤 기능을 사용하고 싶은데 기간이 될지 등 어떤 기술을 써야 하는지 등. 코드 관여 x.
- 협업 / 자기주도 / 배포. git Jira 사용해라!

- EC2. 우분투를 통해 뭐를 하는지, 포트 및 네트워크 등에 대해 미리 공부해두면 좋다.

- 두분 다 백엔드다....

- NFT
- 스태시 나이트? 별자리 관련 게임.
- IoT 관련 임베디드 관련 논문도 게재해보았다.
- 7주는 짧기에 깃과 지라를 잘 이용해라.
- 3팀장 3발표

# 아이디어 회의 할 때, 주제를 정하기 위한 기준을 공유해서 진행하면 좋을 것 같다.


PM

- Time, Cost, Quality, Scope, Resource, Procurement, Risk, Communication 등의 Management에서 우선 순위를 잡는다.

- WBS 초안.

- 프로젝트 일정 위협 3대 요인. 학생 증후군, 파킨슨 법칙, 멀티태스킹.
- 학생 증후군의 경우 벼락치기 하듯이 하는 것. 효율적이지 못하다.
- 파킨슨 법칙은 집중해서 계획을 세우고 집중해서 설계하면 쉽게 가능한데, 집중을 안하다보니 시행착오를 겪게 되는 것. 학생 증후군과 연결되어 있는 요인이다.
- 멀티태스킹은 이름 그대로 여러 Task를 짊어지려 해서 나타나는 side effect인듯.

- 프로젝트 일정을 계획 할 때, 마일스톤+마이크로스톤을 세워라.










