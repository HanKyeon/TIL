
# 20230103

오.. 노트북 페이지 업다운 있는거 굉장히 좋네. 홈/엔드도 보유중. 단지 가끔 비행기 돌아가네

포트폴리오를 얻어 갈 수 있다. 2학기의 스토리가 될 것이고, 프로젝트를 성공해야 한다. 새 기술 스택, 개발자로써의 레벨업 등을 해야한다.

### 직접 찾아서 한다는 것은 배워서 하는 것과는 다르다.

- 2학기에서는 다양한 경험을 할 수 있다. 코치 컨설턴트 팀 등 매번 바뀌면서 경험을 하며 다양한 역할을 맡아보고 발표해보며 간접 경험 역시 할 수 있으므로 시야를 넓히고 기술을 넓혀가는 것이 좋다.
- 결국 프로젝트를 하면서 자기주도 학습을 해야 한다.
- 엔지니어는 끝없이 새로운 기술을 익혀야 한다. 트렌드는 끊임없이 바뀌고, 스스로 자기주도 학습을 할 수 있어야 한다.
- 자기주도학습을 통해 스스로 공부 할 수 있는 힘을 기르자는 것이 좋을 것 같다.
- 찾아서 해볼 수 있는 경험.
- 키워드는 자기주도학습이다. 알아서 해라는 아니고, 어려우면 물어봐라.
- 1학기 컨설턴트와 다르다. 방향성을 제시 할 뿐이고, 항해사는 너다.
- 방향성을 얘기 할 것이다. 콕 찝어서 시키진 않고 방향을 제시 할 것이다.
- 고민을 함께 하고 추천하는 역할인 듯 하다.
- 컨설턴트님과 코치분 활용을 잘 하자.

## 공통 프로젝트
- 생각보다 규모가 작지 않다.
- 6명이 6주간 하는 규모는 절대 작지 않다. 너네 탓이다. 생각해낸건 대부분 가능하다.
- 모든 역할을 해볼 수 있다는 것은 강점이다.
- 할 거면 제대로 하자.
- 소스를 복붙 할 것이냐. 구현 할 때 이해 하면서 하는 것이 중요하다.
- 고민 없는 복붙 멈춰! 개발자로써의 렙업이 중요한 시기이니만큼 깊이있게 공부하면 좋겠다.

### 고민 할 지점
- CS 공부 : 플젝만 해서는 안된다.
- 코테 준비, 이력서 준비, 면접 준비 등 하루만에 되는 것이 아니므로 목표한 것이 있담녀 잊지 말고 공부해야 한다.
- 기출을 알면서 안하는 것은 죄다! 별개로 스스로에게 투자해라!

- 개발 환경 : 집에도 세팅해라. 집 랩톱에서도 개발 할 수 있도록 소스 관리 할 수 있도록.
- 포터블 사라.
- 환경 제약은 핑계다.

- 학습 곡선이 노력/시도의 반복을 버텨라.
- 특히 배포하고 서버를 이용 할 텐데, 그런 거에 포기하지 말고 열심히 해라.

- 에티켓, 매너 지키자.
- 첫 주를 어떻게 보내느냐가 Project의 성패를 가르게 된다.
- WebRTC를 이용한 화상채팅이 들어가야 함.
- TEAM 프로젝트이다. Team First, One Team.
- 공지, 특강 등 뭐가 많다. 개인 스케쥴까지 포함하면 정신 없으니 공지 확인 잘 하고 프로님들 공지 잘 들어라.

- 아이디어 해커톤 할 것이다. 시간이 생각보다 길지는 않기에 그게 꼭 필요한 것은 아니다.




- MVP를 정하고, 추가 기능을 우선 순위로 나누면 될 듯.
0. 회원가입 및 유효성 검사.
1. WebRTC를 이용한 화상 채팅.
 1-1. WebRTC 통신.
 1-2. 카메라 확인? 등등 3개의 서버에 미디어 서버를 운영해야 한다. 해당 부분.
2. 화상채팅 뿐만 아니라 일반적인 채팅.
3. 아이디어에 따른 추가적인 기능들.


---

1. 프론트 기술 스택
- create-react-app
- React (버전은 아마 가장 최신인 v18이지 않을까. flushSync 기능 관련 사용해보면 좋을 것 같다.)
- @reduxjs/toolkit v1.9.1
- react-router-dom@6 v6.6.1
- JSDoc 주석이므로 공통.
- redux-persist (공부해야 함. Redux를 세션과 로컬 스토리지에서 사용 할 수 있도록 도와주는 라이브러리.)
-----미정-----
- SEO 관련 도와주는 라이브러리 (있다면.)

2. 그라운드 룰
- 책임감 (지각, 맡은 것 등)
- 플젝 관련 피드백은 최대한 즉각적으로 하기. (어려울 경우 어렵다고 말하기)
- JSDoc 반드시 작성하기. (Docstring 반드시 하기)
- 공용으로 사용하는 파일에 업데이트가 있을 경우(ex: redux reducers... etc) 해당 파일 최대한 빠르게 커밋하기.
- 함수 네이밍 룰

3. 깃 플로우
- 정해갑시다.


---
1. Branch 전략
- main : 최종 배포
- develop : 개발 브랜치. 다음 출시 버전
- feature : 기능 개발
- release : 이번 출시 버전 준비
- hotfix : 출시 버전에서 발생한 버그를 수정하는 브랜치
main
ㄴ release
ㄴ fix
ㄴ develop
  ㄴ feature/front/기능명
  ㄴ feature/back/기능명

2. Commit Message Format
`<type> : <message> (#<issue number>)`
types  = {
    feat : 새로운 기능 커밋,
    fix : 버그 수정,
    build : 빌드 관련 파일 수정,
    chore : 자잘한 수정,
    ci : CI 관련 설정 수정,
    docs : 문서 수정,
    style : 코드 스타일 혹은 포맷 등,
    refactor : 코드 리팩토링,
    test : 테스트 코드 수정
}

---

기본
1. 팀명

2. 그라운드룰
- 독스트링.
- 데일리 스크럼
- 쉬는시간 끝나고 스트레칭 이후 시작.
- 설명 할 때 자세히 설명.
- 자기주도적 설명.

3. 역할

회의록
1. 아이템 논의
2. 확정 아이템
3. 프로젝트 상세 일정

산출물
1. 기획
2. 디자인
3. 개발


질문
1. Private 서비스? public 서비스? (기본 홈 접근 가능 여부)
2. 아이디어 : 방마다 실시간 QR을 생성하여 접근
3. 세션 인증? JWT 토큰 인증?
4. 프론트 : 리액트의 Element Plus? vuex => redux/toolkit

## 프론트 요구사항
1) 공통: 인증/토큰 관리.
- 로그인 및 토큰 발급 시 해당 토큰을 localstorage에 저장
- 페이지 진입 시 토큰O ? 해당 토큰을 통해 해당 유저의 정보를 받아오기 : 각 분류 별 비로그인 화면 표시.
- Axios 처리. 토큰이 존재 시 Authoriztion : Bearer 토큰 값 으로 헤더에 전송.
- Axios 응답 401 ? error 값 별 메시지 전송. 세션이 유효하지 않거나 토큰이 유효하지 않다. 로그아웃 처리.
- Axios 응답 403 ? error 값 별 메시지 전송. Forbidden 접근 권한이 없습니다. 로그아웃처리는 x
- 로그아웃 ? LocalStorage 토큰 삭제 이후 홈 메뉴로 페이지 리프레시.

2) 로딩 스피너.
- 로딩 띄워주기. vue3에서의 Element Plus에서 사용하나, React의 경우 다른 라이브러리를 사용하면 될 듯.
- 홈 / 방 목록 조회) 전체 조회, 검색, 정려르 방 상세 정보, 지난 회의 이력 등 로딩 스피너 적용.
- 입력의 유효성 체크 역시 표시.
- 내비게이션 비 로그인 ? 홈/회원가입/로그인. 회원가입 팝업 형식. 타이틀 회원가입, 우측에 닫기 아이콘.
- 소속 레이블 가져야 한다. 유효성 검사. 30자, 에러메시지 30자.
- 직책 가져야 한다. 텍스트 필드, 유효성 검사 30자. 필수 아님.
- 이름 가져야 한다. 텍스트 입력 필드, 유효성 30자.
- 아이디 가져야 한다. 텍스트 입력 필드. 중복 확인해야 한다. 유효성 16자.
- 비밀번호 레이블 표시. 비밀번호 입력 필드를 표시. 유효성 체크 최소 9자 이상, 최대 16글자. 영/수/특 조합.
- 비번 확인. 입력 필드, 유효성 같으며 비밀번호 레이블과 같은 값.
- 가입 : 소속, 직책, 이름, 아이디, 비번, 비번확인 유효성 검사. 유효하지 않을 경우 가입 버튼 비활성화, 유효한 경우 가입 버튼 활성화.
- 클릭 이벤트 이후 로딩 스피너 표기, 회원 가입 API 호출 후 status에 따라 팝업 메시지 표시. 실패 시 로딩 스피너 사라지고 회원가입 팝업이 유지된 상태로 회원가입에 실패하였스빈다 표시.

-----------

UX / UI 특강

삼전 LG모바일 UX UI 프로젝트 진행중. 위디엑스.

- UX 디자인은 편리하게 해야 한다.
- 선택의 차이는 UX 드자인이다.
- 개발/기획/디자인 상관 없이 ux 디자인에 관계가 되어 있다.
- UI도 만들 것이므로 알아야 한다.
- Front 관련된 작업을 한다 하면 UX UI 디자인과 조금 더 관계가 있는 것이다.

- 영향력 범주 같은 경우, 비즈니스적으로 적합한지, 실현 가능성이 있는지(어떤 개발 툴을 이용해서 실현 할 것인가.) 하고 나서 일반적으로 매력적인 디자인을 고려하게 된다. 비즈니스 적으로 좋고, 기술적으로 괜찮더라도 UX UI를 통해 선택 받아야 한다.
- 제프 베조스가 고객에 집착하는 수준으로 광기가 있다. 대규모, 글로벌 리딩 기업 아마존을 운영하고 있다.
- 아마존 ux 디자인 방법론 중에 아마존 워킹 백워드? 라는 것이 있다. 휴먼 센터드 디자인 모델.
- 아마존 워킹 백워드 / 휴먼 센터드 디자인.
- 먼저 고객에서부터 시작하자.
- 추후 경제적 큰 가치를 만들어낼 수 있을 것이다.
- CX 역시 같은 개념인데 조금 더 넓은 것이다. 컴퍼니 익스피리언스였나? CX가.
- Human Centered Design. 디자인 띵킹, 아마존 워킹 백워드, 더블 다이아몬드. 모든 방법론의 핵심 개념이다.
- 주어진 상황 속에서 어떻게 가장 만족 시킬 수 있을 것인지, 실현 가능해야하며 비즈니스적으로도 유효해야 한다.
- 되게 오래 된 개념이다.

### UX 디자인. 유저 경험을 디자인 하는 것이다.
- 기업에게 의미 있으면서도
- 사용자에게 가치 있는 경험을 제공 해줄 수 있도록
- 기업의 제품/서비스를 만들고 운영하는 활동

### 사용자 경험 디자인. User Experience Design
- User는 사용자. Customer는 고객. Consumer는 소비자.
- 구매 전 단계 : 소비자. Consumer. 시장 관점, 효과적 구매 제공, 거래 과정 중심.
- 구매 이후 단계 : 고객. Customer. 관계 관점. 충성 고객 전환 노력, 관계 과정 중심.
- 제품 사용 단계 (경험) : 사용자. User. 제품과 상호작용. 기능/콘텐츠 직접 사용. 경험 중심.

- 소비자 행동 방식의 변화. AIDMA => AISAS 로 변화.
- AIDMA : 주의 관심 욕구 기억 행동
- AISAS : 주의 관심 검색 행동 공유
- 좋건 나쁘건 사용자가 올리고, 제품에 대한 가치 점수를 보고 평가하게 된다.
- 즉, 점점 User에 초점이 맞춰지고 있다.

- UX : 유저의 경험을 확인하고, 페르소나를 만들어서 확인해도 된다는 개념인듯.
- 긍정적 사용자 경험과 부정적 사용자 경험을 통해 도출해야 한다.
- 디자인 != ART 중요하다.
- ART와 Design의 차이점 중 가장 큰 것은 Design은 사용자를 위해서 디자인을 하게 된다.
- 디자인은 사용되고, 아트는 관람된다. 프로덕트인 이상 기능을 가질 것이고, form을 가지게 된다. art는 순수 style과 아름다움을 표현하는 부분이 더 강하다.
- 디자인에서의 가치는 사용성, 편리, 가독성, 쉬움 등에 가치가 있다.
- 디자인에 관점이 들어간다. 대상을 위해, 가치를 만들어서, 특정 미디어를 통해 원하는 목적을 달성 할 수 있게끔 도와준다. 기획 파트이다.
- 사용자의 문제점을 해결해주는 것이 디자인이다!
- 사용자 시나리오, 사용자 여정 지도, 스토리 보드 등. UX 디자인 방법 활용.
- 페르소나를 통해 불만을 확인하고, 앱의 어떤 기능과 어떤 내용으로 해결 할 것인지 구체화 한다.

- 개발 우선 순위는 쉬운 게 아니라, MVP가 우선이다.

- 디지털 프로덕트 : 과거에야 웹, 앱 등이었지만 현재는 앱, 웹, IoT, 워치, PC앱 등등을 통칭하여 디지털 프로덕트라 표현한다.
- 신규로 기획해서 사용자가 누구인지, 경험이 어떤 것인지, 제품 컨셉이 어떤 것인지, 이슈가 무엇인지 등을 설정하고, 정의해야 한다.
- 산출물은 추상적으로 이런 서비스가 될 것이고 이러저러한게 필요하고 이러저러하게 해야한다. 이런 식으로 크게 잡아두고 세분화 하는듯?
- UI 디자인은 여러가지 디바이스마다 구조, 구성 등의 차이점을 이해하고 화면을 그리고 내비게이션을 잡고, 설계를 하는 것이다. 
- GUI는 스타일 가이드, 이미지 등

- 화면 설계 전에 사람들을 만나보고 어떤 가치를 만들어야 할지 UX를 한 뒤 디자인을 하는 것이다.
- 프로덕트 디자인의 경우, 지속적인 개선을 해야한다는 것이다.

- 표면층 / 골격층 / 구조층 / 범위층 / 전략층
- 사용자 경험의 요소 라는 것을 만들었다.
- 표면에서 깊게 들어갈 수록 추상적인 목표를 가지고 만들어지게 된다.
- 디지털 프로덕트는 층에 따라서 감각측면 디자인 / 인터페이스, 네이게이션, 정보 디자인 / 인터랙션 디자인, 정보 설계 / 기능 요구 사양, 콘텐츠 요구 사양 / 사용자 요구, 제품 목표 이렇게 나눈다.



- 살려줘


- 과업이 무엇인가? 기간이 어느정도 있는가? 투입 인력은 어느정도 수준의 인력이 어느정도로 투입 되는가?
- 해결해야 할 과제를 리스트업. 해당 과제를 기간을 두고 어떻게 진행 할 것인가? 등을 계획.
- UX에 방법론처럼 기간이 있고, todo들이 있고, 이 과정에서 어떤 것을 산출물로 낼 것인가? 라는 주제에 대해 생각해두어야 한다.
- 앞부분부터 산출물에 대해 고민 해두면 좋다.
- 수행, 구체화, 시각화, 프로토타이핑, 테스트, 수정 및 개선 등.
- 인사이트, UX 비전 수립, UX 챌린지 도출.
- 앞부분에서 고민하고 UI UX에서 빨리 많이 그리고 버리는 것이 개발 되고 난 이후 유지 보수에서 이익이 될 수도 있다.
- 리서치 한 내용 기반, 프로토타입 기반, 내부 논의, 사람들 인터뷰 기반 등을 통해 비전을 만들고, 비전을 형성하기 위해 challenge가 나오게 되고, 해당 challenge들을 구현하는 방식으로 계획을 세울 수 있다.
- 구체적인 안이 나왔다면 빨리 해봐라. 핵심 가치를 주는 경험인가? 라는 의문을 가져라.
- 구글 서베이 등을 돌릴 수도 있고 만나보고 얘기도 들어보고, 모르는 사람에게 들어보면 좋을 것이다.

- 빨리 만들어서 빨리 버리는 것도 좋다. 대고객 테스트 해보는 것이 좋다.
- 가족, 혈연, 지연, 학연 금지.
- 설문조사 지인 안되고 모르는 사람한테 해야한다.

## 정리
- UX 디자인이 중요하다.
- UX 디자인의 기본 개념도 중요하지만 부가적인 키워드 역시 정리하는ㄱ ㅓㅅ이 좋다. UIUX UXUI 프로덕트 등.
- 사용자 경험 모델처럼 특정 프레임에 따라서 진행이 가능하다.
- 단계별로 어떤 식으로 진행해야 하는지? 등. 기간에 맞춰서 계획을 맞춰서 진행을 해보면 좋다. 여러명이니까 분업 잘 해서 하면 좋은 결과가 있을 것이다.























