
index
- Many to many relationship
- M:N Article-User Like
- M:N User-User Follow

개요
**참고 데이터 모델링**
- 주어진 개념으로부터 논리적인 데이터 모델을 구성하는 작업
- 물리적인 데이터 베이스 모델로 만들어 고객의 요구에 따라 특정 정보 시스템의 데이터베이스에 반영하는 작업

- 용어 2가지 정리
1. target model : 관계 필드를 가지지 않은 모델
2. source model : 관계 필드를 가진 모델.


### dp 기준 99 MTM practice
```
doctor1 = Doctor.objects.create(name='alice')
doctor2 = Doctor.objects.create(name="bella")
patient1 = Patient.objects.create(name="carol", doctor=doctor1)
patient2 = Patient.objects.create(name="dane", doctor=doctor2)

환자1이 의사2에게도 받으려면 새 레코드를 생성해야 한다.
patient3 = Patient.objects.create(name="carol", doctor=doctor2)
```
- N:1의 한계 : 
 동일한 환자지만 다른 의사에게 예약하기 위해서는 객체를 하나 더 만들어서 예약을 진행해야 한다. 즉 새로운 환자 객체를 생성 할 수 밖에 없다.
 외래 키 컬럼에 (1, 2) 형태로 참조하는 것은 integer 타입이 아니기 때문에 불가능.
 -> 예약 테이블을 따로 만든다.

### 중개 모델 -> 어라 중개모델 맞네. 저번 편의점 생각 했을 때 필요하면 FK만 가지는 모델을 만들면 된다고 했었는데. 싱기방기
- 환자 모델의 외래 키를 삭제하고 별도의 예약 모델을 새로 작성
- 예약 모델은 의사와 환자에 각각 N:1의 관계를 가짐.

- 중개 모델을 통해 의사와 환자 둘 다 접근이 되도록 가능하다.
- 이 때 django에서는 ManyToManyField를 작성 할 수 있다. 중개 모델을 위해 ManyToManyField 지원.

- 다대다 필드에서는 복수형으로 지정. -> set로 작동하는듯???? add로 추가하고 remove로 삭제.

- ManyToManyField를 이용 할 때, 어느쪽이 참조하는 것이 맞는지 생각해서 작성해주면 된다. 어느 모델에 작성되느냐에 따라서 테이블의 이름이 달라지는 등의 변화가 있지만 큰 문제 없다.

### 예약하기
add() 사용.
```
patient1.doctors.add(doctor1)
doctor1.patient_set.add(patient2)
```

### 예약 취소하기
기존에는 Reservation을 찾아서 지워야 했다면 이제 remove() 사용.
```
doctor1.patient_set.remove(patient1)
patient2.doctors.remove(doctor1)
```
django는 ManyToManyField를 통해 중개 테이블을 자동으로 생성한다.

### related_name argument
target_model이 source_model을 참조 할 때 사용 할 manager.name.
ForeignKey의 related_name과 동일하다.
_set 매니저의 이름을 바꿔주는 것. 형태는 복수형 마찬가지로.

질문 : 데이터를 셋 이상 연결 시킬 경우?
 데이터를 셋 이상 연결시킨다는 의미가 테이블 세 개를 연결시킨다는 의미라면, 아까 배웠던 Reservation 모델처럼 중개 모델을 이용하여 그 안에서 세 개의 외래키를 설정하는 방법이 있습니다. 혹은 세 개의 테이블을 각각 두 개씩 ManyToMany로 연결하는 방식을 사용할 수도 있습니다.

## through argument
- through를 이용하면 reservation을 직접 호출하는 경우가 사라지게 된다.
- ManyToManyField가 자동 생성 하는 것을 through로 대체하겠다 이런 느낌으로 보면 된다.
- 그렇다면 중개 모델을 직접 작성하는 경우는 없을까? ManyToManyField를 이용하지 않고?
 - 중개 테이블을 수동으로 지정하려는 경우 through 옵션을 사용하여 사용하려는 중개 테이블을 나타내는 django 모델을 지정 할 수 있음.
- 가장 일반적인 용도는 중개 테이블에 추가 데이터를 사용해 다대다 관계와 연결하려는 경우.
- 중개 테이블에 extra data를 넣어주는 경우.

through 설정 및 Reservation Class 수정 사항
- 이제는 예약 정보에 증상과 예약일이라는 추가 데이터가 생긴다.
예약 생성 방법은 2가지.
1.
reservation = Reservation(doctor=doctor1, patient=patient1, symptom='headache')
reservation.save()

2.
patient2.doctors.add(doctor1, through_defaults={'symptom':'flu'})

삭제는
doctor1.patients.remove(patient1)

patient2.doctors.remove(doctor1)

## 정리
- M:N 관계로 맺어진 두 테이블에는 변화가 없다.
- django의 ManyToManyField는 중개 테이블을 자동으로 생성한다.
- django의 ManyToManyField는 M:N 관계를 맺는 두 모델 어디에 위치해도 상관 없음. 대신 필드 작성 위치에 따라 참조와 역참조 방향을 주의해야 한다.
- N:1은 완전한 종속의 관계였지만 M:N은 상호 종속? 느낌의 관계이다.

## ManyToManyField란?
- ManyToManyField(to, **options)
- 다대다 M:N many-to-many 관계 설정 시 사용하는 모델 필드
- 하나의 필수 위치인자가 필요. M:N 관계로 설정 할 모델 클래스.
- 모델 필드의 ReltatedManager를 사용하여 관련 개체를 추가, 제거, 생성이 가능하다. add(), remove(), create(), clear() 등등.

DB에서의 표현
django는 다대다 관계를 나타내는 중계 테이블을 만든다.
테이블 이름은 ManyToManyField 이름과 이를 포함하는 모델의 테이블 이름을 조합하여 생성된다.
db_table arguments를 사용하여 중개 테이블의 이름을 변경 할 수도 있음.

### ManyToManyField Arguments
1. related_name : _set 매니저의 이름 설정 역참조 할 때 매니저 이름.
2. through : 중개 테이블을 직접 작성하는 경우, 쓰루 옵션을 사용하여 중개 테이블을 나타내는 django 모델을 지정. 일반적으로 중개 테이블에 추가 데이터를 사용하는 다대다 관계와 연결하려는 경우 사용된다.
3. symmetrical : 기본 값은 True. ManyToManyField가 **동일한 모델(on self)을 가리키는 정의에서만** 사용. 뜻은 대칭.
- True일 경우
 - _set 매니저를 추가하지 않음.
 - source 모델의 인스턴스가 target 모델의 인스턴스를 참조하면 자동으로 target 모델 인스턴스도 source 모델 인스턴스를 자동으로 참조하도록 함.(대칭)
 - 즉, 내가 당신의 친구라면 당신도 내 친구가 됨.
 - (1,2)가 추가 될 때 (2,1)도 함께 추가된다.
- 대칭을 원하지 않는 경우 False 설정.
 - Follow 기능 구현에서 재확인 예정.

#### Related Manager
- N:1 M:N 관계에서 사용 가능한 문맥.
- django는 모델 간 n:1 m:n 관계가 설정되면 역참조 시에 사용 할 수 있는 manager를 생성. 이전에 모델 생성 시 objects라는 매니저를 통해 쿼리셋 api를 사용 했던 것처럼 related_manager를 통ㅎ ㅐ쿼리셋 api를 사용 할 수 있게 된다.
- 같은 이름의 메서드여도 각 관계에 따라 다르게 사용 및 동작된다. N:1에서는 역참조만, M:N에서는 관련된 두 객체 모두 사용 가능.
- 메서드 종류로는 add(), remove(), create(), clear(), set() 등등.

### methods many-tomany relationships 일 때 동작만 작성
- add() : 지정된 객체를 관련 객체 집합에 추가. 이미 존재하는 관계에 사용하면 관계가 복제되지 않음. 모델 인스턴스, 필드 값pk를 인자로 허용.
- remove() : 관련 객체 집합에서 지정된 모델 개체를 제거. 내부적으로는 Queryset.delete()를 사용하여 관계가 삭제된다. 모델 인스턴스, 필드 값PK를 인자로 허용한다.

## 중개 테이블 필드 생성 규칙
1. 소스 및 대상 모델이 다른 경우
- id
- <containing_model> id
- <other_model>_id
2. ManyToManyField가 동일한 모델을 가리키는 경우 : 재귀적으로 가리키는 경우
- id
- from_<model>_id
- to_<model>_id

# M:N Article-User 좋아요 기능.

### 모델 관계 설정
- like_users 필드 생성 시 자동으로 역참조에서는 .article_set 매니저가 생성됨.
- 그러나 이전 N:1 관계, Article-User 관계에서 이미 해당 매니저를 사용중이다. 따라서 user.article_set.all() 이런 부분에 있어서 작성한 글과, 좋아요 한 글을 구분 할 수 없게 된다. 그래서 related_name을 지정해주어야 한다.

- User-Article 간 사용 가능한 related manager 정리
 1. article.user : 게시글을 작성한 유저. N:1
 2. user.write_articles : 유저가 작성한 게시글. 역참조. 1:N -> 역참조일 때는 유지하는 것이 좋다. N:1 관계일 경우. 난 _set을 related_name 지정을 해버려서 write_articles가 되버렸다.
 3. article.like_users : 게시글을 좋아요 한 유저. M:N
 4. user.like_articles : 유저가 좋아요 한 게시글. 역참조. N:M

get이 아닌 filter를 쓰는 이유 : get은 검색 했을 때 없으면 에러가 나고, filter는 빈 쿼리셋을 return해준다. 그래서 get이 아닌 filter를 쓴다.

#### .exists()
- 쿼리셋에 결과가 포함되어 있으면 True를 반환하고, 그렇지 않으면 False를 반환.
- 특히 큰 Queryset에 있는 특정 개체의 존재와 관련된 검색에 유용하다.
- python은 쿼리 유무에 따라 확인을 하기에 exists가 없어도 되어 보이지만, 과정에 있어 if문에서 완전한 처리가 끝내고 나오는 exists를 쓰는 것이 나을 것이다. 평가 시점에 따라서 성능을 좌우한다.

## M:N User-User

### Profile
 - 자연스러운 follow 흐름을 위한 프로필 페이지 만들기.
 - 팔로잉과 팔로워 관계는 다르자. 역참조는 팔로워고, 팔로잉은 참조이다.

 - 대댓글 구현이 N:1에서의 댓글 스스로의 N:1 구현이다.

- 재귀 참조를 할 때, 방향을 알 수 있도록 from_user_id to_user_id로 컬럼 이름이 자동으로 설정된다.

- 해시태그 역시 M:N 관계이다. 게시글과 해시태그가 M:N 관계이다.


# extra content. 추가 내용. 프젝에 도움 될 것이다.

## Fixtures
- Fixtures를 사용 해 모델의 **초기 데이터**를 제시하는 것.
### 초기 데이터의 필요성
- 협업하는 A, B 유저가 있다고 생각해보자.
1. A가 먼저 프로젝트를 작업 후 깃헙에 푸쉬 - gitignore 설정으로 인해 DB는 업로드하지 않기 때문에 A가 개발하면서 사용 한 데이터는 올라가지 않는다.
2. B가 깃헙에서 A가 push한 프로젝트를 pull or clone 한다. - 마찬가지로 프로젝트는 받았지만 A가 생성하고 조작한 데이터는 없는 빈 프로젝트를 받게 된다.
- 이처럼 django 프로젝트의 앱을 처음 설정 할 때 동일하게 준비 된 데이터로 db를 미리 채우는 것이 필요한 순간이 있다.
- django에서는 fixtures를 사용해 앱에 초기 데이터를 제공 할 수 있다.
- 즉, migrations와 fixtures를 사용하여 data와 구조를 공유하게 된다.
- 공유는 migrations와 fixtures를 함께 공유해서 data와 data의 구조를 함께 공유하게 된다.

### 사전 준비
- 유저, 게시글, 댓글, 좋아요 등 각 데이터를 최소 2개 이상 생성해두기.

**참고**
뷰 & js에서 현재 페이지를 유지하면서 업데이트를 하는 등의 구현을 할 것이다.

## Fixtures
- django가 db로 가져오는 방법을 알고 있는 데이터 모음. -> django가 직접 만들기 때문에 데이터베이스 구조에 맞춰 작성되어 있다.

- 경로 : app_name/fixtures/
- django는 설치된 모든 app의 디렉토리에서 fixtures 폴더 이후의 경로로 fixtures 파일을 찾는다.

1. 생성(추출)
- dumpdata
- 먼저 만들어야 생성하고 할 수 있다.
`python manage.py dumpdata [app_name[.modelname] [app_name[.modelname]...] > {filename}.json`
위처럼 여러개를 동시에 하나에 넣을 수 있지만 하나에 하나로 만드는걸 권장한다.

예시 :
 `python manage.py dumpdata --indent 4 articles.article > articles.json` -> articles app에 있는 model 데이터를 articles.json으로 추출하겠다. 들여쓰기는 --indent 4 로. 한글 안뜨는건 문제 없이 loaddata 할 때 잘 뜬다. load 될 수 있도록 규격에 맞춰서 만들어진 것이다. 하나라도 바꾸면 load가 안된다. data 편집은 가능. 구조는 바꾸면 안됨.

해당 json 파일들이 있는 경우 깃에 올리고 프로젝트 시작하며 load 하면서 시작하면 된다. 근데 밖에 나와있으면 load가 안된다.

이름 공간 해주면 좋다. 샌드위치.

2. 로드
- loaddata

`python manage.py loaddata articles/article.json` 이런식으로 하나씩 하면 된다...만 한 번에 가능.
`python manage.py loaddata articles/articles.json articles/comments.json accounts/users.json`

dumpdata는 직접 만들 필요가 없다. script code를 직접 쓰지 말고 만들어서 dumpdata 해서 써라. 목적이 그게 아니다.

로드 시 주의사항 :
 한 번에 로드 할 때는 순서가 상관이 없는데, 하나씩 하게 되면 외래키로 인해 순서를 맞춰주어야 한다. 따로따로 로드하게 될 때는 순서를 생각해야 한다.

# 쿼리 속도 개선
쿼리 개선 방법
- annotate : 한방에 가져와서 각각의 댓글 갯수 카운팅
- select_related : 1:1 또는 N:1 참조 관계에서 사용. SQL에서 INNER JOIN 절 사용. 참조하는 테이블의 일부를 가져와서 확인.
  - INNER JOIN. 원래 article 전체를 가져오는데, 가져오면서 user id값도 한방에 가져와서 중복 조회를 하지 않는 것. N:1 관계에서 참조일 때 쿼리를 줄일 수 있다. 추가 교재 업데이트 때 추가로 올려줄 것.
- prefetch_related : article을 가져올 때 comment까지 한번에 가져오는 것이다. comment_set으로. N:1로 역참조일 때 가져오는 것. 게시글 전체를 가져오면서 거기에 있는 comment도 한방에 가져오는 것.

CRUD에서 READ가 중요한 이유가 있다. 쿼리 속도가 다르기 때문에. 처음에 잘 해두면 된다.

- 섣부른 최적화를 하지 말자. 작은 효율성 때문에 97% 정도는 잊어버려라. 섣부른 최적화는 모든 악의 근원이다.




# 웹엑스

임프루브 쿼리는 나중에 하자. A, B, C 쿼리를 ORM만으로 하려면 속도가 아주 느릴 때가 있다.
가장 마지막에 데이터베이스와 소통하기 때문에.
그런 과정에서 비효율적인 쿼리를 발생시키게 된다. db에 너무 많은 쿼리를 던지게 되기에.

필드에서 ORM을 다룰 때 가끔 쓸 때가 있다.
추가학습을 위한 말 : djangocon 이라는게 있다. 거기서 들으면 좋은 것이 있다. https://www.youtube.com/watch?v=EZgLfDrUlrk 한글이니까 보려면 봐바라. 파이콘. 파이썬 쓰는 사람이 하느 ㄴ콘테스트 같은 것. 요기요가 장고 쓰는데 거기서 장고 ORM 쿼리셋을 어떻게 하면 효율적으로 쓸 수 있는지 improve query 같은 것을 알려준다.

