
# 20221011

개발자가 서버에 미리 준비한, 혹은 사용자가 업로드한 정적 파일을 클라이언트에게 제공하는 방법 공부.

## static 정적 파일
- 응답 할 때 별도의 처리 없이 파일 내용을 그대로 보여주면 되는 파일. 사용자의 요청에 따라 내용이 바뀌지 않고 요청한 것을 그대로 보여준다.
- 파일 자체가 고정되어 있고, 서비스 중에도 추가되거나 변경되지 않고 고정되어 있음. 예를 들어 웹 사이트는 일반적으로 이미지, JS, CSS 같은 미리 준비된 추가 파일을 제공해야 한다.
- django에서는 이러한 파일들을 static file이라고 한다. django는 staticfiles라는 앱을 통해 정적 파일과 관련된 기능을 제공한다. 별도로 추가 할 필요는 없다.

## Media file 미디어 파일
- 미디어 파일. 스태틱 파일의 범위 안에 있다.
- 사용자가 웹에서 업로드하는 정적 파일.
- 유저가 업로드한 모든 정적 파일.

### 웹 서버와 정적 파일
- 웹 서버의 기본 동작.
 1. 특정 위치URL에 있는 자원을 요청 받아서
 2. 응답을 처리하고 제공하는 것.
 3. 이는 자원과 자원에 접근 가능한 주소가 있다. 라는 의미이다. 반드시 해당 자원을 얻기 위한 웹 주소URL이 존재한다.
 4. 즉, 웹 서버는 요청 받은 URL로 서버에 존재하는 정적 자원을 제공한다. static resource

## django에서 static files 구성하기.

1. INSTALLED_APPS에 django.contrib.staticfiles가 포함되어 있는지 확인. -> 자동으로 된다.
2. settings.py에서 STATIC_URL 정의하기. -> 마찬가지로 자동.
3. 앱의 static 폴더에 정적 파일을 위치하기. app이름/static/앱이름/파일들.
4. 템플릿에서 static 템플릿 태그를 사용하여 지정된 경로에 잇는 정적 파일의 url 만들기.

### 어무해 template tag
`{% load %}` : load tag. 특정 라이브러리, 패키지에 등록된 모든 템플릿 태그와 필터를 로드. import와 비슷.
`{% static '' %}` : static tag. {% load static %}으로 가능하며, STATIC_ROOT에 저장된 정적 파일에 연결한다.

### static files 관련 Core Settings 변수.
1. STATIC_ROOT
 - 경로.
 - 기본 값은 None이다. django 프로젝트에서 사용하는 몯느 정적 파일을 한 곳에 모아넣는 경로. 직접 본 적 없다.
 - collectstatic이 배포를 위해 정적 파일을 수집하는 디렉토리의 **절대 경로**이다.
 - 개발 과정에서 settings.py의 DEBUG 값이 True로 설정되어 있으면 해당 값은 작용되지 않는다. (DEBUG는 settings.py에 있는데 실제 에러가 떴을 때 나오는 과도한 정보를 컷해주는 것이다.)
- 실 서비스 환경(배포 환견)에서 django의 모든 정적 파일을 다른 웹 서버가 직접 제공하기 위해 사용한다.
- 배포 환경에서는 django를 직접 실행하는 것이 아니라 다른 서버에 의해 실행되기 때문에 실행하는 다른 서버는 django에 내장되어 있는 정적 파일들을 인식하지 못한다. 그렇기에 해당 경로를 직접 작성한 뒤, collectstatic을 통해 꺼내어 서버에 업로드하게 된다.

 **참고. 소프트웨어 배포 Deploy**
 - 프로그램 및 앱을 서버와 같은 기기에 설치하여 서비스를 제공하는 것.
 - 클라우드 컴퓨팅 서비스 AWS, Google Cloud, MS Azure 등에 프로그램 및 앱을 설치해 제공하는 것. 애져 AWS 클라우드 등에 업데이트 해야한다. djagno가 로컬에서 실행 할 때는 본인의 로컬에서 알 수 있다. 하지만 클라우드 인프라에서는 django의 정적 파일에 대한 위치를 알 수 없기 때문에 해당 파일들을 물리적으로 받는데, 그 때 필요한 것이 STATIC_ROOT 경로이다.
 - 정규 때는 안한다. 최종 때는 선택 사항이다. 실제 라이브로는 하지 않고, 문서 가이드를 통해 배포 가능. 배포를 해야 sw 완성이다. 스잡이 말함.

**참고. collectstatic**
 - STATIC_ROOT에 django 프로젝트의 모든 정적 파일을 수집.
 - `python manage.py collectstatic` 명령어를 통해 수집한다.

2. STATICFILES_DIRS

 - Default : [] empty list
 - app/static/ 디렉토리 경로를 사용하는 것 외에 추가적인 정적 파일 경로 목록을 정의하는 리스트.
 - 추가 파일 디렉토리에 대한 전체 경로를 포함하는 문자열 목록으로 작성되어야 함.
```
STATICFILES_DIRS = [
    BASE_DIR / 'static',
]
```
이런 식으로.

3. STATIC_URL
 - Default : None
 - STATIC_ROOT에 있는 정적 파일을 참조 할 때 사용할 URL이다. 
 - 개발 단계에서는 실제 정적 파일들이 저장되어 있는 app/static/ 경로 및 STATICFILES_DIRS에 정의된 추가 경로들을 탐색한다. -> 실제 url에 추가로 붙는다. 그런 주소를 만들어낸다.
 - 실제 파일이나 디렉토리가 아니며, URL로만 존재한다.
 - 비어있지 않은 값으로 설정한다면 반드시 슬래시/로 끝나야 한다.
 - 개발자 도구에서 보면 http://127.0.0.1:9000/static/articles/akflf.png 이렇게 나오는데, 여기서 static 이후로가 STATIC_URL이다.

## static file 가져오기
- static file을 가져오는 2가지 방법.
 1. 기본 경로에 잇는 static file 가져오기. app/static/app/
 2. 추가 경로에 있는 static file 가져오기. STATICFILES_DIRS

자원을 제공하려면 자원의 위치가 필요하고, 그것이 url이다. 그 것을 static 태그를 통해 받아올 수 있다.

## Image Upload

- django ImageField를 사용해 사용자가 업로드한 정적 파일(미디어 파일) 관리하기.

### ImageField
- 이미지 업로드에 사용하는 모델 필드.
- FileField를 상속 받는 서브 클래스. FileField의 모든 속성 및 메서드를 사용 가능.
- 더해서, 사용자에 의해 업로드 된 객체가 유효한 이미지인지 검사.
- ImageField 인스턴스는 최대 길이가 100자인 문자열 DB에 생성되며, max_length 인자를 사용하여 최대 길이를 변경 할 수 있음. -> 이미지가 들어가는 것이 아니라 url이 들어간다.

### FileField()
- FileField(upload_to='', storage=None, max_length=100, **options)
- 파일 업로드에 사용하느 ㄴ모델 필드.
- 2개의 선택 인자. upload_to, storage

### FileField/ImageField 사용하기 위한 단계
1. settings.py 에 MEDIA_ROOT, MEDIA_URL 설정.
2. upload_to 속성을 정의하여 업로드 된 파일에 사용 할  MEDIA_ROOT의 하위 경로를 지정.
- MEDIA_ROOT/ upload_to 두개가 합쳐져서 된다.

#### MEDIA_ROOT
- Default : '' empty string
- 사용자가 업로드 한 파일들을 보관 할 디렉토리의 절대 경로. 테이블에 저장 안됨.
- django는 성능을 위해 업로드 파일은 데이터베이스에 저장하지 않음. 테이블에 저장되는 것은 파일 경로. 실제 경로는 MEDIA_ROOT로 지정해준다.
- MEDIA_ROOT는 STATIC_ROOT와 반드시 다른 경로로 지정해야 한다.

#### MEDIA_URL
- Default : '' empty string
- MEDIA_ROOT에서 제공되는 미디어 파일을 처리하는 URL
- 업로드 된 파일의 주소를 만들어주는 역할. 웹 서버 사용자가 사용하는 public URL이다.
- 비어있지 않은 값으로 설정한다면 반드시 슬래시/로 끝나야 함.
- MEDIA_URL은 STATIC_URL과 반드시 다른 경로로 지정해야 한다.
- 실제로 존재하는 것이 아니고, URL로만 존재한다.

- STATIC_URL은 기본 값을 가지고 있지만, MEDIA는 기본 값이 없어서 URL을 추가해주어야 한다.
```
from django.contrib import admin
from django.urls import path, include
from django.conf import settings # 추가된
from django.conf.urls.static import static # 부분

urlpatterns = [
    path('admin/', admin.site.urls),
    path('articles/', include('articles.urls')),
    path('accounts/', include('accounts.urls')),
] + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT) # 추가된다.
```
docs에도 그대로 있기 때문에, 그대로 하면 된다.

# CRUD. 미디어를 받는.

1. ImageField 작성. ImageField의 인자인 blank를 True로 두면 이미지가 비어도 된다는 의미. 빈 문자열이어도 된다. NOT NULL과 다른, 빈 문자열이다. 거기에 null 인자가 있다.

- blank
 : 기본 값은 False
 : True일 경우 필드를 비워둘 수 잇음. db에 빈 문자열 저장 가능.
 : 유효성 검사에서 사용됨. is_valid() Validation-related. 필드에 blacnk=True일 경우 form 유효성 검사에서 빈 값 입력 가능.
- null
 : 기본 값은 False
 : True인 경우 django는 빈 값을 DB에 NULL로 저장. NOT NULL 속성을 없애는 것이다. Database-related. 빈 값에 대해서 NULL로 바꿔서 저장한다.
ImageField에서 null이 아닌 blank=True 하는 이유는 ImageField 역시 문자열을 저장하는 문자열 필드이므로, 빈 문자열을 저장해야 하기 때문에 빈 값을 빈 문자열로 지정해야 한다. 문자열 필드는 빈 값을 빈 문자열로 하고, 다른 필드들은 null을 사용한다. 둘 다 true일 경우 동작에는 문제가 없으나 db 일관성이 떨어진다.
CharField, TextField 같은 문자열 기반 필드는 null 옵션 사용을 피해야 한다. 데이터 없음의 표현이 빈 문자열과 NULL 두가지로 모두 가능하게 되지 않도록, 일관성을 확보해주어야 한다. django는 문자열 필드 기반은 빈 문자열, 나머지는 NULL로 표현한다.

- 이미지 필드를 사용하려면 반드시 Pillow 라이브러리가 필요하다. Pillow 설치 없이는 makemigrations 실행이 안된다. Pillow는 광범위한 파일 형식 지원, 효율적이고 강력한 이미지 처리 기능을 제공하는 라이브러리이다. 이미지 처리 도구를 위한 견고한 기반을 제공한다.
```
pip install Pillow

python manage.py makemigrations
python manage.py migrate

pip freeze > requirements.txt
```
- accept 속성은 파일 첨부 눌렀을 때 보여지는 필터링이 img 파일로 되도록 자동으로 해주는 속성이다.
- accept="image/*" 이런 식으로 했다.

- models 추가 이후 확인해보면 이미지 업로드가 잘 되지 않다.
- 파일 또는 이미지 업로드 시에는 form 태그에 enctype 속성을 enctype='multipart/form-data' 로변경해줘야 한다. enctype은 인코딩 타입.
**참고 : form 태그의 enctype 속성값**
input type="file" 을 사용 할 경우 enctype="multipart/form-data"를 설정해주어야 한다.

##### request.FILES
- 파일 및 이미지는 request의 POST 속성 값으로 넘어가지 않고, FILES 속성 값에 담겨 넘어간다.
**참고 request.FILES가 두번째 위치 인자인 이유**
- BaseModelForm Class의 생성자 함수가 첫번째 data, 두번째 files 순서로 되어있기에 위치 인자로 넣어준다.

- 이미지 파일의 이름이 같을 경우 : 파일 명 뒤에 언더바 이후 난수문자열을 추가한다. 겹치지 않도록.

html에서 표현 할 경우, 파일은 url, 경로를 불러와야 하므로 파일도 마찬가지로 url 속성이 생겨서 {{article.image.url}} 로 src에 넣어주면 된다.

# UPDATE

이미지 수정 자체는 불가능하다. 이미지는 바이너리 데이터이기 때문에 텍스트처럼 일부만 수정하는 것은 불가능. 새로운 이미지로 대체하는 방식을 사용한다.

업데이트 템플릿에서 enctype을 multipart/form-data를 추가하고 시작한다.

- 사진 수정 시 과거 데이터 같은 경우, 라이브러리를 이용해 과거의 데이터를 삭제 하는 등 하도록 한다. 대체된 미디어 파일을 자동으로 삭제하는 settings 설정이 있다.

## upload_to argument

- media 이후 추가 경로. 사용자가 업로드 하는 미디어 파일의 경로를 체계적으로 지정 할 수 있다.
- ImageField눈 업로드 디렉토리와 파일 이름을 설정하는 2가지 방법을 제공.
 1. 문자열 값이나 경로 지정 방법. 추가 경로를 지정해주는 것. form.py에서 upload_to를 문자열 추가하여 설정.
 2. 함수 호출 방법. 
  - 함수를 class 바깥에서 만들어서 가져오는 방법 : 두개의 값. instance, filename을 받아서 리턴 할 수 있다.
  - save가 되기 전에 호출이 되기 때문에, pk 값을 통한 폴더는 사용할 수 없다.
  - instance는 파일 필드가 정의된 모델 인스턴스. 아직 pk값이 없는 상태로 호출된다.
  - filename은 기존 파일의 이름이다.
  -> 모델 인스턴스의 username으로 저장이 되게 된다.(설정을 instance.username으로 했으므로.) test 유저가 저장한 이미지는 그 사람 유저 네임 폴더에 저장되는 방식으로 저장이 된다.

## image resizing

- 이미지 리사이징. 실제 원본 이미지를 서버에 그대로 로드하는 것은 여러 이유로 부담이 크다.
- HTML <img> 태그에서 직접 사이즈를 조정 할 수도 있지만, **업로드 될 때** 이미지 자체를 resizing 하는 것을 사용해 볼 것. 원본 유지도 해볼 것.

- 사전 준비 : django-imagekit
```
pip install django-imagekit
pip freeze > requirements.txt
```
이후 settings.py에서 INSTALLED_APPS에 `'imagekit',` 등록.

django-imagekit은 썸네일, 해상도, 사이즈, 색깔 등을 조정 할 수 있따.

### 썸네일 만들기
2가지 방식으로 진행 할 것. 외부 라이브러리를 쓰는 방법을 배우는 것이다. 원래 imagekit 라이브러리를 보면서 해야한다.
1. 원본 이미지 저장x
2. 원본 이미지 저장o
비율을 맞춰서 저장하고, 자르는 방식을 어떻게 할지는 django-imagekit docs에 들어가서 확인해야 한다.
ResizeToFill 등의 기능들이 많다.
원본을 저장하려면 source를 image 모델 속성으로 받아서 사용하는 field를 정해주면 된다.
원본을 저장하면 thumbnail은 물리적인 column을 생성하는 것이 아니다. 썸네일의 출력 시점에 만들어진다.

위치는 CACHE에 만들어진다. 캐시에 만들어진다.
개발자 도구 네트워크 탭에서 size를 보면 memory cache로 표현되는 것은 자기가 들고 있던 것을 출력한 것. 자주 쓰는 이미지 같은 경우는 서버가 아닌 브라우저가 저장하고 있는 memory cache에서 가져온다. 새로고침에 우클릭하면 캐시 비우기 및 강력 새로고침이 있다. 개발자 도구가 켜져 있어야 한다. 캐시를 비우고 새로고침을 하면 처음 받는 이미지 등의 데이터는 캐시를 받아오게 된다. 그래서 첫로딩이 느린 것이다.

속도 강제 조정이 가능하다. 개발자도구 -> 네트워크 탭 -> 와이파이 모양 버튼 -> Network throttling 메뉴가 있다. 그래서 거기서 어떤 방식으로 받을 것인지 지정이 가능하다. 쓰로틀링을 강제 할 수 있다.

# QuerySet API Advanced

현재 우리는 .all()과 .get()과 .filter()만 배웠다. sql에서 배웠던 것처럼 sorting도 해보고 여러가지 해볼 것이다.

```
sqlite3 db.sqlite3
.mode csv
.import users.csv users_user
.exit
```
이 순서 입력으로 sql을 불러담아둘 것.
이후 shell_plus 켜기.
이후 데이터 조회.
`User.objects.all()`
유저 레코드 생성 : 여러가지. 키워드 인자, .create 메소드, 생성 후 save() 등
간단한 수정은 사용 가능.
갯수를 할 때는 count를 세야한다. 길이 잴 때는 `len(User.objects.all())`로 구해도 되지만 `User.objects.count()`로 해도 된다.

### .count() : 쿼리셋과 일치하는 데이터베이스의 개체 수를 나타내는 정수를 반환. all()을 사용하지 않아도 된다.

## sorting data 데이터 정렬하기.

- 나이가 어린 순으로 이름과 나이 조회하기. (최종 출력은 이름과 나이, 출력은 나이 오름차순.)
```
User.objects.order_by('age') -> 정렬만 하기
User.objects.order_by('age').values('first_name', 'age') -> 정렬해서 values로 가져오기.
```
### .order_by()
- .order_by(*fields)
- 쿼리셋의 정렬을 재정의.
- 기본적으로 오름차순으로 정렬하며, 필드 명에 -하이픈을 작성하면 내림차순 정렬. 음수를 만들어준다는 의미처럼.
- 인자로 ?를 입력하면 랜덤으로 정렬한다.
`User.objects.order_by('-age').values('first_name', 'age')` : 내림차순 정렬
`User.objects.order_by('?').values('first_name', 'age')` : 랜덤 정렬

### values()
- .values(*fields, **expressions)
- 모델 인스턴스가 아닌 딕셔너리 요소들을 가진 쿼리셋을 반환.
- 필드는 선택인자이며, 안넣으면 모든 data를 딕셔너리 형태로 반환.
- 필드를 지정하면 각 딕셔너리에는 지정한 필드에 대한 key와 value만을 출력.
- 아예 values()를 안넣으면 그냥 객체 통째로 반환된다.

- 이름과 나이를 나이가 많은 순서대로 조회하기
```
User.objects.order_by('-age') -> 내림차순 정렬만 하기
User.objects.order_by('-age').values('first_name', 'age') -> 내림차순 정렬해서 values로 가져오기.
```

- 이름, 나이, 계좌 잔고를 나이가 어린 순으로, 같은 나이라면 계좌 잔고가 많은 순으로 정렬하기.
- 나이 우선 정렬, 그 안에서 계좌 잔고 내림차순.
```
User.objects.order_by('age', '-balance').values('first_name', 'age', 'balance')
```

- order_by를 연속으로 적게 되면 앞의 order_by들은 적용이 되지 않고, 맨 뒤의 order_by만 적용이 된다.

## Filtering data
- 중복 없이 모든 지역 조회하기
`User.objects.distinct().values('country')`
- 지역 순으로 오름차순 정렬하여 중복 없이 모든 지역 조회하기
`User.objects.distinct().values('country').order_by('country')`
- 이름과 지역이 중복 없이 모든 이름과 지역 조회하기
`User.objects.distinct().values('first_name', 'country')`
- 이름과 지역 중복 없이 지역 순으로 오름차순 정렬하여 모든 이름과 지역 조회하기
`User.objects.distinct().values('first_name', 'country').order_by('country)`

- 나이가 30인 사람들의 이름 조회
`User.objects.filter(age=30).values('first_name')`
- 나이가 30 이상인 사람들의 이름과 나이 조회하기
`User.objects.filter(age__gte=30).values('first_name', 'age')` : __gte great then equal 느낌. 이상

### Field lookups
- SQL WHERE 절의 상세한 조건을 지정하는 방법
- 쿼리셋 메서드 filter(), exclude() 및 get()에 대한 키워드 인자로 사용된다.
- 문법 규칙 : 필드명 뒤에 던더스코어 이후 작성.
- https://docs.djangoproject.com/en/3.2/ref/models/querysets/ - field-lookups
- 필터는 연속으로 붙여줘도 되고, 하나의 함수 안에 넣어도 되나 후자가 기준.

- 나이가 30살 이상이고 계좌 잔고가 50만원 초과인 사람들의 이름 나이 계좌잔고 조회하기.
`User.objects.filter(age__gte=30, balance__gt=500000).values('first_name', 'age', 'balance')`
- 이름에 '호'가 포함된 사람들의 이름과 성 조회
`User.objects.filter(first_name__contains='호').values('first_name', 'last_name')`
- 핸드폰 번호가 011로 시작하는 사람들의 이름과 핸드폰 번호 조회 -> sQL의 와일드 카드 %와 _인데, 장고는 %만 지원한다.
`User.objects.filter(phone__startswith="011-").values('first_name', 'phone')`

와일드 카드의 %는 지원하지만  _ 언더스코어는 별도로 정규 표현식을 사용해야 한다.

- 이름이 '준'으로 끝나는 사람들의 이름 조회하기
`User.objects.filter(first_name__endswith='준').values('first_name', 'last_name')`

- 경기도 혹은 강원도에 사는 사람들의 이름과 지역 조회하기.->포함관계로
`User.objects.filter(country__in=['강원도', '경기도']).values('first_name', 'country')`
- 경기도 혹은 강원도에 살지 않는 사람들의 이름과 지역 조회하기. -> filter를 쓰지 않는다. exclude 사용. 제외한.
`User.objects.exclude(country__in=['강원도', '경기도']).values('first_name', 'country')`

- 나이가 가장 어린 10명의 이름과 나이 조회하기. -> 파이썬의 슬라이싱 이용 가능.
`User.objects.order_by('age').values('first_name', 'age')[:10]`

- 나이가 30이거나 성이 김씨인 사람들 조회. or 연산자. -> and는 filter에서 연속적으로 걸어주면 되는것이지만 or는 다른 기능이 이용된다. 큐 오브젝트. 큐는 연산자 연산이 가능한 오브젝트를 반환한다.
`from django.db.models import Q` 임포트 해준다. 쉘플러스는 임포트 되어 있다.
`User.objects.filter(Q(age=30) | Q(last_name='김')).values('age', 'last_name')`

큐 오브젝트로 and 도 가능하다.
`User.objects.filter(Q(age=30) & Q(last_name='김')).values('age', 'last_name')`

#### Q 오브젝트.
- 기본적으로 filter와 같은 메서드의 키워드 인자는 AND statement를 따름
- 만약 더 복잡한 쿼리를 실행해야 하는 경우가 있다면 Q객체가 필요함. OR 같은 경우.
- 결합 가능. & | 등
- 조회를 하면서 여러 Q객체를 제공 할 수도 있음.
Article.objects.get(Q(title__startswith='Who'), Q()|Q()) 등으로 이어줄 수 있다.
무엇이 권장되는 등의 내용은 없고, | or 같은 Aggregation을 하면서 더 다룰 것이다.

SQL로 쿼리가 어케 넘어가는지 궁금하면 print(User.objects.all().query) 하면 된다. SQL로 해석되어 나온다.

## Aggregation

GROUP_BY 역할을 하는 aggregate()

Aggregation functions : Avg평균, Count세는거, Max최댓값, Min최솟값, Sum합 등 구하는데 이용.
전체 쿼리셋에 대한 값을 계산하여 **딕셔너리 형태로 반환.**

- 나이가 30살 이상인 사람들의 평균 나이 조회하기.
```
from djagno.db.models import Avg

User.objects.filter(age__gte=30).aggregate(Avg('age'))
기본 키 값은 age__avg 이런 형태지만, 키 이름을 바꾸고자 하면
User.objects.filter(age__gte=30).aggregate(새로운키=Avg('age'))
이런 식으로 Avg 인자를 넣어주며 할당.
```
- 가장 높은 계좌 잔액 구하기
```
from djagno.db.models import Max # 일반적으로 뷰 함수에서는 임포트가 되어있지 않다.

User.objects.aggregate(Max('balance'))
```
- 계좌 잔액 총합 구하기
```
from djagno.db.models import Sum # 일반적으로 뷰 함수에서는 임포트가 되어있지 않다.

User.objects.aggregate(Sum('balance'))
```

### annotate() 주석을 달다 라는 으미 등
- 쿼리의 각 항목에 대한 요약 값을 계산.
- SQL의 GROUP_BY에 해당한다.
- 주석을 달다 라는 사전적 의미 보유중.

- 각 지역 별로 몇 명씩 살고 있는지 조회하기
```
from djagno.db.models import Count # 일반적으로 뷰 함수에서는 임포트가 되어있지 않다.

User.objects.values('country').annotate(Count('country'))
```
- 각 지역 별로 몇 명씩 살고 있는지, 지역별 계좌 잔액 평균 조회하기
```
from djagno.db.models import Count, Avg # 일반적으로 뷰 함수에서는 임포트가 되어있지 않다.

User.objects.values('country').annotate(Count('country'), avg_balance=Avg('balance'))
```
- 각 성씨가 몇 명씩 있는지 확인하기
```
from djagno.db.models import Count, Avg # 일반적으로 뷰 함수에서는 임포트가 되어있지 않다.

User.objects.values('last_name').annotate(Count('last_name'))
```

단일 테이블이라서 쉬운 편이다. 하지만 models가 연결되어 있는 경우, 코드가 복잡해진다.
예시) 전체 게시글을 조회하면서 각 게시글의 댓글 갯수와, 댓글의 생성일이 2000-01-01보다 더 빨리 작성된 경우를 조회한다.
```
Article.objects.annotate(
    number_of_comment=Count('comment'),
    pub_data=Count('comment', filter=Q(comment__Created_at__lte='2000-01-01'))
)
```











웹엑스

정적 파일 static file: 
필요한 이미지, js, css 등 한 번 준비 해두면 변하지 않는 file들. django는 관리하는 방법이 있다.
개발자가 준비한 변하지 않는 파일.

사용자들의 정적 파일은 media.

settings에서 잡아주고, 템플릿에서 load 태그로 static을 가져오고, static url 과 media url을 만들어주면 된다.
어려운거 아니고 헷갈리다.

css js img 들은 request와 response로 이루어져서 반환된다. 즉, 클라이언트 서버 구조를 이루고 있다.
ImageField는 이미지가 들어간 것이 아닌, 이미지의 경로가 들어가있다.
서버 컴퓨터에 저장해두고, 경로를 기억해놔서 요청에 따라 응답을 되돌려 준다. DB에 이미지 파일이 들어가진 않는다.

django는 풀스택 프레임워크. DRF로 백엔드 배울 것이고, Vue.js나 react.js js로 프론트를 배울 것이다.

이미지를 주고 받는 것은 패킷으로 쪼개어서 주고 받는다. 미디어 파일은 패킷을 쪼개고, 재조립하는데, 재조립을 어떤식으로 할 것인지를 알려줘야 하는데, 이 때 form의 enctype으로 알려준다. 이외에도 더 많지만 multipart/form -data로 사용한다.

upload_to : 서버 어느 곳에 저장하게 되는데 그 폴더를 어느 경로에 저장 할 것인지를 설정해주는 인자이다.
image resizing은 선택이다. imagekit을 사용하는 방법을 배우는 것이다. 썸네일 등 이미지 크기 줄일 때 이런게 필요하구나 정도.

QuerySet API Advanced는 중요하다. 최종 프로젝트 할 때까지는 안쓸 가능성이 높지만, 2학기부터는 반드시 다시 보게 될 것이므로 중요하게 봐야 한다.



