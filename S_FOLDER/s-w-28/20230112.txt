
# 20230112

## Web의 특징 www

- 브라우저만 있으면 어디서든 접속 가능. 접근성이 좋음. url만 알면 접근 10가능
- 웹 페이지가 업데이트 된 후 배포 속도가 빠르다. 앱과 다르게 업데이트를 할 필요가 없음.
- 플랫폼 환경에 제약이 없음. 브라우저만 있으면 서비스 사용 가능.

- 속도가 느림
- UI 사용성이 앱보다 좋지 못함.
- 연결하기 위해 URL을 입력해야 한다.

## 모바일 앱의 특징

- 앱 마켓 사용 가능. 다양한 수익 창출 가능. 모바일 하면 하는걸 강추한다.
- 알람, 주소록, 카메라, GPS 등의 스마트폰 기능을 사용 할 수 있음. 일부 하드웨어 사용 가능. 푸쉬 알림이 가능하다는 점.
- 서비스 실행이 편함. 아이콘 클릭으로 서비스 시작 가능. url이 필요 없음
- 스마트폰에 최적화 되어있어 속도가 빠름.
- UI 사용성이 스마트폰에 최적화 되어 있음.

- 마켓에 등록하기 위해 개발자 등록을 해야함.
- 사용자가 앱을 다운 받아야 하는 불편함.
- IOS AOS 모두 개발 해야 함.
- 앱이 수정되면 마켓에 새로 배포하여야 한다. 배포까지의 시간이 오래 걸린다.
- 사용자가 사용하는 디바이스의 OS에 따라 버전을 관리해야 한다.


서비스의 특징을 알아야 하며, 개발 환경을 알아야 한다. app으로 개발하는 것이 좋다고 하더라도 정해진 시간 내로 개발을 하려면 현실과 타협해야 한다.

- 새롭게 개발하려는 플젝에 딱 맞는 인원을 배치하기는 어렵다.
- 정해진 시간 안에 프로젝트를 완성해야 하기에 모든 기능을 넣기 어렵다.
- 정해진 자원과 한정 된 기간 내에 최대한 완성도를 높이는 것이 플젝이다.

- 공통의 목표를 정하자. 상 / 개발 능력 / 포폴 등
- 우리가 구현하고자 하는 핵심 기능이 무엇인지 명확하게 정의하고 개발자를 배치하다. 개발자의 역량 파악도 해야하며, 타협을 해야 한다.
- 우리 팀의 역량을 객관화 하자.
- 서비스를 구현하는 것 뿐만 아니라 서비스를 구현 할 수 있는 준비를 하는 것 또한 개발자의 역량.



---

## git branch 전략
- 추후에 할 지 모르나 , git과 jira를 연동해야 할 수 있기에 jira issue number를 등록하면 좋다.

- git branch flow
1. main : 메인 최종 배포 브랜치
2. release : 버전 올리는 브랜치. 버전에 무슨 무슨 기능을 넣을 것이다를 정하면 좋을 듯 하다.
3. develop : 개발 브랜치.
  ㄴ feature/front/기능 이름
  ㄴ feature/back/기능 이름
4. hotfix : 핫픽스 브랜치

- 커밋 메시지는 `<info> <type>: <message> (jira issue code)`
```
info = {
  FE : front-end,
  BE : back-end
}
type = {
  ADD : 기능 추가,
  UPDATE : 기능 업데이트,
  DELETE : 기능 삭제,
  CHORE : 기타 수정,
  DOC : 문서 및 명세서 작업,
  BUILD : 빌드 관련 파일,
  CI : CI 관련 설정,
  REFACTOR : 코드 리팩토링,
  TEST : 테스트 코드 수정
}
```

- Conflict를 방지 할 방법들.
1. 다른 사람이 잓어한 코드는 임의로 건드리지 말자.
2. git pull을 통해 원격 저장소와 로컬을 자주 동기화
3. master, develop 브랜치에 직접 push 자제. Merge Request 날리지.
4. commit & push를 생활화 하자.

5. 코치님들 괴롭히기.


- Jira 활용하기.
1. 백로그에서 스프린트 생성
2. 스프린트에 이슈 등록
3. 생성된 이슈에 스토리 포인트 설정
4. 스프린트 시작
5. 이슈 관리
6. 스프린트 종료

- 이슈 종류
1. EPIC : 큰 틀
2. STORY : 회원 관점에서 이야기를 적기.
3. TASK : 작업.
4. SUB-TASK
5. BUG

2, 3은 수평적이어도 좋고 2가 더 커도 좋다. 하나로만 써도 된다. 자유롭게 쓰면 됨. 팀 만의 규칙을 정하면 된다. SUB-TASK 등은 태스크에 포함되는 것. 버그는 이슈가 났을 때.

- 스토리 포인트는 이슈 별 최대 4point 할당.
- 1p == 1h. 총 40 스토리 포인트 배분.

. FE/BE 코드 컨벤션
. 커밋 컨벤션
. 브랜치 컨벤션
. 깃 컨벤션
에픽 / 스토리 / 태스크 어떻게 쓸 것인지 정해야 한다. 지라 컨벤션



- 우리 서비스가 제공 하는 것 / 사용자가 바라는 것 / 우리 팀

- 사용자는 누구인가? 사용자는 어떤 문제를 겪고 있나? 사용자는 무슨 가치를 얻게 되나?
- 왜 우리 팀이어야 하는가? 사용자가 우리 서비스를 선택 할 이유는?

- 사용자가 우리 서비스를 선택 할 이유는? => 자세 교정 및 여러 비교군을 통한 교정.
- 왜 우리 팀이어야 하는가? 팀의 정체성을 결정하면 좋을 것이다.
- 사용자가 누구인가? 자세할수록 좋다. 나잇대, 성별, 문제 등에 집중해서.
- 이해 관계자.
- What? 우리가 해결해야 할 문제가 뭐지? 그냥이라면 그냥. 서비스를 한 마디로 줄일 수 있어야 한다.
- How? 어떻게 문제가 해결되는거지?









---
- 다따바쓰. 보통 워크벤치 쓰는데 편하진 않다. ERD 클라우드 쓴다. 워크 벤치는 혼자고 공유도 안된다. ERD 클라우드는 여러명이 Private/Public도 가능하다.
- 로지컬 피지컬. 도메인을 잘 써야 한다. 도메인을 쓸거면 잘 쓰고 아니면 쓰지 마라.

- FK 

























