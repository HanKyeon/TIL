
# 20230110

어제 한 일 : 각종 블로그 찾기 및 아이디어 찾기.
오늘 할 일 : 
1. BFF 조사
2. WebRTC 정리
3. 모듈형 특강 다시보기
4. 개인 플젝 과제의 Vue 코드를 다 읽어보고 어떤 방식으로 WebRTC 구현이 되는지 확인하기.
5. (가능하다면) React로 개인 플젝 구현

--------------------

## BFF
- BackEnd For FrontEnd
공부 원인 : https://fe-developers.kakaoent.com/2022/220310-kakaopage-bff/
참고 : 
https://velog.io/@seeh_h/BFF%EB%9E%80
https://metleeha.tistory.com/entry/BFFBackend-for-Frontend-%EB%9E%80

### 1. 사용 이유 : MSA 서버 측 설계에서 서비스를 각 도메인 별로 분리 시킨다. 서비스가 흩어지게 되므로 화면을 그리기 위해 여러 서비스에 분산되어 있는 데이터를 가져와서 적절히 합쳐야 한다. 서비스가 분리 된 상태마다 호출하면 느려지게 되므로 사용하는 것이 좋다.

### 2. 뜻 : 프론트엔드를 윟나 백엔드 서버를 의미한다. 프론트의 요구사항에 맞게 데이터를 작업하는 보조 서버. 여러 API들이 나눠진 MSA에서 데이터를 받아 FE와 소통을 BFF가 도맡게 된다.

### 3. 문제점
1. 하나의 기능을 완성하기 위해 여러 도메인의 API 응답 값을 조작해야 하는 경우, 여러개의 서비스를 호출해야 할 수 있다.
2. 데이터를 전송하는 과정에서 불필요한 데이터를 숨겨야 하는 경우. 시크릿 키 등의 비공개성 정보가 있는데, BFF 같은 경우 해당 정보를 보관하고 숨겨주기 위한 인터페이스 서버가 필요하다.
3. 프론트엔드에서 많은 양의 연산을 요구하는 작업을 진행해야 하는 경우. 다수의 네트워크 통신을 유발하는 작업을 진행해야 하는 경우, 렌더링 성능에 악영향이 있을 수 있다.

### 4. 장점
1. 프론트 엔드에서 복잡한 로직을 감추고 추상화된 인터페이스를 사용 가능하다.
2. 연동하는 백엔드 API의 인터페이스가 변경되는 경우, BFF에서 수정 사항을 반영하면 되므로, 프론트엔드 로직에 집중 할 수 있다.
3. 데이터를 전송하는 과정에서 민감하거나 불필요한 데이터는 숨길 수 있다.

### 5. BFF를 언제 쓰는 것이 좋을까?
1. 하나의 기능을 완성하기 위해 여러 도메인의 API response를 조작해야 하는 경우.
2. 데이터를 전송하는 과정에서 불필요한 데이터를 숨겨야 하는 경우.
3. FE에서 많은 양의 연산을 요구하는 작업을 진행해야 하는 경우.
4. Open API 연동 시 제공하는 API의 조합으로 특정 기능을 완성해야 하는 경우.

- MSA를 도입하는 여러 금융회사 쪽에서 이런 BFF 패턴을 사용하는 경우가 많다. 은행-보험-crm 등 다른 서비스들의 api를 연결시켜야 하므로.

--------------------

## WebRTC

참고 : 
https://millo-l.github.io/WebRTC-%EA%B5%AC%ED%98%84-%EB%B0%A9%EC%8B%9D-Mesh-SFU-MCU/

### WebRTC 이론 정리

#### 1. WebRTC란?
- Web Real-Time Communication. 웹 브라우저 환경 및 안드, IOS 앱에서도 사용 가능한 비디오, 음성 등의 데이터가 peer 간 실시간으로 전송되도록 지원하는 **오픈 소스**이다.
- 공개 웹 표준으로 구현되며, 모든 주요 브라우저에서 일반 JS API로 제공한다.

#### 2. WebRTC 기술 및 프로토콜

1. ICE Interactive Connectivity Establishment
- 브라우저가 peer를 통한 연결이 가능하도록 해주는 프레임워크.
- peer간 단순 연결 시 작동하지 않을 때가 있는데, 연결을 시도하는 방화벽을 통과해야하고, 단말에 Public IP가 없다면 유일한 주소값을 할당해야 하며, 라우터가 peer간의 직접 연결을 허용하지 않을 때 데이터를 릴레이 해야 하는 경우 등이 있다.
- ICE는 위 작업을 수행하기 위해 STUN 과 TURN 서버 둘 다 혹은 하나의 서버를 사용한다.

2. STUN 서버. Session Traversal Utilities for NAT
- 클라이언트 자신의 Public Address IP:PORT를 알려준다.
- peer 간의 직접 연결을 막는 등의 라우터 제한을 결정하는 프로토콜 (현재 다른 peer가 접근 가능한지 여부 등 결정.)
- 클라이언트는 인터넷을 통해 클라이언트의 Public Address와 라우터의 NAT 뒤에 있는 클라이언트가 접근 가능한지에 대한 답변을 STUN 서버에 요청한다.

3. NAT. Network Adddress Transilation
- 단말에 공개 IP 주소를 할당하기 위해 사용.
- 라우터는 공개 IP 주소를 갖고 있고, 모든 단말들은 라우터에 연결되어 있으며 비공개 IP 주소를 갖는다. Private IP Address
- 요청은 단말의 비공개 주소로부터 라우터의 공개 주소와 유일한 포트를 기반으로 번역한다. 이 덕분에, 각각의 단말이 유일한 공개 IP 없이 인터넷 상에서 검색 가능하다.
- 몇몇 라우터들은 Symmetric NAT라고 불리는 제한을 위한 NAT를 채용한다. 즉, peer들이 오직 이전에 연결한 적 있는 연결들만 허용한다. 따라서 STUN 서버에 의해 공개 IP 주소를 발견한다고 해도 모두가 연결을 할 수 있다는 것은 아니다.
- 이를 위해 TURN이 필요하다.

4. TURN 서버. Traversal Using Relays around NAT
- turn 서버와 연결하고 모든 정보를 그 서버에 전달하는 것으로, Symmetric NAT 제한을 우회하는 것을 의미한다.
- 이를 위해 TURN 서버와 연결을 한 뒤 모든 peer들에게 저 서버에 모든 패킷을 보내고 다시 TURN 서버에 전달해달라고 해야한다.
- **참고** SDP Session Description Protocol
 - 해상도나 형식, 코덱, 암호화 등의 멀티미디어 컨텐츠의 연결을 설명하기 위한 표준.
 - 두 개의 peer가 다른 한 쪽이 데이터가 전송되고 있다는 것을 알게 해준다.
 - 기본적으로 미디어 컨텐츠 자체가 아닌 컨텐츠에 대한 메타데이터 설명이다.
 - 기술적으로 보자면 SDP는 프로토콜이 아니다. 그러나 데이터 포맷은 디바이스 간의 미디어를 공유하기 위한 연결을 설명하기 위해 사용한다.



### WebRTC 구현 방식. Mesh/P2P SFU, MCU

#### 1. 웹 RTC 이론 정리 및 구현 방식
- WebRTC는 ICE, STUN, TURN, SDP로 작동된다. P2P 연결을 완성시키기 위해서는 개발자가 peer 간의 offer와 answer를 통한 session 정보를 중계해주는 서버를 만들어줘야 한다. 하지만 P2P 연결로 3인, 4인 그리고 그 이상의 인원의 데이터 송수신을 지원하게 되면 클라이언트 측면에서의 과부하가 심하게 오기 때문에 권장하지 않는다. 이러한 문제의 해결책으로 나온 것이 SFU와 MCU 방식의 미디어 서버를 두는 것이다.

#### 2. 서버의 종류

##### 1. Signaling 서버. Mesh
- **특징**
 - peer 간의 offer, answer라는 session 정보 signal 만을 중계한다. 따라서 처음 WebRTC가 peer 간의 정보를 중계 할 때만 서버에 부하가 발생한다.
 - peer간 연결이 완료도니 후에는 서버에 별도의 부하가 없다.
 - 1:1 연결에 적합하다.

- **장점**
 - 서버의 부하가 적기 때문에 서버 자원이 적게 든다.
 - peer 간의 직접 연결로 데이터를  송수신하기 때문에 실시간성이 보장된다.

- **단점**
 - N:N 연결에서 클라이언트의 과부하가 급격하게 증가한다. 5명이 WebRTC 연결을 한다고 가정하면 Uplink(내 데이터를 연결된 다른 사용자에게 보내는 갯수) 4개, Downlink(연결된 다른 사용자의 데이터가 나에게 들어오는 갯수) 4개로 한 명당 총 8개의 link를 유지하며 데이터를 송수신하게 된다.

##### 2. SFU Selective Forwarding Unit 서버.

- **특징**
 - 종단 간 미디어 트래픽을 중계하는 중앙 서버 방식이다.
 - 클라이언트 peer간 연결이 아닌, 서버와 클라이언트 간의 peer를 연결한다.
 - 1:1 1:n n:n 등 모든 연결 형식에서 클라이언트는 연결 된 모든 사용자에게 데이터를 보낼 필요 없이 서버에게만 자신의 영상 데이터를 보내면 된다. 즉, uplink가 1개다.
 - 하지만 1:n n:n 형식이라면 상대방의 수만큼 데이터를 받는 peer를 유지해야 한다. Downlink는 P2P Signaling server일 때와 동일하다.
 - 1:n 형식 또는 소규모 n:n 형식이라면, 상대방 수 만큼 데이터를 받는 peer를 유지해야 한다. 즉, Downlink는 P2P signaling server일 때와 같다.
 - 1:n 또는 소규모 n:m 형식의 실시간 스트리밍에 적합하다.

- **장점**
 - 데이터가 서버를 거치고, Signaling server를 사용 할 때보다 느리긴 하지만 비슷한 수준의 실시간성을 유지 할 수 있다.
 - Signaling 서버를 사용하는 것보다 클라이언트가 받는 부하가 줄어든다.

- **단점**
 - Signaling 서버보다 서버 비용이 증가한다.
 - 대규모 N:M 구조에서는 여전히 클라이언트가 많은 부하를 감당한다.

##### 3. MCU 서버 Multi-point Control Unit server

- **특징**
 - 다수의 송출 미디어를 중앙 서버에서 혼합 또는 가공하여 수신 측으로 전달하는 중앙 서버 방식이다. 예를 들어, 5인이 WebRTC 연결을 한다면 자신을 제외한 다른 4인의 video 데이터를 하나의 video 데이터로 편집하고, audio 데이터도 마찬가지로 편집하여 한 명에게 보낸다. 이 작업을 4명에게도 동일하게 적용한다.
 - 클라이언트 peer간 연결이 아닌, servr와 client 간의 peer를 연결한다.
 - 모든 연결 형식에서 클라이언트는 연결된 모든 사용자에게 데이터를 보낼 필요없이 서버에게만 자신의 영상 데이터를 보내면 된다.
 - 모든 연결 형식에서 클라이언트는 연결된 사용자의 수와 상관 없이 서버에게서 하나의 peer로 데이터를 받으면 된다. 즉, downlink가 1개이다.
 - 중앙 서버의 높은 컴퓨팅 파워가 요구된다.

- **장점**
 - 클라이언트의 부하가 현저히 줄어든다. uplink 1개, downlink 1개로 총 2개만 유지해도 된다.
 - N:M 구조에 사용 가능하다. 적합하다고는 말 할 수 없지만, 다른 서버에 비해 적합하다.

- **단점**
 - WebRTC의 최대 장점인 실시간성이 저해된다.
 - video, audio를 결헙하는 과정에서 비용이 많이 든다.

=> 개인 생각 : 목적에 맞는 서버 구성을 하는 것이 맞을 것 같다. 우리는 작은 서비스이니 만큼 SFU 형태를 취하면 좋지 않을까 싶다.



































# 유라

시스템은 목적에 맞게 설계된 체계.
IT 인프라 = 시스템들의 기반 체계

인프라의 4가지는, 하드웨어HW/운영체제OS/네트워크Network/미들웨어Middleware 이다.

미들웨어 : 운영체제와 어플리케이션 사이. 하드웨어 위에 os, os 위에 sw가 올라가는데, sw와 os 중간의 다리 역할을 한다. 서로 통신하고 정상 운영되도록 도움을 주는 sw이다. 예를 들자면 dbms 엔진엑스 왓스 등등.

웹 서버와 웹어플리케이션 서버는 근본적으로 다르다.

FE는 알기가 더 어렵다 인프라를.

OSI 7 layer 7개층 전부 쓰인다.
네트워크. https 통신. TLS 도메인을 가지고 domain name server DNS로 이동. IP로 이동. 서버 접속 시작. DMZ 외부 네트워크와 내부 네트워크, 내부 시스템과 외부 시스템을 나눠주는 역할을 한다. 물리적으로 나눠주는 역할을 한다.

Firewall부터 백엔드 인프라라는듯? 방화벽부터.

기준점을 정확히 알기 위해서이다. 정상적으로 만들었는지 판단을 하기 위해서 알아야 한다.

인프라를 잘 아는 개발자를 찾기 힘들다. 인프라 개발자라는 친구가 따로 있다.

이런 개념이 이어야 한다는 것은 알고 있어야 한다.
앱이 정상적으로 동작하는지 알 수 있다.
- CS와 같은 레벨로 알아야한다.

시스템과 인프라.

최소한 인프라, 시스템, 어플리케이션 세가지는 반드시 필요하다.
EC2를 제공하며, public Network를 제공한다. 퍼블릭

인프라/시스템이 개발과 운영에 깔려있는 것이다.

2학기 라이브 뭐 많이 하는데 필요한 것만 들으면 될 듯. 뷰 같은건 패스하고..

- 모오닝

일기일회.
잘 사용하면 좋겠다.

