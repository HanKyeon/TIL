
# 20221017 REST API

#### HTTP
- Hyper Text Transfer Protocol
- HTML 문서와 같은 리소스들을 가져올 수 있도록 하는 프로토콜. 규칙, 약속.
- 웹 상에서 컨텐츠를 전송하기 위한 약속.
- 데이터 교환의 기초.
- 클라이언트-서버 프로토콜 이라고 부른다.
- 클라와 서버는 request와 response 교환에 의해 통신.
- 실제로 브라우저의 요청을 처리하는 서버 사이에는 더 많은 것이 존재하지만 HTTP 기본 명세에 대해서만 학습 예정.

- stateless. 무상태. 연결에서 연속적으로 수행되는 두 요청 사이에 링크가 없음. 응답을 마치고 연결을 끊는 순간 클라-서버 간 통신이 끝나며 상태 정보가 유지되지 않는다.
- 특정 페이지와 일관되게 상호작용 하려는 사용자에게 문제가 될 수 있다. 이를 해결하기 위해 쿠키와 세션을 사용해 서버 상태를 요청과 연결한다.

- 리소스에 대한 메소드 정의. GET POST PUT DELETE.
- 리소스에 대해 수행 할 원하는 작업을 나타내는 것이다.
- C:POST R:GET U:PUT D:DELETE

1. GET
- 서버에 리소스의 표현을 요청.
- GET을 사용하는 요청은 데이터만 검색해야 한다.

2. POST
- 데이터를 지정된 리소스에 제출.
- 서버의 상태를 변경

3. PUT
- 요청한 주소의 리소스를 수정.

4. DELETE
- 지정된 리소스를 삭제

#### HTTP response status codes
5가지 응답.
1. Informational response 100~199
2. 200~299 -> 성공
3. 300~399 -> redurect 호출 할 때 뜬다.
4. 400~499 -> 클라탓
5. 500~599 -> 서버탓

### Identifying resources on the Web : 리소스를 웹에서 식별하는 방법
- 웹에서 리소스를 식별하는 방법
- 리소스는 HTTP 요청으 ㅣ대상.
- 문서, 사진 등 어떤 것이든 가능하다.
- 각 리소스는 식별을 위해 URI로 식별된다. URL 아니고 URI이다.

### URI : Uniform Resource Identifier 통합 자원 식별자
- 인터넷에서 하나의 리소스를 가리키는 문자열.
- 가장 일반적인 URI는 웹 주소로 알려진 URL이다. URL은 경로로 식별한다.
- 특정한 이름 공간에서 이름으로 리소스를 식별하는 URI는 URN이다.

### URL : Uniform Resource Locator 통합 자원 위치
- 웹에서 주어진 리소스의 주소
구조
Scheme : 스키마. 거의 안씀 mailto 혹은 ftp 등
Authority : domain과 port로 구분되며 :으로 구분. 실제로 쓰지는 않는다. domain name은 요청중인 웹 서버의 이르밍다. 실제로는 ip 주소를 사용하는 것도 가능. 실생활에서 숫자로 된 걸 외우기 힘들어서 도메인 이름을 쓴다. Port 같은 경우, HTTP는 80, HTTPS는 443이다. 자주 써서 생략이 가능하도록 되어 있다. 나머지 프로토콜들은 생략 불가능. mailto나 ftp 등. django의 경우 80+00이 기본 포트로 설정되어 있다.
Path : 웹 서버의 리소스 경로. 실제 articles/create/가 실제 articles의 폴더 안에 있는 create라는 말이 아니라, 추상화된 형태의 구조를 나타낸다.
Parameter : 웹 서버에 제공하는 추가적인 데이터. 파라미터는 & 기호로 구분되는 key:value 쌍 목록이다. GET 방식일 때 노출이 된다. 서버는 리소스를 응답하기 전에 이러한 파라미터를 사용하여 추가 작업 수행 가능.
Anchor : 앵커. 리소스의 다른 부분에 대한 앵커이다. 리소스 내부 일종의 북마크를 나타내며, 자동으로 스크롤도 해주는 등이 가능하다. # 이후 붙여서 앵커로 이동 시키게 된다. 부트스트랩 독스에서 우측에 페이지 이동을 보면 # 이후가 계속 바뀌는 것을 확인한다.

앵커는 하이퍼링크와 비슷한 기능을 하는 인터넷 상의 다른 문서와 연결된 문자 혹은 그림이다.

**참고 : URN**
- URL의 단점을 극복하기 위해 등장하였으며, 자원 위치가 아니라 이름으로 자원을 식별하게 하여 자원 위치 상관 없이 가능하게 하려 했으나
- 실제 리소스를 찾는 방법이 보편화되어있지 않아 현재는 여전히 URL을 대부분 사용한다.

리소스 식별은 URI. 자원의 위치로 식별하는 것은 URL, 이름으로 식별하는 것은 URN.

## REST API

API : Application Programming Interface
애플리케이션과 프로그래밍적으로 소통하는 방법.
복잡한 코드를 추상화하여 프로그래밍 언어로 제공하는 것이다.
소프트웨어와 하드웨어 등의 간단한 계약인 것이다.
API는 복잡한 코드를 추상화하여 대신 사용 할 수 있는 몇가지 더 쉬운 구문을 제공한다.

Web API
- 웹 서버 또는 웹 브라우저를 위한 API
- 현재 웹 개발은 모든 것을 하나부터 열까지 직접 개발하기보다 여러 Open API를 활용하는 추세.
- 대표적인 Third Party Open API 서비스로는 Youtube API, Naver Api, Kakao API 등.
- API는 다양한 타입의 데이터를 응답. HTML XML JSON 등. 현재는 거의 대부분 JSON 사용.

**참고 Open API**
- 개발자 쓰라는 공개된 API
- 개발자에게 사유 응용 소프트웨어나 웹 서비스의 프로그래밍적 권한을 제공. 가이드가 존재한다. 가이드에 맞게 요청을 보내야 사용이 가능하다.

- REST : 방법론의 이름. Representational State Transfer
- API 서버를 개발하기 위한 일종의 소프트웨어 설계 방법론. 로이 필딩의 박사학위 논문에서 처음으로 소개된 후 네트워킹 문화에 널리 퍼짐.
- 소프트웨어 아키텍쳐 디자인 제약 모음.
- REST 원리를 따르는 시스템을 RESTful  하다고 부른다.
- REST의 기본 아이디어는 리소스. 즉 자원이다. 자원을 정의하고 자원에 대한 주소를 지정하는 전반적인 방법을 서술한다.

#### REST에서 자원을 정의하고 주소를 지정하는 방법
1. 자원 식별 : URI. URL로 자원 식별할 것.
2. 자원의 행위 : HTTP Method. GET/POST/PUT/DELETE로 행위 표현
3. 자원의 표현 : 자원과 행위를 통해 궁극적으로 표현되는 추상화된 결과물. JSON으로 표현된 데이터를 제공.

### JSON
- JSON
- JavaScript의 표기법을 따른 단순 문자열.
- 파이썬의 딕셔너리, 자스의 object처럼 C계열의 언어가 갖고있는 자료구조로, 쉽게 변환할 수 있는 key-value 구조를 갖고 있음.
- 사람이 읽고 쓰기 쉽고 기계가 파싱하고 만들어내기 쉽기 때문에 현재 API에서 가장 많이 사용하는 데이터 타입.
- 키 : 밸류 형태.

### REST 정리
- 자원을 정의하고 자원에 대한 주소를 지정하는 방법의 모음.
1. 자원을 식별 : URI
2. 자원에 대한 행위 : HTTP Mathods
3. 자원을 표현 : JSON
- 설계 방법론은 지키지 않았을 때 잃는 것보다 지켰을 때 얻는 것이 훨씬 많다.
- 단, 설계 방법론을 지키지 않더라고 동작 여부에 큰 영향을 미치지는 않는다.
- 말 그대로 방법론일 뿐이며 규칙이나 규약은 아니다.

- 오늘 REST API를 장고로 구현 할 것이다.

## Response JSON
- JSON 형태로의 서버 응답 변화
- 다양한 방법의 JSON 응답

### 서버가 응답하는 것
- 지금까지 django로 작성한 서버는 사용자에게 페이지 html만 응답하고 있었다.
- 하지만 서버가 응답 할 수 있는 것은 페이지 뿐만 아니라 다양한 데이터 타입을 응답 할 수 있다. JSON 등.
- html을 응답 받는 것이 아니라면, JSON을 받았을 때, 그 화면은 누가 구성하게 되는가? -> 화면을 구성하는 Front-end Framework가 구현하게 된다.
- 장고로부터 DB를 받아서 꾸며서 화면을 보여줄 수 있는, 화면을 장고보다 더 잘 꾸밀 수 있는 기능을 가진 프론트엔드 프레임워크를 사용하게 될 것이다. 우리는 Vue.js를 사용 할 것이다.
- 그렇게 되면 장고는 더이상 template 부분을 담당하지 않게 되며, 프/백이 구분되어 구성되게 된다.
- 이번 시간에는 JSON을 응답하는 django 서버를 구성하는 법을 학습 할 것이다.


차트 같은 경우는, 계속 달라지기 때문에 django로 하면 비효율적이다. 작은 json 데이터를 계속 받아오면서 확인해줘야 한다. 지속적으로 오는 json 값을 받아 프엔이 꾸며줘야 한다.
opgg 같은 경우, 게임사에서 받는 json을 이쁘게 만들어주는 것이다.

# JSON_RESPONSE
## 사전 준비
프로젝트 urls.py에서 url을 `path('api/v1/', include('articles.urls'))` 로 이어준다.
### Response
1. HTML 응답
2. JsonResponse()를 사용한 JSON 응답.
3. django Serializer를 사용한 JSON 응답.
4. django REST framework를 사용한 JSON 응답.

개발자 도구에서 content-type 을 알려준다.

Serialization
- 직렬화. 마땅한 번역은 없다.
- 데이터 구조나 객체 상태를 동일 혹은 다른 컴퓨터 환경에 저장하고, 나중에 재구성 할 수 있는 포맷으로 변환하는 과정. 즉, 어떠한 언어나 환경에서도 나중에 다시 쉽게 사용 할 수 있는 포맷으로 변환하는 과정.
- 변환 포맷은 대표적으로 json xml yaml이 있으며 json이 가장 보편적이다.

Serializers in django
- django의 serialize는 쿼리셋 및 모델 인스턴스와 같은 복잡한 데이터를 JSON, XML 등의 유형으로 쉽게 변환 할 수 있는 Python 데이터 타입으로 만들어준다. Serialize 부분이다. 딱히 만든다기 보다는 만들어진 함수를 쓴다.

Django REST framework (DRF)
- 장고에서 Restful API 서버를 쉽게 구축 할 수 있도록 도와주는 오픈소스 라이브러리.
- 웹 API 구축을 위한 강력한 toolkit 제공.
- REST framework를 작성하기 위한 여러 기능을 제공.
- DRF의 serializer는 django의 Form 및 ModelForm 클래스와 매우 유사하게 작동.

##### 새로 serializers.py 가 생성되어 있다.
ModelForm과 거의 똑같은 구조를 가지고 있다. 상속 받는 내용만 다르고.
이것은 DRF가 기존 모델폼의 작성법과 똑같이 만들어 구성해둔 것이다. 라이브러리 구성 자체가 ModelForm과 비슷하게 만들어둔 것이다.
-> serializer.data로 불러오면 된다.
- DRF를 리턴 받으면 자동으로 html을 받아서 열어주는데, 실제로는 JSON만 넘겨준다.

# DRF

POSTMAN은 여러 기능을 제공하지만 단순한 기능만 사용 할 것.

1. 요청 URL 작성
2. 요청 시 필요한 파라미터 작성
3. 응답 결과 출력

세가지 기능만 사용 할 예정.

`pip install djangorestframework` 이걸로 rest_framework 설치 이후 INSTALLED_APPS에 추가.

ModelSerializer 작성.
정해진 것은 없지만 foms.py처럼 앱폴더 안에 생성해준다.

아래는 serializers.py 의 기본 내용.
목록, 쿼리셋을 시리얼라이징 할 것이다. 그래서 ArticleListSerializer로 지정해준다.
게시글 다닝ㄹ 객체는 다른 시리얼라이저를 써야 한다.
```
from rest_framework import serializers
from .models import Article

class ArticleListSerializer(serializers.ModelSerializer):

    class Meta:
        model = Article
        fields = ("id", "title", "content")
```

- ModelSerializer
- 모델 시리얼라이저 클래스는 모델 필드에 해당하는 필드가 있는 Serializers 클래스를 자동으로 만들 수 있는 숏컷을 제공.
1. Model 정보에 맞춰 자동으로 필드를 생성.
2. serializer에 대한 유효성 검사기를 자동으로 생성. is_valid()
3. .create() 및 .update()의 간단한 기본 구현이 포함 됨.
- 최대한 기본 폼과 비슷하게 만든 라이브러리.

`from articles.serializers import ArticleListSerializer`
`serializer = ArticleListSerializer()`
`article = Article.objects.get(pk=1)`
`serializer = ArticleListSerializer(article)`
`serializer.data`

```
articles = Article.objects.all()
serializer = ArticleListSerializer(articles)
```
위처럼 여러개의 articles를 동시에 넣으려면 many 옵션을 True로 해주어야 한다.
`serializer = ArticleListSerializer(articles, many=True)`

## Build RESTful API - Article
2개의 url, 7개의 기능.
articles/ : GET, POST, PUT, DELETE
articles/num/ : GET, PUT, DELETE

### GET - List
- 게시글 데이터 목록 조회하기.
- DRF에서 api_view 데코레이터 작성은 필수.
```
from rest_framework.response import Response
from rest_framework.decorators import api_view

from articles import serializers
from .models import Article

@api_view(['GET'])
def article_list(request):
    articles = Article.objects.all() # 쿼리셋 받는다.
    serializers = serializers.ArticleListSerializer(articles, many=True)
    return Response(serializers.data)
```
위처럼 하여 진행한다. 참고로 DRF에서는 api_view 데코레이터는 필수이다.
쿼리셋으로 받는다.

### GET - Detail
- 단일 게시글 데이터 조회
- 각 데이터의 상세 정보를 제공하는 ArticleSerializer 정의해야 한다.
`path('articles/<int:article_pk>/', views.article_detail),` urls.py에 추가
```
# views.py
@api_view(['GET'])
def article_detail(request, article_pk):
    article = Article.objects.get(pk=article_pk)
    serializers = ArticleSerializer(article)
    return Response(serializers.data)
```
```
# serializers.py
class ArticleSerializer(serializers.ModelSerializer):

    class Meta:
        model = Article
        fields = '__all__'
```


### POST
- 게시글 데이터 생성하기.
- 요청에 대한 데이터 생성이 성공했을 경우 201 Created 상태 코드 응답, 실패 시 400 Bad request 응답.
```
# POST를 GET serializer에 넣을 것이다.
# 단, article_list()는 배리어블라우팅을 받지 않으므로 생성에는 이것이 더 적합.
# article_list() 함수를 아래와 같이 조건에 따라 변환 시킨다.

@api_view(['GET', 'POST'])
def article_list(request):
    if request.method == "GET":
        articles = Article.objects.all()
        serializer = ArticleListSerializer(articles, many=True)
        return Response(serializer.data)
    
    elif request.method == "POST":
        serializer = ArticleSerializer(data=request.data)
        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data, status=status.HTTP_201_CREATED) # 201 리턴
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST) # 400리턴
```
포스트맨에서는 POST로 바꿔주고, Params가 아니라 Body로 보내주어야 한다.
body에서 키 밸류를 작성해서 send하면 해당 article이 적용이 된다. 게시글이 생성 되었을 때, serializer 출력을 어떻게 할 것인지 결정하는 것이 serializers.py에서 있는 모델 같은 것이다.
- exclude는 따로 써보면 된다.
`is_valid(raise_exception=True)` : 유효하지 않은 데이터에 대해 예외 발생 시키기.
is_valid()는 유효성 검사 오류가 잇는 경우 ValidationError 예외를 발생시키는 선택적 raise_exception 인자를 사용 할 수 있다.
DRF에서 제공하는 기본 예외처리기에 의해 자동으로 처리되며, 기본적으로 HTTP 400 응답 반환.

raise_exception을 적용한 코드는 아래와 같다.
```
@api_view(['GET', 'POST'])
def article_list(request):
    if request.method == "GET":
        articles = Article.objects.all()
        serializer = ArticleListSerializer(articles, many=True)
        return Response(serializer.data)
    
    elif request.method == "POST":
        serializer = ArticleSerializer(data=request.data)
        if serializer.is_valid(raise_exception=True): # 400리턴
            serializer.save()
            return Response(serializer.data, status=status.HTTP_201_CREATED) # 201 리턴
        # return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST) # 400리턴
```

### DELETE
- DELETE는 pk가 필요해야 한다. 단일 게시글을 지우기 위해서. 그렇기에 article_detail 함수에서 쓴다.
```
@api_view(['GET', 'DELETE'])
def article_detail(request, article_pk):
    article = Article.objects.get(pk=article_pk)
    if request.method == "GET":
        serializers = ArticleSerializer(article)
        return Response(serializers.data)
    elif request.method == "DELETE":
        article.delete()
        return Response(status=status.HTTP_204_NO_CONTENT) # 삭제하고 나면 204가 정확한 응답이다.
```
위와 같이 함수가 변화하게 된다.

### PUT
- 200 OK 상태코드 응답.
- 특정 게시글 수정은 pk가 필요하다.
```
@api_view(['GET', 'DELETE', 'PUT'])
def article_detail(request, article_pk):
    article = Article.objects.get(pk=article_pk)
    if request.method == "GET":
        serializer = ArticleSerializer(article)
        return Response(serializer.data)
    elif request.method == "DELETE":
        article.delete()
        return Response(status=status.HTTP_204_NO_CONTENT) # 삭제하고 나면 204가 정확한 응답이다.
    elif request.method == "PUT":
        serializer = ArticleSerializer(article, data=request.data) # article_list의 POST와 다른 점은 data가 첫번째 인자가 아니고 인스턴스가 첫째 인자라서 data를 위에서는 명시해줘야 한다.
        if serializer.is_valid(raise_exception=True):
            serializer.save()
            return Response(serializer.data) # 그냥 수정 200이라서 status에 대해 별도 입력 안해도 된다.
```

위는 목록 조회/생성
아래는 단일 조회/수정/삭제

댓글에는 FK가 존재. FK를 저장 할 때 추가해주면 Comment는 Article과 동일하다.


### django REST framework = N:1 Relation

comment 조회
```
# 댓글 리스트 전체 조회
@api_view(['GET'])
def comment_list(request):
    if request.method == "GET":
        comments = Comment.objects.all()
        serializer = CommentSerializer(comments, many=True)
        return Response(serializer.data)

# 단일 댓글 조회
@api_view(['GET', 'DELETE', 'PUT'])
def comment_detail(request, comment_pk):
    comment = Comment.objects.get(pk=comment_pk)
    if request.method == "GET":
        serializer = CommentSerializer(comment)
        return Response(serializer.data)
```
댓글 작성 같은 경우, article_pk가 필요하기에, urls.py에 하나를 더 만들어야 할 것이다.

ModelForm처럼 commit=False 옵션은 없다. save() 인자로 바로 넣어준다.

이 때, FK를 is_valid 이후에 넣어주기 때문에, is_valid 유효성 검사에서 제외하여 읽기 전용 field로 바꿔주어야 한다. serializers.py에서 read_only_fields로 지정해줭 ㅑ한다.

읽기 전용 필드 : 유효성 검사에서 제외시키고, 데이터 조회 시에는 출력 하도록 한다.
serializers.py에서의 read_only_fields = ('컬럼')

## 역참조 데이터 조회
1. 특정 게시글에 작성된 댓글 목록 출력하기.
- 기존 필드 override
2. 특정 게시글에 작성된 댓글의 갯수 출력하기.
- 새로운 필드 추가.

- 특정 게시글에 작성된 댓글 목록 출력하기
```
class ArticleSerializer(serializers.ModelSerializer):
    comment_set = serializers.PrimaryKeyRelatedField(many=True, read_only=True)

    class Meta:
        model = Article
        fields = '__all__'
```
위와 같이 시리얼라이저.py 수정. N:1이므로 many = True가 필요하다. 게시글 당 하나가 아니므로. 1에서 무조건 N을 참조하는 것이기 때문에.

이렇게 될 경우 comment_set을 오버라이드 한 것이므로 related_name을 바꿔주어야 한다. models.py에서.

이 때, POSTMAN에서 댓글의 pk만 가져오는데, 이 때 댓글의 세부 정보까지 가져오고 싶다면 PrimaryKeyRelatedField로 하는 것이 아니라 다른 Field를 사용한다. 그 아래의 CommentSerializer로 이용해서.
```
class CommentSerializer(serializers.ModelSerializer):

    class Meta:
        model = Comment
        fields = '__all__'
        read_only_fields = ('article',)

class ArticleSerializer(serializers.ModelSerializer):
    # comment_set = serializers.PrimaryKeyRelatedField(many=True, read_only=True)
    comments = CommentSerializer(many=True, read_only=True)

    class Meta:
        model = Article
        fields = '__all__'
```
위처럼 하면 16, 17 이런식으로 나오는 것이 아닌 정보째로 나오게 된다.
related name으로 명시해야 한다.
상황에 맞춰서 Serializers를 계속 추가해가며 데이터를 만지면 된다.

### 해당 게시글의 댓글 개수까지 함께 출력하기. 카운팅 해야한다.
`comment_count = serializers.IntegerField(source='comments.count', read_only=True)`
해당 명령어를 ArticleSerializer 객체에 넣어줌으로써 하나를 갖게 된다.
원래 source는 article.comment_set.count() 이지만 article은 생략하고 () 생략해서 comment_set.count 가 된다. related_name을 설정했으니 comments.count 라고 해야하고.

#### 특정 field에서 read_only 속성
override 혹은 추가되는 속성 같은 경우, Field 혹은 Serializer를 선언하며 read_only를 선언해주어야 한다.
read_only_fields에 넣어줄 수 있는 것은 이전에 물리적으로 존재했던 컬럼들 뿐이다. models.py에 물리적으로 있는지 없는지에 따라서 read_only_fields에 추가가 가능하고 불가능하고가 정해진다.

없는 것을 조회해도 500 에러가 나온다. 404 page not found 에러가 나와야 하는데 500이 뜬다. 그것은 get에서 없을 때 혹은 1개 이상일 때 예외가 발생하게 된다. return까지 가지 못해서 코드가 온전하게 끝내지 못한다. 코드가 온전히 끝내지 못하면 500 에러를 발생하게 된다. 없는 게시글을 조회하면 404를 줘야 한다.
바뀐다면
Article.objects.all() 이런 것들이 get_list_or_404(Article) 처럼 변하고
Article.objects.get(pk=article_pk) 이런 것들이 get_object_or_404(Article, pk=article_pk) 처럼 변한다.

왜? : 서버가 적절한 예외처리를 하고, 클라에게 올바른 에러를 전달하는 것 또한 중요한 요소이기 때문에.

# 마무리
1. REST API : HTTP / REST. REST는 규격이라 안지켜도 되지만, 지켜야 좋다.
2. Response JSON : 문서가 아닌, JSON을 쓴다. 템플릿 안쓴다.
3. Django REST framework - Single Model : 
3. Django REST framework - N:1 Relation : M:N도 같은 방식으로 구현하면 된다. 역참조를 어떻게 JSON으로 하는지 확인해야 한다.


django-seed 설치 방법

pip install django-seed
 -> 이후 settings.py에 'django_seed', 추가.
pip install faker
pip install toposort
pip install django

pip install psycopg2

이후 python manage.py seed 앱이름 --number=원하는숫자



# 웹엑스

POST맨 사용. Pretty는 약간 이쁘게, raw는 쌩거, Preview는 렌더링 한 모습도.

우리는 이제 django를 data만 보내줄 것이다.
현재 1:1이라 단단한데
N:1 N:M user 등 모델 객체, Model Object를 받아오면 쿼리셋 형태로 오게 되는데, 그런 쿼리셋을 JSON 형태로 바꿔주어야 한다.
모델 데이터를 DRF Django Rest Framework로 바꿔줘야 함. DRF를 사용하면 모델 데이터를 아주 쉽게 JSON 형식으로 바꿔준다. DRF의 serializer를 이용해 복잡한 Model data를 JSON으로 바꿔줄 것이다.

담주 월평 REST 개념으로 보는데, 다음주인지 잘 모르겠다. REST API로 CRUD 하는 것.

## 오후
DRF를 배운 시점부터 장고를 백엔드를 쓰는 출발점이다. view를 이용해 crud를 하는 것이. 여기서 이제 drf+ 해서 추가학습으로 나오게 된다. 이런 부분들은 구글을 통해 충분히 따라할 수 있다.


MethodField가 있다. 어디에도 없지만 Field를 더 정의하고 싶을 때.
원래 오브젝트에 없는 데이터를 추가 해주고 싶을 때 사용하는 것이 overwrite나 MethodField 등.
추가적으로 시리얼라이저로 넣어줘야 하므로, 그 때 사용된다.

기존에는 쿼리셋에 들어온 객체를 _set으로 불러왔는데
comment_set 관련 내일 오프로 설명 예정. 데이터가 serializer는 객체이다. serializer.data에 json 객체 및 errors 등의 여러 정보들이 들어있는 하나의 객체이다. data는 기본 포맷이 JSON이다. XML이나 csv 형식으로 하고 싶다면 따로 구현해줘야 한다.

DRF에는 굉장히 많은 기능들이 있다. RESTful한 API를 쓰기 위한 방법의 기초를 배운 것이다.
백엔드도 어떻게 RESTful 데이터를 빠르게 할 수 있는지 하는 것. 원래라면 반복해서 seralizers.serialize('json', articles) 이런 식으로 써주어야 하는데 DRF를 이용해 익히면 DRF의 기능을 편리하게 사용이 가능하다.

요즘은 fast api, node.js Flask 등을 이용해 API를 많이 짠다. RESTful한 데이터를 어떻게 빠르고 구조적으로 짤 것인지에 대해 얘기 할 것이다.

DRF를 이용하면 페이지네이션, 인피니티 스크롤 등을 상대적으로 손쉽게 사용이 가능하다. 새로운 기능들을 하나하나 추가 해가는 재미가 있을 것이다.


