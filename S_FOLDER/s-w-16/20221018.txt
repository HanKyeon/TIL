
HTTP 특성
stateless
connectionless

CREATE 할 때 POST
UPDATE 할 때 PUT. PATCH도 업데이트인데 다른 점은 모든 데이터를 고칠 때 PUT을 쓰고, 일부 데이터를 수정 할 때 PATCH를 쓴다. 이건 회사 바이 회사.
DELETE는 DELETE

ip 주소 142.521.42.142 등등은 Domain으로 대체된다. google.com 이런거.

Port : 어떤 프로그램의 네트워크와 소통하는지 구분 해주는 역할.
HTTP의 80 포트는 기본 포트. 
HTTPS의 443 포트는 기본 포트.
기본 포트로 만들 경우, 생략이 가능하다.

Path : /urls/

Query : %~~&a:b& ...

Fragment : #좌표. 안드로이드 프래그먼트와 다른 역할 같다. 좌표 기억하는 느낌.

REST 개념:
자원은 url로 찾고(표현하고) 행위는 method로 구분하고 json으로 응답한다.

DRF django rest framework
데이터를 직렬화해서 줄 것이다.

Serializer : 일반적으로 serializers.ModelSerializer 를 상속 받는데, DRF는 문서가 잘 되어 있으니 문서 확인해봐라. DRF의 모든 지식을 제공하지 않는다. 직접 해보면서 해봐라.

Serializer의ㅏ Meta class에 어떤 모델을 할 것인지, 어떤 json 데이터가 필요한지 적어줘야 한다. 슬슬 커스텀 할 것이다.

FE와 BE가 싸우는 이유이다. 데이터 어떻게 내려달라고 하는 것. 복수형일 경우 Many=True

views.py에서 했던 만드는 기능들을 다 DRF가 가능하다. 근데 이 때, created_at, updated_at 등은 막아야 한다. 그런 친구들은 read_only_fields로 Meta에서 지정해주는데, 이것은 Serializer로 수정 혹은 생성이 불가능하다는 의미로 Meta class에서 read_only_fields를 지정해준다.

역참조 할 때
comment_set = serializers.PrimaryKeyRelatedField
역참조 매니저의, 나를 갖고 있는 comment의 id값을 리턴해준다. 보통 안쓴다.

cooment_set = CommentSerializer(many=True, read_only=True)
이건 가끔 혹은 많이 쓴다. 코멘트 쿼리셋을 받아서 모든 코멘트를 직렬화해서 가져오는 코드. 역참조를 하려 했던 related manager임을 자동으로 인식해서 다른 동작을 정의하지 않아도 알아서 역참조를 하는 related manager임을 알아내서 자동으로 역참조 Serializer로 직렬화해서 key의 밸류 값으로 넣어준다.
JSON에 추가적인 데이터를 넣고 싶다면 더 넣어도 된다.

가장 많이 쓰는건 methodSerializer. 이 친구로 field를 지정하면 내부적으로 정이해준 method를 실행해준다. 어떤 데이터를 가져올지 하는 함수를 정의해준다.

comment_count = serializers.IntegerField(source='comment_set.count', read_only=True)
source에 들어가는건 그냥 ORM 문법. MethodField로 정의하고 comment_count의 값을 return 해주고 하면 된다.

--method Serializer는 뭐야?--

지정해야 한다. 함수가 필요하다.
class ArticleSerializer
  followers = MethodSerializer()
  def get_followers()
    함수 내용
    return 어떤 데이터
  


님들 채팅 구현 못함.
누가 채팅방 입장 했는지, 둘 사이의 커넥션이 이어져있는지 확인해야 한다.
둘이 게임을 한다. -> 총을 쐈을 때 맞았는지 아닌지, 커넥션이 연결되어 있어야 한다.
근데 HTTP는 커넥션이 연결되어 있지 않다.
우리는 아직 연결이 된 상태를 유지하는 것을 못한다.
그걸 하는게 바로 다음에 배워야 할 부분이다. 찾아보면 딱 하나 나온다... 쿠키와 세션이 아니라 다른걸로 유지한다 django channels 라는 라이브러리가 잇다 읽어보면 간이 카카오톡 이런게 가능하다. user와 user 사이에 커넥션을 하나 열어놓고 데이터를 꾸준히 소통 가능하다.



ORM에서 values와 values_list()의 차이.
values_list에 인자를 넣어주면 해당 인자만 튜플 형태로 반환. 쿼리셋 튜플
vslues()에 인자를 넣으면 인자:값 딕셔너리 형태로 반환.
b 리스트에 값만 넣길 바라면 순회하면서 건드려주면 될듯.


https://jjini-3-coding.tistory.com/m/2

https://ba-gotocode131.tistory.com/m/84

https://joshua1988.github.io/vue-camp/vue/axios.html#%E1%84%8B%E1%85%A2%E1%86%A8%E1%84%89%E1%85%B5%E1%84%8B%E1%85%A9%E1%84%89%E1%85%B3-%E1%84%89%E1%85%A5%E1%86%AF%E1%84%8E%E1%85%B5

https://www.django-rest-framework.org/topics/html-and-forms/

https://intrepidgeeks.com/tutorial/django-rest-framework-get-external-api-through-apiview

https://ko.quish.tv/creating-weather-app-django-using-python-requests

https://jinmay.github.io/2020/05/25/django/django-values-and-values-list/

https://tutorial.djangogirls.org/ko/django_orm/

https://velog.io/@oen/SerializerMethodField-%EA%B3%B5%EC%8B%9D%EB%AC%B8%EC%84%9C-%EB%B2%88%EC%97%AD

https://hangjastar.tistory.com/m/203

https://eunjin3786.tistory.com/m/268














