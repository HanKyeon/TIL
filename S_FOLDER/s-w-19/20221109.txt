
# 20221109

## UX & UI
- 유저와 가장 가까이에 있는 분야, 데이터를 기반으로 유저를 조사하고 분석해서 개발자, 디자이너가 이해 할 수있게 소통.
- 유저가 느끼는 느낌, 태도, 행동을 디자인.

**좋은 UX 설계하기 위해서는**
- 사람들의 마음과 생각을 이해하고 정리해서 제품에 녹여내는 과정이 필요.
- 유저 리서치, 데이터 설계 및 정제, 유저 시나리오, 프로토타입 설계 등이 필요하다.

**UI**
- user interface
- 유저에게 보여지는 화면을 디자인.
- UX를 고려한 디자인을 반영, 이 과정에서 기능 개선 혹은 추가가 필요한 경우. FE 개발자와 가장 많이 소통.

- 좋은 UI는 디자인, 심미적인 부분 역시 중요하지만 사용자가 보다 쉽고 편리하게 사용 할 수 있도록 하는 부분까지 고려되어야 함.
- 통일된 디자인을 위한 디자인 시스템, 소통을 위한 중간 산출물, 프로토타입 등이 필요.
- UI 디자인에 있어 가장 중요한 것은 협업이다.

- 드자이너, 기획자, 개발자가 필요.
- UX는 사용자 경험을 이해하기 위한 통계 모델 설계, 리서치 기획 및 사용자 지표 정의, 정성적 정량적 방법을 사용한 사용자 조사.
- UI는 다양한 디자인 프로토타이핑 툴을 사용해서 개발 가이드를 제공, 시각 디자인을 고려해서 체계적인 디자인 컨셉을 보여줌, 제품을 이해하고 더 나은 UI Flow와 사용자 경험을 디자인.

- 개발자는 단순히 기능 개발만 하는 사람이 아니며, 제품에 대해 고민하고 소통하는 능력이 필요. 특히 FE 개발자는 UI UX에 대해 고민하고 이해해야 한다.

**생각하는 UX UI 디자인**
- UX UI를 디자인 하는 것은 굉장히 섬세하고 어려운 작업이다.
- UX UI 연구가 많아서 가이드 들은 만들어지고 있다.
- ex) 애플. 버튼 간 거리 44px 44px 이상, 텍스트 크기 11이상 등등. 애플 디자인 리소스를 다운 받아보면 굉장히 많다.

### prototyping
- 애플리케이션의 프로토타입을 만드는 것
- 즉, 개발중인 SW 프로그램의 완성되기 전 버전을 만드는 것.
- 한 번에 완성 버전이 나올 수 없기에 중간마다 현재 상태를 체크하는 지점.

### prototyping tool 시장.
- UI UX 디자인을 프로토타이핑 하기 위한 도구는 굉장히 많고 빠른 패러다임의 변화로 인해 치열한 경쟁이 진행되고 있다.
- 이전에는 Sketch 툴이 굉장히 많이 사용되었지만, 현재는 Figma 라는 툴이 약 70%의 시장 점유율을 보이고 있음.

### Figma
- 인터페이스 디자인을 위한 협업 웹 애플리케이션.
- 협업에 중점을 두면서 UI UX 설계에 초점을 맞춰줌.

- 웹 기반 시스템. 굉장히 가벼운 환경에서 실행 가능, 모든 작업 내역이 웹에 저장이 된다.
- 실시간으로 팀원들이 협업 할 수 있는 기능을 제공.
- 직관적이고 다양한 디자인 툴을 제공.
- 피그마 사용자들이 만든 다양한 플러그인이 존재.
- 대부분의 기능이 무료이다.

### 플젝 시작 전에.
- 개발부터 시작하지 말고 반드시 충분한 기획을 거칠 것
- 우리가 완성하고자 하는 대략적인 모습을 그려보는 과정이 필요.
- 이러한 과정을 통해 기획에서 빠진 화면이나 API 등을 확인 할 수 있음.
- 설계와 기획이 끝난 후 개발을 시작해야 체계적인 진행이 가능하다.

## Vue Router

### Routing
- 네트워크에서 경로를 선택하는 프로세스.
- 웹 서비스에서의 라우팅 : 유저가 방문한 URL에 대해 적절한 결과를 응답하는 것ㅇ.
- 예시 : /articles/index/에 접근하면 articles의 index에 대한 결과를 보내줌.

### Routing in SSR
- 장고때는 view 함수로 서버가 모든 라우팅을 통제. URL로 요청이 오면 완성된 HTML을 보내주었다. 장고에서는 완성본을 받아왔었다. 즉, 결론적으로 Routing에 대한 결정권을 서버가 가졌었다.

- 그러나 현재 Vue로 만드는 것은 SPA, CSR 방식을 이용하는 방식을 쓴다. 화면을 그리는 주체가 클라쪽이 된다.
- 즉, 하나의 URL만 가질 수 있음. SPA이므로.

### why routing?
- 동작에 따라 URL이 반드시 바뀌어야 하나? 그렇지는 않다. 단, 유저의 사용성 관점에서는 필요하ㅏ다.
- Routing이 없다면
 1. 유저가 URL을 통한 페이지의 변화를 감지 할 수 없음.
 2. 페이지가 무엇을 렌더링 중인지에 대한 상태를 알 수 없음. 새로고침 시 처음 페이지로 돌아가고 링크 공유 할 시 처음 페이지만 공유가능
 3. 브라우저 뒤로가기 등의 기능을 사용 할 수 없음.

## Vue Router
- 뷰의 공식 라우터
- SPA 상에서 라우팅을 쉽게 개발 할 수 있는 기능을 제공.
- routes에 컴포넌트를 매핑한 후, 어떤 URL에서 렌더링 할 지 알려준다.
 - 즉, SPA를 MPA처럼 URL을 이동하면서 사용 가능.
 - SPA의 단점 중 하나인 URL이 변경되지 않는다를 해결.
- 일종의 훼이크이다.
- 참고 : MPA는 Multiple Page Application. 여러개 페이지로 구성된 앱. SSR 방식.

`vue add router`를 통해 프로젝트 만든다.

### 라우터 히스토리 모드
- 브라우저의 History API를 활용한 방식.
 - 새로고침 없이 URL 이동 기록을 남길 수 있음.
- 우리에게 익숙한 URL 구조로 사용 가능.
 - ex) http://localhost:8080/index
- **참고** History mode 안쓰면 디폴트 값인 해시 모드로 사용됨. http://localhost:8080#index
- URL에서 #해시는 특정 위치의 북마크, 마킹.

- 라우터 추가 시 스크립트가 사라지고 views 폴더가 생기고 router 폴더가 생긴다.
- 라우터 폴더의 index.js가 장고의 urls.py 역할을 한다. 주소에 따른 컴포넌트 렌더링이 매핑되어 있다.
- router를 통해 SPA임에도 MPA처럼 느끼게 만든다.
- router-link 태그는 html에는 a태그로 만들어져 있다. 하지만 페이지 이동이 되지는 않는다. 즉, a태그의 이벤트를 막아두었다. 구성은 a태그로 되어 있지만.

### router-link
- a태그와 비슷한 기능. url만 이동시킨다.
 - routes에 등록된 컴포넌트와 매핑됨.
 - 히스토리 모드에서 router-link는 클릭 이벤트를 차단하여 a태그와 달리 브라우저가 페이지를 다시 로드하지 않도록 함.
- 목표 경로는 to 속성으로 지정됨.
- 기능에 맞게 HTMl에서 a태그로 rendering 되지만, 필요에 따라 다른 개체로 바뀔 수 있음

### router-view
- router-view 태그 같은 경우, 클릭 했을 때 컴포넌트가 렌더링 될 위치를 정해주는 태그이다.하나씩만 존재할 것이다.
- 라우터를 누를 때마다 변경하는 곳.
- 주어진 url에 대해 일치하는 컴포넌트를 렌더링 하는 컴포넌트.
- 실제 컴포넌트가 아니라 DOM에 부착되어 보이는 자리를 의미.
- router-link를 클릭하면 routes에 매핑된 컴포넌트를 렌더링.
- django에서의 block tag와 비슷함. App.vue는 base.html, router-view는 블록 태그로 감싸진 부분.

### src / router / index.js : 짜스 파일
- 라우터에 관련된 정보 및 설정이 작성되는 곳
- django에서의 urls.py에 해당.
- routes에 URL과 컴포넌트를 매핑.
- path, name, component를 등록한다. routes 리스트에 넣는 객체.

### src/Views : 폴더
- router-view에 들어갈 컴포넌트 작성.
- 기존에 작성하던 곳은 components 폴더 뿐이었지만 이제 두 폴더로 나눠짐.
- 각 폴더 안의 vue 파일들이 기능적으로 다른 것은 아님.

- views에 들어가는 컴포넌트들은 router와 매핑되는 컴포넌트들이다.
- 즉, router와 매핑되는 컴포넌트들은 views 폴더에 넣어야 하고
- router에 매핑되지 않은 컴포넌트들은 components 폴더에 넣어준다.
- routes에 매핑된 컴포넌트의 하위 컴포넌트.
- 라우터에 매핑된 컴포넌트를 이름으로 구분 할 수 있게 HomeView.vue 이런 식으로 구분 할 수 있도록 한다.
- **규약은 아니다.**

## Vue router 실습
- 주소 이동 방법 2가지.
1. 선언적 방식 내비게이션
2. 프로그래밍 방식 내비게이션

### 선언적 방식 내비게이션
- router-link의 to 속성으로 주소 전달. routes에 등록된 주소와 매핑된 컴포넌트로 이동.
#### name routes
- router/index.js에서 선언한 routes 리스트에서 name 속성을 통해 접근이 가능하다.
- 리스트의 각각 객체를 route라 한다. :to="{name:'home}" 이런 식으로 v-bind로 한다.

### 프로그래밍 방식 내비게이션
- Vue 인스턴스 내부에서 라우터 인스턴스에 $router로 접근 할 수 있음.
- 다른 URL로 이동하려면 this.$router.push를 사용.
 - history stack에 이동할 URL을 push하는 방식.
 - history stack에 기록이 남기 때문에 사용자가 브라우저의 뒤로 가기 버튼을 클릭하면 이전 URL로 이동 할 수 있음.
- 결국 <router-link :to="">를 클릭하는 것과 $router.push()를 호출하는 것은 같은 동작이다.

### Dynamic Route Matching
- 동적 인자 전달. 장도의 배리어블 라우팅
 - URL의 특정 값을 변수처럼 사용 할 수 있음.
- `$route.params`로 접근 가능.

### Lazy loading
`component: () => import(/* webpackChunkName: " */ "../views/HelloView.vue"),`
이런 방식으로 컴포넌트를 적으면 lazy loading이 된다.
- 처음부터 컴포넌트를 전부 다 가져오려 하면 시간이 오래 걸린다.
- 하지만 레이지 로딩을 하면 느리게 된다.


# reactive 한 데이터, 값으로 옵셔널 체인저를 쓸거면 computed에 적어야 한다.


## 내비게이션 가드

- Vue router를 통해 특정 URL에 접근 할 때 **다른 url로 redirect를 하거나** **해당 URL로의 접근을 막는** 방법. ex) 사용자의 인증 정보가 없으면 특정 페이지에 접근하지 못하게 함.

종류
1. 전역 가드 : 애플리케이션 전역에서 동작
2. 라우터 가드 : 특정 URL에서만 동작
3. 컴포넌트 가드 : 라우터 컴포넌트 안에 정의

### 전역 가드

Global Before Guard

- 다른 url 주소로 이동 할 때 항상 실행.
- router/index.js에 router.beforeEach()를 사용하여 설정.
- 콜백 함수의 값으로 다음과 같이 3개의 인자를 받음.
1. to: 이동 할 URL 정보가 담긴 Route 객체
2. from : 현재 URL 정보가 담긴 Route 객체
3. next : 지정한 URL로 이동하기 위해 호출하는 함수.
 - 콜백 함수 내부에서 반드시 한 번만 호출되어야 함.
 - 기본적으로 to에 해당하는 URL로 이동.

가드 이동은 화면 이동 전이다. 이동을 시키려면 next를 호출해야 한다.

to에는 이동 할 url 정보가, from에는 현재 url 정보가 들어 있음.

=> 로그인 여부에 따라서 전역 가드로 컨트롤이 가능하다. to.name을 이용.

=> 전역 가드는 모든 url 이동마다 실행이 된다.

### 라우터 가드
- 전체 route가 아닌 특정 route에 대해서만 가드를 설정 하고 싶을 때 사용
- beforeEnter()
 - route에 진입 했을 때 실행됨.
 - 라우터를 등록한 위치에 추가.
 - 단 매개변수, 쿼리, 해시 값이 변경 될 때는 실행되지 않고, 다른 경로에서 탐색 할 때만 실행된다.
 - 콜백 함수는 to from next를 전역 가드처럼 인자로 받는다.

- 라우터 가드이기 때문에 라우트에 직접 걸어준다.

### 컴포넌트 가드
- 특정 컴포넌트 내에서 가드를 지정하고 싶을 때 사용.
- beforeRouteUpdate()
 - 해당 컴포넌트를 렌더링 하는 경로가 변경 될 때 실행
- 컴포넌트가 재사용 된다면 새로고침해도 변하지 않는다.
- 기존 컴포넌트를 지우고 새로 만드는 것 보다 효율적이다. 단, 생명주기 조건이 호출되지 않았다. 따라서 $route.params에 있는 데이터를 새로 가져오지 않는다.

routes에 
```
{
    path: "*",
    redirect: "/404",
  },
```
- 해당 라우트를 추가하면 나머지 모든 path에 대해 404를 리다이렉트 한다는 뜻이 된다. 위쪽에 없는 url일 때.
- 혹은 URL 형식은 유효하나 해당 데이터가 없는 경우역시 404가 되어야 한다. 이런 경우는 형식이 맞기에 *로 적은 마지막 route로 접근이 되지 않는다. 하지만 정상적으로 렌더링 되지는 않는다.
- 즉, 해결하기 위해서는 데이터가 없다는 것을 명시해야 하고, 404 페이지로 이동해야 한다.

- 뻐킹 기본값 진짜 악랄하네

- router 역시 djagno와 마찬가지로 스크립트 언어로 돌아가기 때문에 위에서 먼저 걸리게 된다.
- 애스터리스크 리다이렉트를 하지 않는다면 마지막에 있는 `/:id` 이런 식으로 들어가면 다이나믹 라우트 매칭 (variable routing)이 되기 때문에 404로 빠지게 된다.
- 그러니 애스터리스크 써라.













