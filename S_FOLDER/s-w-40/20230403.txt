
# 20230403

어제 / 주말 간 배운 것

1. 프로젝트 코드 리팩토링의 필요성.
2. RQ Docs 전체를 살펴보는 것.
3. useQueries의 경우, map으로 배열 형태의 쿼리 키들을 queries 옵션에 넣어주는 것이다. map을 돌려주며 반환하는 것(자료형 타입)은 options 객체 형태여야 한다.
4. enabled 옵션을 통해 쿼리의 dependency를 정해줄 수 있다. dependency 값이 만족되어야 fetching을 해오게 되는 옵션임. enabled 옵션은 boolean이므로 일반적으로 의존하는 값에 !!를 붙여 두 번 부정하여 boolean으로 만들어서 넣어준다.
5. `import { useIsFetching } from "@tanstack/react-query"` 를 통해 현재 fetching 중인지 확인 시켜줄 수 있다.
6. window focus refetching 옵션이 있음. 이것은 쿼리클라이언트 객체의 기본 옵션으로도 설정이 가능하고, 쿼리 별로 설정이 가능하다.
7. window focusing event를 커스텀 하는 것은 아래의 코드
```js
focusManager.setEventListener((handleFocus) => {
  // Listen to visibilitychange and focus
  if (typeof window !== 'undefined' && window.addEventListener) {
    window.addEventListener('visibilitychange', handleFocus, false)
    window.addEventListener('focus', handleFocus, false)
  }

  return () => {
    // Be sure to unsubscribe if a new handler is set
    window.removeEventListener('visibilitychange', handleFocus)
    window.removeEventListener('focus', handleFocus)
  }
})
```
8. iframe focus 이벤트를 막으려면 아래와 같이설정.
```js
import { focusManager } from '@tanstack/react-query'
import onWindowFocus from './onWindowFocus' // The gist above

focusManager.setEventListener(onWindowFocus) // Boom!
```

9. Lazy Queries 개념. enabled 옵션을 truthy falsy한 값으로 제시하면 된다. 그렇다면 어떤 state가 생겨야 fetching을 해오게 할 수 있음

- useQueries의 존재를 생각해보면 list를 조회하는 api는 필요가 없어지나? 싶다.

---

최종 우승은 자유주제가 많음.
기업 연계는 요구사항 난이도가 높음.
오픈소스는 포폴이 좋다.
- 자율 주제
1. 수료생들 얘기 : 좀 더 다른 거 해볼 껄 싶다고 함.
2. 주제는 거기서 거기. 구현은 천차만별이다.
3. 팀 내 목표가 무엇인지 분명해야 한다. 수상ㄱ시록, 새로운 기술 습득, 자소서와 포폴에 넣을만한 프로젝트 등.
4. 워킹데이 안에 개발 및 발표가 가능한 주제와 기술 범위.
5. 명세서에 다루지 않았던 기술. 차별점이 된다.
6. 누구나 하는 주제와 기술이라면 포폴 경쟁력도 낮다. 7월에 싸료생이 쏟아지기 때문.

----


네이버는 안에서 논리적인 사고 구조를 가졌는지 파악한다. 글을 적을 때 논리적으로 적었는지 파악한다.

개발자의 고민 과정이 잘 드러나있는가. 코테를 치고 면접을 보는 기업이다. 코테가 중요하고 그 다음은 자소서 내용들을 얼마나 개발자로써 어떤 개발자가 되느지에 대한 구체적인 고민이 있는가.

기초적으로 원하는 역량은 되었다.

 채용 설명회에서 얘기한 꼭지와 키워드를 꼭지로 연결하면 된다.
말이 꼬여있다. 끊임없이 팀네이버의 테크 직군에서 일하며 누구와 함께 근무하며 매일매일 어제보다 더 성장 할 수 있습니다. 라는 형태로 가면 좋을 것이다. 함께 일 할 수 있어, 저 스스로 끊임없이 성장 할 수 있습니다.

함께 성장하는 개발자로 성장하여 => 뒷부분을 바꿔라.

한 문항을 읽으면서 그런 생각이 든다. 네이버가 자소서 자체가 당락을 결정하지 않지만 이 자소서를 보면서 코드를 어떻게 짤거 같은지 느낄 때가 있다고 함. 글을 논리적으로 쓰냐 기승전결이 있냐 등을 본다. 손을 안대는게 좋지 않나 첫번째는.

좀 더 진정성 있어보여서. 컨설팅을 받아서 깔끔하게 해볼 수 있지만, 가고 싶다는게 드러나서 좋아보인다.

콤마가 잦다. 줄이자.

솔직하게 네이버에 맞춰서 썻다기보다는, 입사하고 싶은 열정이 있다. 네이버의 소스는 없는데 진정성은 있어보인다. 진정성 있게 쓰는게 매력적으로 보인다.

정성적으로 어필하느 ㄴ포인트.  동료, 설렌다 등의 내용 중에 약간 정리를 하고, 그 중에 직군으로 결정하게 된 계기를 조금 더 직무와 연관된 워딩을 직접적으로 써서 작성해줘라. "직군"에 대한 구체적인 지원 이유가 약하다. 어떻게 성장하고 싶은지 명확하진 않지만 진정성은 느껴진다.

2번 문항은 세부 가이드

2번은 기술적 문제를 만났을 때 어떻게 대처하는가. 문제들을 만났을 때 그 때마다 어떻게 대처하는가.

어떤 문제가 발생했을 때 그 문제를 대하는 자세가 이렇게까지해서 이걸 해낸다. 할 때마다 이런 방법을 쓴다.

왜 이렇게 했어 왜 이런거 했어? 이러이러한 부분들의 어려움은 없었어? 등..

개발 경험이라는 말이 어려운것 같다. 조금 더 풀어써야겠다.

2번 문항은 프로젝트 설명이 너무 없나...? 싶다. 프로젝트 자체에 대한 설명이 있어야 하나...?
SSAFY의 프로젝트는 어떤어떤 것을 주제로 한 프로젝트였습니다 작성. 그 이후 상태관리 관련. 어떤 상황에 대한 문제를 개성하기 위해서 상태관리 규격화를 하기 위해서. 아까 설명한 모듈화 유지보수 느낌을 추가해서.

과거 프로젝트 진행 할 때, 상태관리 어려움을 느꼈습니다. ~~~ + 상태관리 규격화를 모아서 하나로 줄이고 프로젝트 진행 시 어려움을 해결하기 위해 이러이렇게 햇다.
과거 프로젝트 진행 시 상태관리 규격화가 되어있지 않아 이러이러한 문제들이 발생한 적이 있었고, 그 때중요성을 느꼈다. 규격화가 되어있냐 안되어있냐의 문제. 액션크리에이터 모듈 어쩌고 어떻게 되었는지는 패스.

이렇게 했더니, 프로젝트랑 연결시키면 된다. 이걸 했더니 프로젝트의 결과도 좋아졌다. 그 결과 프론트에서 이런 목적을 가지고 만들려 했던게 실제 사용자 경험까지 개선이 되었다.

첨부는 참고하라고 기호로 보여주면 된다.

지난번에 컨설팅 했었는데 한 번 봐주시기로 했다. 수요일 퇴근시간 전이나 목요일 오전까지!!

3번은 프론트라 적고, 왜 잘 할 수 있는지를 구체적으로 적어야 한다.
`

프론트엔드ㄱ ㅏ가져야 할 역량. 경험을 보여줘야 한다. 작성 예시대로 작성하자.

통일성 있게 정리. SW 개발. 테크 팀의 SW 개발의 프론트엔드. 너무 재사용성과 너무 개발단에 초점이 맞춰져 있다 둘 중에 하나만

계기와 관심 한 줄로 줄이고, 그것을 활용해서 시간을 아껴서 이렇게 저렇게 하니 이렇게 되었다. 프롤우가 같아져서 문제 같은데...

4번은 그냥 url 작성하면 된다.

3번은 전반에 대한 이해도가 있으면 좋다. 뭐도 해봤고 뭐의 중요성도 알고 뭐를 알기 때문에 하고 싶다. FE는 이런 것들을 중요시하며 개발하는 것이 중요하다 생각ㅎ나다. 그런 것들에 대해 어떤 역량을 주는ㅈ ㅣ안다. 그 중에서 이런 부분을 경험해봣는데 시간이 절약되어서 프론트로써 이런게 중요하다는 것은 알고 있어. 그 중에서 이런걸 설명 할거야 이런 식으로. 계기에다가 작성하면 좋다. FE 개발자는 이런걸 하는게 중요하다 생각한다.

FE의 정의를 말하는 척 하면서 경험과 역량을 살짝 얘기한다. 그 후에는 경험 정리. 결이 비슷해지니까.. 성실성 좋은데, 결을 학습에 대한 걸로 갈 수 있다. 경험을 쓸 자리가 없어질까 걱정된다.

프론트 개발자로써 이런이런것들이 다 중요하다 생각하다. 디테일하게 알고 해야한다. 또 협업도 가능하고 모든 개발자가 재사용성에 중요해야한다. 그러다보니 제대로 알고 하기 위해 열심이 공부해야한다. 매일 반복해서 공부하고 역량을 키워서 이런이런 역량을 갖추게 되었다. 그래서 FE 개발자로써 자신이 있다.

컨셉을 잡는다라는 개념이라면 고게 맞을 수 있다. 프론트엔드 개발자로써 뭐든 배우면 해내거든. 많은 일을 해얗나ㅡㄴ데 해내고, 앞으로도 이렇게 공부해서 해낼 것이다. 라는 등등.

프로젝트 했는데 찝찝해서 개선 보완 개선 보완 개선 보완한 경험이 좋다.









































