
# 20230220

주말 간 배운 것

1. 몸관리 잘 하자.
2. async는 promise를 반환한다..? 좀 더 찾아보자 아침에 이따가.

---

async와 await

async 내부에서 await 사용 가능.
await는 async 내부에서 완료 될 때까지 기다리라는 함수. 일종의 스크립트 형태로 진행 되도록 막아준다.
연속해서 axios를 체이닝 해야 하는 경우, try catch를 이용해 await로 axios를 받아올 수 있음.

```js
const test = async function () {
  console.log("async 함수 처리")
  return { data: "반환 값 /" }
}
console.log(
  test().then((res) => {
    console.log(res.data, "응답 데이터 실행")
  })
)
/*
=> 아래 입력이 찍힌다.
=> 순서대로 async 함수 처리가 된 뒤, test.then() 출력 이후 then 내부 데이터 실행.
=> 음.... 내 생각엔 내부 함수가 먼저 실행된 뒤 test.then()이 출력되야 하는 것 같은데 왜 이 순서로 출력이 될까?

async 함수 처리
Promise { <pending> }
반환 값 / 응답 데이터 실행
*/
```

1. async는 함수가 promise를 반환하게 해준다.
2. async 내부에 await를 쓸 수 있으며, 해당 부분이 끝날 때까지 대기한 뒤 다음 스크립트를 실행한다.
3. return 값을 통해 response에 저장해서 then chaining이 가능하다.

개인적인 생각
1. then chaining으로 axios를 다수 호출해야 하는 경우에는 async await가 좋을 것 같음. 단, try-catch를 해주어야 하는데, axios 에러가 catch로 잘 들어갈지는 잘 모르겠삼. 아마 펜딩/리젝트 형태로 들어가서 잘 잡힐거 같긴 함.
2. 한 번의 호출만 할 경우엔 그냥 axios에서 then chaining이 좋을 것 같다.
3. 다수의 호출이 필요 할 경우엔 axios.all([axios({}), axios({})]) 이런 형태를 쓰고, 체이닝에 체이닝을 할 때는 async function() {const a = await axios({}) const b = await axios({})} 이런 형태로 쓰면 될 듯. https://yamoo9.github.io/axios/guide/usage.html#%EB%A9%80%ED%8B%B0-%EC%9A%94%EC%B2%AD 참고.

야무 아저씨가 액시오스 기똥차게 정리해두셨다.
https://yamoo9.github.io/axios/guide/config-defaults.html

---

특화 정리

- 4차 산업 뭐시기 하는거다.
- 4차 산업 혁명 기술이 어렵다고 느낄 수 있으므로, 조금 해결하기 위해 팀 별 전문가 리뷰 시간이 있다.
- 도메인 별 현직자 멘토가 잡혀 있어서 2번의 멘토링이 진행된다.
- 국내외 현직 개발자 특강 역시 진행된다. 부트캠프 일정 참고.
- 도메인 별 라이브 방송을 통해 실용적인 정보를 제공 할 예정.
- 도메인을 어떻게 공부해야 하는지, 현업 정보들이 무엇인지 알고 잘 활용하면 좋겠다.

- 일정. 4/7 특화 마무리.
- 인공지능 영상 : 인공 신경망과 이미지 및 자연어 처리를 통한 이미지 캡셔닝 구현. 10시쯤 명세서 열리니 참고하삼.
- 팀 별 전문가 리뷰. 팀 별 현업 개발자와 리뷰를 2회 진행하게 된다. 현업 사례와 동향을 통해 도메인에 대한 인사이트 제공. 2주차에 첫번째 진행, 4주차에 개발 내용 피드백 및 QnA 진행. 현업자 관점에서 피드백을 받을 수 있는 기회이므로 잘 얻어가라.
- 프로젝트 질문들. 현직자로써 더 잘 알고 있을 내용들 역시 물어볼 수 있다.
- 도메인 사전 학습 : 도메인 특강 역시 진행한다.
- 도메인 별 조교 QnA도 진행함. mm 채널에서 대기중.
- 애플 이동진씨가 23일 오전에 개발자 성장기 실행.

사전학습 과제가 있고, 필수 2개는 제출해야 한다. 과제는 개인별로 진행, 협업은 가능하나, 개인별 제출. 사전 학습 수행 이후 싸피 깃에 개별적 제출. 도메인 따라 과제 수가 다르다.

깃랩에 프로젝트 생성 후 과제 업로드. 2월 24일 자정까지 필수로 2개 제출.
bootcamp2 프로젝트 생성, 1,2,3,4,5강 폴더 생성하고 차수에 맞는 폴더에 과제 업로드.

---

`npx create-react-app <앱_이름> --template typescript`
CRA를 이용해 react app을 생성한다면, template 옵션을 통해 typeScript 설정이 가능하다.














