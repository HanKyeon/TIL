
# 20230413

- 어제 배운 것

1. Figma API 레퍼런스가 생각보다 적어서 직접 봐야 함.
 - Figma API를 개인적으로 사용하는 용도가 아니라, 이용 할 수 있도록 만들기 위해서는 API를 모두 분석하거나, 요구하는 Figma 컨벤션? 형태를 만들어야 할 듯.
 - 우선적으로는 최상단의 프레임, 섹션 내 프레임만 가져오도록 하자. 근데 프레임만 가져오고 글너게 있을 거 같은데..
2. Figma API의 컴포넌트를 image file로 가져오는 것에서 막혔다. 해당 부분을 더 공부해보자.

---

Next.js 관련

- 일반적으로 React에서는 아래와 같이 BE 데이터를 세팅 할 것이다.
- initialData를 넣고 useEffect로 데이터를 가져옴ㄹ 수 있음. 해당 내부에서 http request를 보내서 세팅 할 것이다.
- useState로 상태 관리도 가능하다. useEffect에서 가져온 값을 저장해서 관리할 수 있다.
- 처음에는 DummyData를 useEffect에 넣고 렌더링을 해줄 것임.
- SSR SSG와 엄연히 다르다. 컴포넌트 렌더링 이후. 이후. 이후에 넣어진다.
- state가 변경되어 리렌더링을 한다. 첫 state를 마운트 될 때 실행하기에 잠시 로딩 상태를 겪게 된다.
- 이 두 번의 렌더링으로 인해 SEO 최적화가 되지 않는다.
- 첫 렌더링 될 때 data가 들어가 있지 않기 때문이다. SEO는 첫 번째 렌더링 데이터를 갖고 있기에, SSR SSG에서는 문제가 생기게 된다.
- SSR SSG는 첫 렌더 사이클만 적용한다. NextJS에 내장된 기능으로 해결 할 수 있따. 데이터가 있는 페이지를 사전 렌더링을 해야하지만, 해당 데이터를 다 받았을 때 NextJS에게 알려줘야 한다.

### Page Pre-Rendering
- 페이지는 첫 렌더링을 마친 컴포넌트의 스냅샷을 갖고 있다. 중요한 데이터가 없는 스냅샷일 것이다. after라면.
- SEO 향상에 필요한 Hydrate 라는 작업이 있다.
- HTML을 받고 React가 Hydrate 해주는 것. React가 SPA로 관리하는 것. 그 때 useEffect를 통해 데이터를 받아오고실행해준다. 브라우저에서.
- 페이지를 브라우저에서 받은 이후. 이 경우 interactive한 페이지를 갖게 된다.
- 데이터가 스냅샷에 포함되도록 하려면 작업을 해야하는데, NExtJS는 두가지 형태의 form을 통해 pre-rendering을 제공한다.
- Static Generation, Server-side Rendering 두가지를 제공한다.
- 두가지는 코드가 실행되는 시점이 달라진다. Static Generation이 일반적으로 접근하는 방법이다.

#### SSG
- 사전 렌더링 시점은 앱을 빌드하거나, nextJS를 빌드하는 시점. Production 용으로 빌드하는 시점이다.
- SSG는 nextJS를 프로덕션으로 빌드 할 때, npm run build 했을 때 코드가 실행된다.
- 기본적으로 서버에서 페이지 사전 렌덜이 하지 않는다. 사이트를 빌드 할 때, 사전 렌더링 해준다. 페이지가 빌드되고 나면 변하지 않는다 라는 것이 기본이다.
- 데이터를 업데이트해서 변경해야 한다면 해당 빌드 프로세스를 다시 빌드하고 다시 배포해야 한다.
- 이렇게 사용하는 이유는 페이지 콘텐츠가 매번 바뀌는 것이 아니기 때문이다. 그게 자주 바뀐다면 다른 형태로 진행한다.
- 기본 NextJS 페이지를 생성하고 기본적으로 빌드 프로세스 중애 페이지를 생성한다.

- 페이지 컴포넌트에서 데이터를 Fetching 해야 한다면, 페이지 컴포넌트에서 특수한 것을 export 해줘야 한다. 오로지 pages 폴더에 있는 컴포넌트만.
- 함수를 리턴하는데, 반드시 getStaticProps 라는 이름을 가진 함수여야 한다. 다른 컴포넌트는 안되고 오직 페이지에서만 가능하다.
- `export function getStaticProps () {}`
- 정해진 이름이다. NExtJS가 해당 함수를 찾으면 빌드 할 때 해당 함수를 실행한다.
- 따라서, JSX 스냅샷을 HTML 컨텐츠로 생성하기 전에 해당 함수를 불러 실행한다.
- 이 함수는 실제로 해당 페이지에서 사용 할 데이터를 Props 받는다.
- getStaticProps는 async 함수로 설정이 가능한다.
- 즉, Promise가 종료될 때까지 대기하고 빌드를 한다.
- 그렇게 되면 컴포넌트가 로드 되기 전에 데이터를 fetching하고, 컴포넌트가 해당 데이터를 가져올 수 있다.
- 파일 시스템에 접근이 가능하고, DB 접근이 가능하다.
- getStaticProps()는 클라이언트에 들고 있지 않고, 실행되지도 않는다.
- 서버에서도 실행이 안된다. 빌드 될 때 사용되기 때문에. 방문자인 클라이언트도 실행이 안된다.
- 그렇기에 getStaticProps에서 보든 일을 해줄 ㅅ ㅜ있다. fetch, 파일 시스템에서 일부 파일을 읽어온다던가 하는 등의 작업이 가능하다.
- 데이터를 얻는 작업을 완료했다면 객체를 반환해야한다.
- 반드시 getStaticProps 함수는 객체를 반환해야 한다.
- 일반적으로 props 속성을 설정해서 반환한다.
- props 역시도 객체로 반환한다.
- 해당 객체는 페이지 컴포넌트에서 사용하는 props이다.
- 이렇게 props 객체를 반환 하는데, 해당 객체는 해당 페이지에서 사용하는 getStaticPRops에서 받는 props가 된다.
- 즉, NextJS는 getStaticPRops를 실행하고, 해당 페이지 컴포넌트의 props로 내려준다.
- 그렇게 되면 import 역시 지워줄 수 있다.
- 이렇게 되면 서버쪽의 프로세싱 과정을 빌드 프로세스로 가져올 수 있기에 정적 페이지를 만들어서 페이지 소스를 만들 수 있다.
- 즉, pre-rendering도 하고 SEO에서도 좋다. 두번 째 렌더링 사이클에서 데이터를 받는 것이 아닌, 빌드 프로세스에서 사전 렌더링 될 때 ㅔㄷ이터를 설정 할 수 있으므로.
- getStaticProps는 NextJS로 작업 할 때 많이 사용 할 것이다.

- `npm run build` 할 때 쓰이는 것이다.
- Generating static props 를 통ㅎㅐ SSG 페이지를 얼만 ㅏㅁ나들엇는지 확인 가능.
- 404 페이지는 자동으로 만들어진다.
- 색이 찬 동그라미는 SSG, 빈 동그라미는 Static Page, 람다는 ServerSide.
- static page는 정적 데이터. 데이터 페칭도 없고, 소통도 없는 컨텐츠가 없는 정적 페이지로 남아있다.
- Static Generate 페이지는 getStaticProps 함수가 있는 위치이다.

- 데이터가 잘 변하지 않는다면 개인 블로그 등에서는 좋다.

- getStaticProps에서 props 외에도 revalidate property가 있다.
- revalidate 프로퍼티는 점진적 정적 생성 이라고 불리는 기능을 사용 할 수 있다.
- revalidate에 어떤 숫자가 설정되어있다면, 해당 페이지는 바로 생성되지 않고, 해당 페이지에 요청이 있다면 몇초 간격으로 생성된다.
- 예시로, revalidate에 10을 넣으면 해당 페이지에 요청이 있다면 서버는 10초 마다 생긴다.
- 해당 페이지에 요청이 들엉모ㅕㄴ, 적어도 10초마다 서버에서 페이지를 다시 생성한다는 것이다.
- 이렇게 regenerate된 페이지는 해당 페이지를 대체한다.
- 해당 숫자는 data update frequency에 따라 달라지면 된다.
- 즉 해당 숫자 초 만큼은 렌더링이 잘 된다.
- 해당 property를 사용하면 매번 빌드하고 배포 할 필요가 없다.
- 개인적으로 보기엔 ReactQuery의 staleTime 기능 같음.

- getServerSideProps는 유용하다. 사전 렌더링 될 때 쓰일 페이지이므로.
- 페이지 컴포넌트에서 export해서 데이터를 기다려야 한다.
- revalidate는 페이지가 첫 렌더링 이후 규칙적으로 업데이트 되게 할 수 있다.
- 하지만 주기적인 업데이트로도 부족 할 수ㅡ도 있다.
- 요청이 올 때마다 바뀌어야 할 때가 있다. 즉, 동적으로 사전 렌더링을 해야한다. 배포 된 이후에.
- 매초도 아니고 매 빌드도 아니고 매 요청이다.

- 그 때 쓸 getStaticProps의 대체가 있다.
- `export async function getServerSideProps() {}`
- 해당 함수 역시 Next.js가 찾는다.
- 해당 함수는 빌드에 실행되지 않는다.
- 대신 서버에서 배포 전에 실행된다.




























---

Lighthouse
- 대략 30~60초 정도면 페이지에 대한 리포트 생성된다.
- 웹사이트의 품질 강화를 위한 제안을 해준다.
- 크롬 개발자 관련 뭐시기 저시기.
- 페이지 단위로 점수를 확인해주는 것 같음.
- 상호작용, 그림 그리기 등에서 시간이 얼마나 걸리는지, 어떤 것이 문제인지 등을 확인시켜준다.
- 이미지 사이즈 줄여라 뭐 그런게 많다.
- SEO 평가, 링크 크롤링, PWA 등 여러 분야에서 테스트를 해준다.
- lightHouse를 통해 개선해가는 과정이 좋다.



