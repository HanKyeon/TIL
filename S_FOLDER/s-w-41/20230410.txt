
# 20230410

- 금/주말에 배운 것
1. ReactQuery의 페이지네이션과 데이터 유지 옵션을 통해 페이지 별 데이터를 전체 받아와서 유저 경험을 개선 할 수 있을 것이다.
2. ReactQuery의 options에는 흥미로운게 많다.
3. 테스팅 오픈소스는 다양하다.

---

Next.js 관련 학습

1. 넥스트 js 소개
- File-based Routung & Page Pre-rendering. 파일 기반 라우팅, 페이지 사전 렌더링.
- 프로젝트에 api를 추가하고 api를 추가해서 데이터 가져오기 기능.
- 리액트 위에서 작동하면서 nextJS를 사용한다.

2. NextJS란? 왜 사용하고 무엇이지?
- React Framework이다.
- for production이다. 양산형 react 앱을 편하게 구축 할 수 있도록 많은 기능을 제공한다.
- nextJS를 리액트의 풀스택 프레임워크라고 칭하고 싶다.
- 리액트는 JS 라이브러리. 컴포넌트, state, props를 통해 ui 부분에만 초점을 맞춘다.
- 큰 스케일의 리액트를 할 경우 라우팅, 인증 등에 필요한 라이브러리를 추가해서 사용해야 한다.
- 프레임워크가 라이브러리보다 더 크고 기능이 많다. 하나에 초점을 맞추기보다 많은 기능을 제공한다.
- 코드 작성 법이나 파일 구성하는 가이드. 규칙과 지침이 있다.
- 하지만 react에서 구현되는 프레임워크이다. 리액트 위에서 사용이 된다. 그렇기에 생산성이 좋다.
- 리액트 개발자들이 더 쉽게 개발하는 것이 목표이다. 
- 원래 리액트 앱에 추가해서 사용하는 기능들을 자체적으로 제공한다. 라우팅 등등.
- nextjs에서 추가된 기능들을 다룰 것이다.
- nextjs는 react 위에 있기에 nextjs를 사용하면 다른 곳에 시간ㅇ르 쓸 필요가 없다.
- 규모가 큰 리액트 프로젝트에서 실제 구축 할 때 흔히 발생하는 문제를 해결하기 위해 여러 외부 라이브러리를 추가 할 필요가 없다.
- nextjs가 프레임워크라 불리는 이유. 기능이 많고, 룰이 명확하며, react의 기능을 강화하고, react 코드를 만들고, react 컴포넌트를 만든다.
- 생산성 부분에서 누락된 기능들을 추가하기 때문인데, 실제로 개발 할 때 흔히 발생하는 문제를 해결하기 위해 리액트 앱에 추가해야 할 기능들을 추가해준다.

- 주요 기능 1 : 내장 서버 측 렌더링. SSR. SEO 향상.
    - SSR이란 페이지 콘텐츠를 클라가 아니라 서버에서 준비하는 것.
    - 일반적인 리액트 앱은 root에 가져다 붙여 렌더링 하는 것이다. 모든 렌더링은 Client Side에서 주로 실행된다.
    - SSR은 서버에서 Client로 보낼 때 렌더링을 해서 보내준다.
    - CSR의 경우, 서버에서 데이터를 받아와서 보여주면 사용자는 처음에 로딩 상태를 받게 된다. 데이터를 fetching 해오는 동안.
    - data fetching은 JS가 실행 될 때 가져와지고, 클라이언트는 대기해야 한다. Server에서 보내주는 index.html에 들어가있지 않다. 검색 엔진 최적화가 중요하다면 해당 부분은 문제가 될 수 있다.
    - 로그인을 해야만 볼 수 있는 관리 대시 보드 등의 경우에는 SEO가 중요하지 않다. 검색 엔진은 대시보드를 볼 수 없기 때문. 어떻게든 로그인을 시켜야 하기 때문.
    - 하지만 SEO가 중요한 컨텐츠가 많은 공개 페이지의 경우, Search Engine Optimization이 중요하다.
    - SEO는 Client에서 렌더링한 html 파일을 읽지 못한다. 그렇기에 SSR이 도움이 된다.
    - 서버에서 해당 페이지를 사전 렌더링 한 상태에서 데이터 fetching이 되었을 때, 서버에서 해당 데이터를 가져오면 완성된 페이지를 유저와 검색 엔진 크롤러에 제공된다.
    - 그러면 유저는 로딩 state를 보지 않아도 되고, 검색 엔진도 해당 페이지의 컨텐츠를 보게 될 것이다.
    - SSR을 통해 해결이 가능하다. 서버에서 React 컴포넌트를 사전 렌더링 할 수 있다는 것이다.
    - 리액트에서도 SSR 기능이 내장되어 있지만 (ReactDOMServer), 구현이 까다로울 ㅅ ㅜ있다. 추가 설정을 좀 해야한다.
    - Next JS에서는 더 쉬워진다. SSR이내장되어 있기 때문이다.
    - 자동으로 페이지를 사전 렌더링 하게 된다. 기본 Next JS앱을 만들면 추가 설정을 하지 않고도 페이지 방문 했을 때 서버에서 기본적으로 바로 사전 렌더링을 해준다.
    - 이렇게 되면 SEO에 아주 좋다. 검색 엔진이 사용자가 보는대로 보기 때문. 그리고 사용자에게도 더 나은 경험을 제공한다. 첫 로딩이 없어지므로.
    - SSR은 비어있는 HTML이 아닌, 모든 콘텐츠가 HTML 페이지에 있는, 서버에서 받은 html을 렌더링 한다. 초기 요청으로 읽어들인 후에도 여전히 기본 리액트 앱과 기본 SPA를 실행 할 수 있다는 것이다.
    - 사용자가 navigate 역시도 가능하다. 페이지를 탐색 할 때 모든 브라우저에서 React가 관리하여 사용자에게 빠른 UI를 제공한다. 일반적으로 리액트가 제공하는. ㄱ이런 부분에서 리앹그를 사용한다.
    - pre-render page를 받아온다.
    - 즉, nextjs는 클라이언트와 서버사이드 코드를 혼합해준다는 뜻이다. 서버 쪽에 돌아가는 코드를 어떤 식으로 작성할 지 알아야 한다.
    - nextjs를 구성하는 주요 기능인 SSR은 그 자체로 강점을 지니며, 리액트 프로젝트를 구축 할 때 리액트js 뿐만 아니라 넫스트를 써야하는 이유가 된다.

- 주요 기능 2 : 파일 기반 라우팅으로 라우팅 간소화. File-based Routing
    - 기존 리액트에는 라우터가 없었음.
    - 라우팅이란, SPA에서 다른 페이지를 확인 할 수 있도록 해주는 일종의 눈속임이다.
    - URL을 보다가 BE에 보내는 브라우저 동작을 막고, react를 통해 다른 컴포넌트를 렌더링 한다.
    - 리액트 라우터를 통해 라우팅을 Appjs에서 코드를 통해 관리한다. 리액트 라우터는 좋은 라이브러리지만, 라우팅을 별도의 폴더에 저장하고 라우트 섫정을 복제해서 사용한다.
    - NextJS는 이런 라우팅을 없앤다. 파일과 폴더를 통해 라우팅을 한다. pages 라는 무조건적인 폴더 이름ㅇ르 통해 이 폴더를 통해 라우트와 경로를 정의하면 된다.
    - pages 폴더의 routeName 폴더를 통해 폴더 구조를 잡는 것으로 웹 개발을 하면 된다. HTML and CSS로 기본 개발 하듯이 사용하면 된다.
    - NextJS는 가장 기초적이면서 이해하기 쉬운 형태로 라우팅을 해준다.
    - 중첩 라우팅, 동적 라우팅 같은 모든 기능을 지원한다.

- 주요 기능 3 : 풀스택 앱 빌드
    - NextJS는 fullstack Framework이다.
    - BE 코드를 쉽게 추가 할 ㅅ ㅜ있다.
    - NextJS는 Client 코드만 있어야 하는게 아니라, 독립형 백엔드 코드가 필요하다.
    - 예를 들어 파일 시스템을 작업한다던가, DB에 접근 할 수 있어야 한다. NextJS는 NodeJS 코드를 통해 BE API를 쉽게 추가 할 수 있다.
    - NextJS를 이용하면 Next/React App에 쉽게 코드를 추가 할 수 있다.
    - DB나 파일에 데이터를 저장하거나, 거기서 데이터를 받아오거나 인증을 추가하는 등의 작업을 NextJS로 줄일 수 있다. NextJS 코드를 알아야 하지만 쉽게 가능하다.
    - BE를 설계 할 때 필요하다. 그렇게 되면 REST API 프로그램을 만들지 않아도 된다. ClientSide Code와 BE API코드와 혼합하면 NextJS가 된다.

- 주로 ul 태그와 li 태그에 a 태그 혹은 Link 태그로 링크를 구현하는 듯? a태그는 차선책이고, a 태그는 잠시 윈도우 단에서 이동이 일어난다는 신호. 새 html을 받아온다는 뜻이다.
- 사전 렌더링 페이지가 있다면 상관 없다. 유저가 들어온 경우 SPA를 유지시키는 것이 UX 면에서 좋다. React를 사용하는 이유가 그것임.
- 대화형 UI를 통해 새 html을 받지 않고, 업데이트만 하면 되기 때문에.
- a태그를 이용하면 페이지를 새로 불러들어오기 때문에, state 등을 잃어버리게 된다. 새로 렌더링이 되기 때문에.
- Link 컴포넌트는 next/link의 default export 값이다.
- Link의 href 속성 역시 같이 갖고 있다.
- Link를 통해 새 HTML 페이지를 가져오지 않더라도 가져올 수 있다. 즉, react의 SPA 리액티브한 것, 페이지 상태 관리 및 저장이 가능하고, url을 통해 이미 완성된 html 페이지 역시 받ㅇ르 수 잇다.
- SSR에서 SPA 내부에 있는 것이다. Link 태그는 새 HTML을 받아오지 않도록 막아준다. 대신 가져온 컴포넌트를 읽고, url을 변경하여 페이지가 변경된 것처럼 보이게 한다.
- 실제로는 SPAㄹ처럼 작동하게 한다. 앵커 태그 대신 Link 태그를 써라.

- 더 큰 프로젝트에서의 사용
- 페이지 data fetching 및 pre-rendering 관련 활용해봄.
- components 폴더에 컴포넌트를 만들면 된다.


- 컴포넌트에 작성되는 것은 React Component이다. pages folder에 들어가 있지 않음.


- 데이터 fetching 하기.





----

Next.js Project App 만들기

넥스트 앱 빌드 : `npx create next-app@latest --ts`

`npm run dev` : 개발 서버로 실행.

`npm install`
``

기본 실행하면 pages, public, styles가 들어감.
퍼블릭은 페이지에서 사용 할 공개 리소스가 있음. 이미지 같은 것.
퍼블릭을 보면 일반적인 react app 과는 다른 것을 확인 할 수 있다. index.html이 없다는 것.
nextJS는 SSR을 지원하기 때문에.

- 넥스트는 사전 렌더링 페이지를 제공하기에, SPA를 지원할 때 SPA를 동적으로 사전 렌더링을 거쳐 컨텐츠를 포함한 초기 컨텐츠를 담은 페이지가 렌더링 된다. SSR.
- 따라서 pages 폴더가 가장 중요하다. File Based Routing과 다른 페이지, 함수 등을 정하기에 중요하다.

- index.js에 app 컴포넌트가 들어간다.
- 페이지 폴더에는 _app.js가 들어가게 된다.
- pages의 index.js는 루트 페이지로 사용된다. 도메인에 `/`로 들어오면 index를 읽어온다.
- asdf.js를 만들면 `/asdf`로 작동한다. 파일 이름이 경로로 사용된다.
- 이후 해당 부분에서는 react Component가 들어간다. 일반적으로 함수형 컴포넌트.
- export 해서 NextJS가 찾을 수 있도록 해준다.
- nextJS는 최신 React를 지원하기에 `import * as React from "react"` 생략 가능.
- 파일을 만들어서 실행해보면 파일기반 라우팅은 서버에서 렌더링해서 받아온다. 특별한 추가 설정 없이도 내장된 SSR은 자동으로 사용된다.
- 폴더의 index.ts를 주면 해당 라우팅의 index가 들어감.




---- 개인 검색 결과
- next.js 첫 렌더링의 Inter는 font 관련 설정이다. : 참조 https://nextjs.org/docs/basic-features/font-optimization
- navigate의 경우, 이제 SSR이 되었으므로 Link와 href를 이용해 보내주는데, Link는 next/link 에서 import 해줘야 함.
- 다이나믹 라우팅 및 쿼리 파라미터 받기, 여러개의 routing을 동시에 받기 : 참조 https://nextjs.org/docs/routing/dynamic-routes
- 결국 직접 사용해보는 것이 가장 좋아 보인다.



