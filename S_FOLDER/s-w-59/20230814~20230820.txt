
1. 싱글톤 패턴

- private static instance를 생성
- 생성자를 pivate으로 만들기
- getInstance() 함수를 public static으로 만들어서 클래스의 전역 인스턴스가 없을 경우 instance에 new Class를 해주고 Class.instance를 반환해줌.

2. 모노레포

- pnpm으로 생성.
- 데뷰 블로그에서는 이게 왜 좋은지 몰랐으나 확실히 좋았음. 의존성 관리를 함께 해준다는 것이.
- 일단 한 폴더에 있다는 것 만으로도 충분히 만족스럽게 가능. package 관련된 내용도 달라진다.
- packages 폴더를 workspace로 지정해주고 그런식으로 진행한다.

3. npm pnpm yarn의 차이

- 솔직히 내가 볼 땐 별 차이 없다. 하지만 yarn은 확실히 참고할 것이 많기에 yarn에 익숙해지는 것이 좋을 것으로 보임.
- 근데 실제로는 pnpm이 상당히 빨랐는데... pnpm은 거대한 크기를 다루는 것은 별로라고 하는 것으로 보인다.

3. 라이브러리 제작기

- 라이브러리 만드는 것! 재밌따!
- 근데 배포해야하기에 npmrc를 작성해야 하고... 또 뭔가 어려운 것들이 많다.
- 라이브러리에 registry 같은 것도 있고... 정말 공부할 것이 많다.

4. 클로저 관련

- 이벤트 리스너에 리액트 state를 출력하는 함수를 만들면 state가 당시 상태를 고정되게 출력한다. 실제 state가 변하더라도.
- 그렇기에 class로 관리한 상태 혹은 mobx로 관리한 상태를 이벤트 리스너에 달아주거나, react state를 달아주고 싶다면 ref로 달아줘야 한다.

5. 린팅 관련

- tsconfig.base.js에서 해당 폴더의 베이스를 지정 가능한듯.
- 혹은 그냥 레퍼런스로 찝어주던지. eslintrc는 잘 모르겠다.

6. 클래스 관련 배포 후기

1. 일단 싱글튼 클래스를 배포했음. iframe에서 사용하고, parent에서 postMessage 이벤트를 사용하는 용도였음.
2. 클로저 때문에 예상 못한 사이드 이펙트가 있었으나, 클래스 저장소를 사용하는 mobx를 사용하기에 큰 문제가 되지는 않을 것으로 보임.
3. 해당 클래스는 Map을 사용하였고, 사용하지 않은 문법들을 정말 자주 사용해볼 수 있어 배울게 많았음.
4. 싱글튼 클래스를 상속이 가능한가 궁금해졌음.






