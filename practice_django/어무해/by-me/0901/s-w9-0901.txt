
가상환경이 아닌 global에서
`pip install -r requirements.txt` 하면 안깔아도 된다!

Models : DB와 소통하는 도구. ORM을 통해 DB를 조작하는 것.
namespace : html 이름이 같으면 문제가 생겨서 내부에 app폴더를 만들어 샌드위치 구조로 만들어서 템플릿을 넣어준다.

DB는 그저 엑셀이다. 테이블이 많이 모여있는 것이다. 테이블은 relation이라고 부른다.

DB는 장고2주 알고3주 이후 자세하게 할 것이다.
기본 구조
1. 스키마 : column의 field와 field의 datatype이 들어가 있다.
2. 테이블 : 필드와 레코드가 모인 relation.

pk : 각각의 record==row를 구분해주는 고유값. primary key. 각 데이터를 고유하게 구분해주는 key이다. 이러한 primary key는 한개일 수도 있고, 여러개일 수도 있다.

Query쿼리 : DB를 조작할 수 있는 언어. 쿼리를 날린다. SQL이라는 언어를 쓴다.

장고는 모델을 통해 DB를 조작한다.

models.Model을 models에서 정의하는 클래스에 상속시켜준다.

migration : 모델의 변경 사항이 하나하나 담겨져 있는 것이다.
migrations : migration들의 모임. 쌓인 변경 사항들.

`python manage.py makemigrations` : 변경사항 만들기
`python manage.py migrate` : 변경사항 적용
`python manage.py sqlmigrate app_name migration_name` : 확인하기

날짜만 : DateField
날짜 시간 : DateTimeField

auto_now_add : 만들어 지는 시점의 최초 한 번만 저장
auto_now : 데이터 변경사항이 생길 때마다 새로 저장.
-> default 값이 없으면 안되므로 넣어줘라..

ORM : DB와 소통 할 때 파이썬 번역기 Object Relational Mapping
세밀한 DB조작은 ORM으로 불가능하다. 생산성이 좋아서 사용한다. SQL을 더 안배워도 되니까.

INSTALLED_APP에 넣을 때는 언더바로, django_extensions 이렇게 해야한다.

장고 쉘 orm의 매개체가 되어준다.
파이썬 쉘은 파이썬 파일만 해줘서
장고 프로젝트의 기능을 사용하는 중간 쉘이 필요하다. 그래서 장고 쉘을 제공한다.

쉘 플러스로 쓰는 이유는 만든 앱에 대해, 내가 작성한 모든 모델에 대해 import를 해주기에 바로 접근이 가능하다.

`App_name.objects.all()` : 쿼리셋 API라 청한다. all() 뿐만 아니라 filter 등등 많다.

실 예시 : `Article.objects.all()` -> 쿼리셋이 등장!

모델클래스.objects.쿼리셋API : objects는 상속 받은 models.Model에 포함되어 있다!

쿼리셋 API로 db에 요청을 하면 쿼리셋 혹은 단일 객체인스턴스로 반환이 온다.
쿼리셋은 리스트와 비슷하다. 인덱싱 가능. DB가 단일 개체를 반환 할 때는 쿼리셋이 아닌 class의 인스턴스로 반환됨.

CRUD Create Read Update Delete

데이터 객체 만드는 3가지 방법 : 하나의 객체를 만들고 그 객체의 변수들을 전부 초기화 한 뒤, save()로 저장.
```
데이터 create 3가지 방법

article=Article()
article.title = "선언"
article.content = "초기화"
article.save()

article = Article(title = "콩진호콩진호", content = "콩진호콩진호")
article.save()

Article.objects.create(title = "삼삼드래", content = "삼삼드래도 메가진화 줘")
```

```
READ 방법 : all() get() filter()
전체 데이터 조회 : all()
Article.objects.all()
articles = Article.objects.all()
articles[0] 인덱싱 가능

단일 데이터 조회 : get() `get()`의 특징으로, get 안의 조건을 만족하는 객체가 많다면, 한 개, 유일한 것이 아니라면 MultipleObjectsReturned 에러를 내뱉는다.
Article.objects.get(pk=1)
Article.objects.get(content="콩진호콩진호")
Article.objects.get(title="삼삼드래")

지정된 조건에 맞는 모든 데이터를 쿼리셋에 담아 반환 : filter() `filter()`는 chaining체이닝이 가능해서 여러 조건을 걸어줄 수 있다. 조건을 만족하는 것이 없다면 빈 쿼리셋을 반환한다.
Article.objects.filter(content="django!")

Field lookups : filter, exclude, get 등의 키워드 인자이다.
특정 레코드에 대한 조건을 설정하는 방법. ex)content__contains='dj' : 컨텐트에 dj를 포함 한 것. 등.. 독스에 있다.
```

```
Update
업데이트 하고 싶은 레코드를 불러서 변경하고 저장.

article = Article.objects.get(pk=1)
article.title="변경"
article.save()
```
```
Delete
지우고 싶은 레코드를 불러서 지우면 끝

article = Article.objects.get(pk=1)
article.delete()
```

클래스의 매직 메서드 중 던더str을 정의하면 쿼리셋에서 반환되어 보여지는 것을 바꿀 수 있다.
매직 메서드는 DB와 아무 상관이 없다. 그래서 매직 메소드를 바꿔도 마이그레이션을 하지 않아도 된다. field를 고치는 경우는 DB에서 변경사항이 생겨서 그렇다.

가상환경 및 설치
프로젝트 생성
앱생성
INSTALLED_APP에 앱 추가
프로젝트 url을 앱url로 돌리기
앱url
앱 views
앱 html
최상단 폴더에 templates 생성
base.html 생성
block 설정
프로젝트 setting가서 DIR에 BASE_DIR / 'templates', 경로 추가
앱html에서 상속 받기 및 제작
앱 models.py 조작 및 makemigrations
migrate하기.

-------

return render 대신 새로운 함수. new와 create, throw와 catch를 한 페이지로 모을 것이다.

render 함수는 template를 렌더링해서 보여주는 것인데, 글 작성 이후에는 렌더해서 보여줄 필요가 없다.

redirect를 render와 함께 import 해주고, redirect는 주소를 반환하여 그 주소로 이동시켜야 한다.
`redirect('articles:index')` 콜론으로 보내줘야 한다.
이렇게 되면 create.html이 필요 없어진다. but urls의 create는 있어야 한다.

- HTTP response status code
클라이언트에게 특정 http 요청이 성공적으로 완료 되었는지 여부를 알려줌.

5개의 그룹으로 나눠짐.
1. 1xx : informational responses  
2. 2xx : successful responses - 성공**
3. 3xx : Redirection messages 
4. 4xx : Client error responses - 실패. 클라탓**
5. 5xx : Server error responses - 실패. 서버탓**

http mdn docs 에서 확인하면 좋다.
400 잘못된 문법으로 서버가 이해 못함
401 인증 안된 사람이라 밴. 인증을 안한 것
403 권한이 없는 사람이라 밴.
404 요청은 받았는데 그런 리소스 없다. 없는 url이다.

500 internal server error. 뭔지 모르지만 서버 터짐

302 정보성 코드. 너가 요청한거 새로 서버 측에서 다른 곳으로 돌려 보냇다는 뜻

정보를 달라! : GET
DB 수정 삭제 : POST

POST를 할 때는 CSRF가 있어야 함. 비밀 번호. 요청이 오면 토큰이 맞으면 가능하게끔 함.

템플릿 안에 csrf 토큰이 포스트 form 안에 필요하다.

details page:
모든 요소를 보여주지 말고, element에 대한 상세 페이지. 하나하나 글을 보여주는 detail page.

<a href="{% url 'articles.detail' article.pk %}">aaaaaaaa</a>
이런 식으로 하면 된다.

html 내부 url 호출시 articles:detail 콜론 사용!!!!!! html 파일을 부를 때는`/` 받은 변수를 부를 때는 `.` 주소를 부를 때는 `:` 라고 이해하자.

url + enter는 GET 방식이다.
POST 방식으로 바꾸기 위해서 버튼으로 만들어 줄 것이다.

- UPDATE
수정하는 창을 보여주는 url, 실제 db를 바꿔주는 url 두 개를 만든다.



- Admin site : 장고가 제공하는 강력한 관리자 기능.
모델 class를 admin.py에 등록하고 관리. 관리자 페이지에서 관리하려는 class를 넣어야 함.
`python manage.py createsuperuser` : 슈퍼유저 만들기
이름
이메일
비번(안보임)
비번확인(안보임)
제작 이후 /admin/ 에서 로그인 가능.

admin.py에 앱을 임포트 해주고
장고 모듈을 통해 그래프도 만들 수 있고 pip로 설치한다 서드파티 라이브러리.
`from articles.models import Article` 임포트
`admin.site.register(Article)` 
마이그레이션 : 모델에 생긴 변화
마이그레이션스 : 모델에 생긴 변화를 DB에 올리는 것.
마이그레이트 : 적용하는 것

200 : ok
400 : 클라탓
500 : 서버탓

