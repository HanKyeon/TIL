'''
물탱크

세로n, 가로m, 높이h. 모두 양정수.
가로 세로 벽이 존재. 물 높이 조정을 위해 구멍이 나있음. 각 칸에는 4개의 벽, 벽 내부에는 최대 1개의 구멍. 모서리엔 구멍 x
물탱크 내부에도 빵꾸 가능.

물탱크에 물을 채울 땐 모든 구멍을 마개로 막아 물이 새지 못하도록 한 뒤 격자의 각 칸 위에 설치된 급수 장치를 통해 전체를 물로 채우고, 구멍을 막고 있는 모든 마개를 제거하면 물이 구멍을 통해 인접한 방이나 외부로 흘러나가게 된다. 어느정도 시간이 지나면 물이 더이상 흘러나가지 않게 되고, 그 때 물탱크 격자의 각 칸에 남아있는 물의 높이는 서로 다를 수 있따.
벽의 두께를 무시 할 때, 물탱크에 남아있는 물의 총량을 계산하는 프로그램 작성.

입력
세로, 가로, 높이 n, m, h
가로 벽 구멍 정보 m개의 정수 제시. 각 정수는 좌측부터 시작하여 순서대로 각 칸의 두멍 높이 의미. 0이상 h 미만 정수. 구멍이 없으면 -1.
두번 째 가로 벽 빵꾸... 해서 n+1개 줄에 가로로 된 모든 빵꾸 정보 제시.
가로벽을 공유하는 칸들의 세로 벽에 설치된 빵꾸 정보를 m+1개의 정수로 제시. 1세로부터 시작하여 각 세로벽의 구멍 높이. n개 줄에 걸쳐 세로 벽에 설치된 모9ㅔ든 빵꾸 제시.

출력
물이 더 이상 흘러나가지 않는 시점에 물탱크에 남아있는 물의 총량을 표준 출력으로 출력한다.
'''
import sys
from heapq import heappop, heappush
input = sys.stdin.readline

n, m, h = map(int, input().rstrip().split())
g = [[h]*m for _ in range(n)]
garo, sero = [], []
heap = []
# 영향을 받는 기준은 h이며, h, h+1 인덱스에 영향.
# 벽을 기준으로 보자면, wh, wh-1 에 영향. wh와 wh-1이 없을 수도 있음.
s = list(map(int, input().rstrip().split()))
for i in range(n+1):
    s = list(map(int, input().rstrip().split()))
    garo.append(s)
# 영향을 받는 기준은 w이며, w, w+1 인덱스에 영향.
# 벽을 기준으로 보자면, ww, ww-1에 영향. ww와 ww-1이 없을 수도 있음.
for i in range(n):
    s = list(map(int, input().rstrip().split()))
    sero.append(s)
while heap:
    pass

'''
풀이 아이디어
1. 벽의 구멍부터 bfs. 영역 설정으로 보면 될듯. 낮은 빵꾸 높은 빵꾸는 어떻게 할지 고민해봐야 할듯
2. 내부 기둥 끼리 연결되어있는지도 확인해줘야 함.
'''














