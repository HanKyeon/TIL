'''
RGB 거리

집이 N개. 거리는 선분으로 나타내고
1번집부터 N번집까지 순서대로 존재.
집은 빨 초 파 중 하나의 색으로 칠해야함.
각각의 집을 빨 초 파 순으로 칠하는 비용이 주어졌을 때
아래 규칙을 만족하면서 집을 칠하는 비용의 최솟값
1번집의 색은 2번집과 달라야 함.
N번집의 색은 N-1번 집의 색과 같지 않아야함.
2이상  N-1이하 i의 집 색은 i-1번, i+1번 집과 같지 않다. 연속되게 칠하지 않는다.

입력
첫째줄에 집의 수 2이상 1000이하 자연수
둘째줄부터 각 집 빨 초 파 비용. 비용은 1000이하 자연수

출력
모든 집을 칠하는 비용의 최솟값 출력.

# 각 RGB로 오는 최솟값을 고려해서 만들어두면
지난 색이 R이라면 G B로 갈 수 있고, G라면 R B로, B라면 R G로 갈 수 있다.
즉 현재 노드가 R일 때 최솟값은 지난 노드가 G 혹은 B일 때 최솟값에 현재 노드의 R값을 더해준 값.

현재 노드가 G라면 현재 노드를 G로 칠하는 값에
이전 노드가 R, B 일 때 값 중 작은 값을 더해주면 된다.
'''
'''
def cp(num):
    for i in range(3):
        if hc[num-2] == hc[i]:
            dp[num] = min(dp[num], hc[num][(i+1) % 3], hc[num][(i+2) % 3])
'''
n = int(input())
# hc 만들 때 [0]*3 통째로 더하면 안된다.
hc = [[0] * 3] + [list(map(int, input().split())) for _ in range(n)]
for i in range(1, n+1):
    for j in range(3):
        hc[i][j] = hc[i][j] + min(hc[i-1][(j+1)%3], hc[i-1][(j+2)%3])
print(min(hc[n]))








