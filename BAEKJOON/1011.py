'''
Fly me to the Alpha Centauri

공간이동 장치.
거리는 찬찬히 증가.
예를 들어, 처음 작동시킬 경우 -1 , 0 , 1 이동 가능. 0과 1은 무의미 1이동 가능
그 다음에는 0 , 1 , 2 이동 가능 여기서 다시 2 이동한다면 다음 시기엔 1, 2, 3 이동가능
x지점에서 y지점을 향해 최소한의 작동 횟수로 이동
y지점에 도착하기 바로 직전의 이동거리는 반드시 1
x지점부터 정확히 y지점으로 이동하는데 필요한 공간 이동 장치 작동 횟수의 최솟값

입력
테케T
x1 y1 x, y는 0이상 2^31 이하
x2 y2

출력
최소 장치횟수들
'''
def 함수(num):
    i = 1
    while i**2 < num:
        i+=1
    if i**2 - i < num < (i+1)**2:
        print(i*2-1)
    elif num <= i**2-1:
        print(i*2-2)

for _ in range(int(input())):
    x, y = map(int, input().split())
    함수(y-x)

'''
찾은 규칙들
홀수항은 제곱
짝수항은 (1+2+...n) * 2
홀수항은 1 121 12321
짝수항은 11 1221 123321
이런 경우가 생길 때마다 거리가 늘어남.
근데 짝수는 이제 홀수^2-홀수가 됨.

2번째가 1이니 1은 0
4번째가 4라면 3은 2
6번째가 9라면 5는 6
8번째가 16이면 7은 12
9번째가 25라면 8는 20
이런 식이다.
표로 만들어보면
0 1 2 4 6 9 12 16 20 25 30 ...
0 1 2 3 4 5 6  7  8  9  10 ...
위의 그래프를 g라 할 때
g[i-1] < 차이값 <= g[i] 의 경우. 아래의 값이 들어간다.
'''

'''
메모리 초과 dp 방식.
def 함수(num):
    a = 0
    for i in range(1, 2**30):
        if g[i-1] <= num < g[i]:
            a = i
            break
    return a

g = [0] * (2**31)
sp = list(range(2**30))
for i in range(2**31):
    if i % 2 == 0:
        g[i] = sum(sp[:i//2+1]) * 2
    else:
        g[i] = i**2
'''
