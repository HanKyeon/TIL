'''
퇴사

N+1일째 되는 날 퇴사. N일까지 일 할 것.

입력
N 일에 각각 잡혀있음. 1이상 15이하
일수 보수 n번 반복

출력
최대 이익
'''
n = int(input()) # n일
g = [] # 그래프
for i in range(1, n+1): # 그래프에 시작날짜, 걸리는 일수, 가치를 함께 넣기 위해 for문
    t, p = map(int, input().split())
    g.append((i, t, p))
dp = [0]*(n+6) # 걸리는 일수 최대는 5일이라 n+6
for i in g: # 그래프 훑으며
    idx, day, val = i # 시작날짜, 걸리는 시간, 가치
    dp[idx+day] = max(dp[idx+day], val + max(dp[:idx+1])) # dp
print(max(dp[:n+2])) # 최댓값
'''
dp 테이블은 해당 일 전날까지 얻을 수 있는 금액의 최댓값을 넣었음.
예를 들어 아래처럼 주어졌다면
01 02 03 04 05 06 07 (시작 날짜)
03 05 01 01 02 04 02 (걸리는 시간)
10 20 10 20 15 40 200 (가치)
00 00 00 10 30 20 45  00 245 70 00 00 (dp)
dp[4] 4일이 시작되는 날 최대 이익은 1일에 얻은 10 혹은 3일에 얻은 10이다.
dp[4] = max(기존 dp[4], 새로이 추가된 항으로 얻는 최대 가치)

dp는 아래와 같은 규칙으로 만듬.
1. 상담이 끝나는 날이 아니라면 dp 기록이 안되므로 해당 항 까지의 최댓값으로 계산.
2. n일에 종료되는 경우, n+1에 기록되므로 n+1까지 읽음.

# 숏코딩
n=int(input());
v=[0]*30;
r=s=0
while s<n:
    t,p=map(int,input().split());
    v[s+t]=max(v[s+t],r+p);
    s+=1;
r=max(r,v[s])
print(r)

'''
